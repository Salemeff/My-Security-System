<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Axle.Core</name>
    </assembly>
    <members>
        <member name="T:Axle.AbstractEqualityComparer`1">
            <summary>
            An abstract class to serve as a base to implementing the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> interface.
            </summary>
            <typeparam name="T">
            The type of objects to compare. This type parameter is contravariant. That is, you can use either the type
            you specified or any type that is less derived. For more information about covariance and contravariance,
            see "Covariance and Contravariance in Generics".
            </typeparam>
            <seealso cref="T:System.Collections.Generic.IEqualityComparer`1" />
        </member>
        <member name="M:Axle.AbstractEqualityComparer`1.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name="x">
            The first object to compare.
            </param>
            <param name="y">
            The second object to compare.
            </param>
        </member>
        <member name="M:Axle.AbstractEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name="x">
            The first object to compare.
            </param>
            <param name="y">
            The second object to compare.
            </param>
        </member>
        <member name="M:Axle.AbstractEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">
            The instance of <typeparamref name="T"/> for which a hash code is to be returned.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Axle.AbstractEqualityComparer`1.GetHashCode(`0,System.Boolean)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">
            The instance of <typeparamref name="T"/> for which a hash code is to be returned.
            </param>
            <param name="appendTypeHashCode">
            Indicates if the hash code of the underlying type will be automatically
            appended to the hash code generated by the <see cref="M:Axle.AbstractEqualityComparer`1.GetHashCode(`0)" /> method.
            </param>
            <returns>
            A hash code for the specified object.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Axle.AbstractEqualityComparer`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">
            The object to compare with the current object.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Axle.AbstractEqualityComparer`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Axle.AbstractEqualityComparer`1.DoEquals(`0,`0)">
            <summary>
            When overridden in a derived class, determines if the two <typeparamref name="T" /> instances are equal.
            </summary>
            <param name="x">
            The first object to compare.
            </param>
            <param name="y">
            The second object to compare.
            </param>
        </member>
        <member name="M:Axle.AbstractEqualityComparer`1.DoGetHashCode(`0)">
            <summary>
            When overridden in a derived class, this method produces the hash code of the supplied object.
            </summary>
            <param name="obj">
            The object whose hash code should be calculated.
            </param>
            <returns>
            The hash code of the passed by the <paramref name="obj"/> object.
            </returns>
        </member>
        <member name="T:Axle.AdaptiveComparer`2">
            <summary>
            An implementation of the <see cref="T:System.Collections.Generic.IComparer`1"/> interface, that can compare instances of 
            <typeparamref name="T1"/>. The comparer works by delegating the comparison logic to another 
            <see cref="T:System.Collections.Generic.IComparer`1"/> implementation that can handle instances of <typeparamref name="T2"/>. 
            The delegation is aided by invoking a user-defined adaptation function which maps the souce 
            comparable object (of type <typeparamref name="T1"/>) to an instance of the <typeparamref name="T2"/>
            type, before passing it to the other comparer.
            </summary>
            <typeparam name="T1">
            The type of objects the current <see cref="T:System.Collections.Generic.IComparer`1"/> can handle.
            </typeparam>
            <typeparam name="T2">
            The type of objects that the underlying <see cref="T:System.Collections.Generic.IComparer`1"/> can handle.
            </typeparam>
            <seealso cref="T:Axle.AdaptiveEqualityComparer`2"/>
        </member>
        <member name="M:Axle.AdaptiveComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IComparer{`1})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.AdaptiveComparer`2"/> class with the
            provided <paramref name="adaptationFunction"/> and <paramref name="comparer"/>.
            </summary>
            <param name="adaptationFunction">
            A <see cref="T:System.Func`2"/> that is used to map values of <typeparamref name="T1"/>
            to <see langword="abstract"/> value of <typeparamref name="T2"/>.
            </param>
            <param name="comparer">
            A <see cref="T:System.Collections.Generic.IComparer`1"/>, which handles the converted by the <paramref name="adaptationFunction"/> 
            values of <typeparamref name="T2"/>, and determines the comparison result returned by the current
            <see cref="T:Axle.AdaptiveComparer`2"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="adaptationFunction"/> or <paramref name="comparer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.AdaptiveComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.AdaptiveComparer`2"/> class with the
            provided <paramref name="adaptationFunction"/> and the default comparer for <typeparamref name="T2"/>.
            </summary>
            <param name="adaptationFunction">
            A <see cref="T:System.Func`2"/> that is used to map values of <typeparamref name="T1"/>
            to <see langword="abstract"/> value of <typeparamref name="T2"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="adaptationFunction"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.AdaptiveComparer`2.Compare(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Axle.AdaptiveEqualityComparer`2">
            <summary>
            An implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> interface, that can compare instances of 
            <typeparamref name="T1"/>. The comparer works by delegating the comparison logic to another 
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation that can handle instances of <typeparamref name="T2"/>. 
            The delegation is aided by invoking a user-defined adaptation function which maps the souce 
            comparable object (of type <typeparamref name="T1"/>) to an instance of the <typeparamref name="T2"/>
            type, before passing it to the other comparer.
            </summary>
            <typeparam name="T1">
            The type of objects the current <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> can handle.
            </typeparam>
            <typeparam name="T2">
            The type of objects that the underlying <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> can handle.
            </typeparam>
            <seealso cref="T:Axle.AdaptiveEqualityComparer`2"/>
        </member>
        <member name="M:Axle.AdaptiveEqualityComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.AdaptiveEqualityComparer`2"/> class with the
            provided <paramref name="adaptationFunction"/> and <paramref name="comparer"/>.
            </summary>
            <param name="adaptationFunction">
            A <see cref="T:System.Func`2"/> that is used to map values of <typeparamref name="T1"/>
            to <see langword="abstract"/> value of <typeparamref name="T2"/>.
            </param>
            <param name="comparer">
            A <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>, which handles the converted by the <paramref name="adaptationFunction"/> 
            values of <typeparamref name="T2"/>, and determines the comparison result returned by the current
            <see cref="T:Axle.AdaptiveEqualityComparer`2"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="adaptationFunction"/> or <paramref name="comparer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.AdaptiveEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.AdaptiveEqualityComparer`2"/> class with the
            provided <paramref name="adaptationFunction"/> and the default comparer for <typeparamref name="T2"/>.
            </summary>
            <param name="adaptationFunction">
            A <see cref="T:System.Func`2"/> that is used to map values of <typeparamref name="T1"/>
            to <see langword="abstract"/> value of <typeparamref name="T2"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="adaptationFunction"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.AdaptiveEqualityComparer`2.Equals(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:Axle.AdaptiveEqualityComparer`2.GetHashCode(`0)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Attempt`1">
            <summary>
            Represents an attempt delegate, that is, a delegate representing an action that may or may not succeed.
            Therefore, the action's result is passed as an output parameter instead of a return value.
            The delegate returns a <see cref="T:System.Boolean"/> value that indicates whether the action succeeded or not.
            </summary>
            <typeparam name="TResult">
            The type of the result object produced by the action represented by the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <param name="result">
            An output parameter to contain the result of the attempt if it was successful.
            </param>
            <returns>
            <c>true</c> if the action represented by the attempt succeeded; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Attempt`2">
            <summary>
            Represents an attempt delegate, that is, a delegate representing an action that may or may not succeed.
            Therefore, the action's result is passed as an output parameter instead of a return value.
            The delegate returns a <see cref="T:System.Boolean"/> value that indicates whether the action succeeded or not.
            </summary>
            <typeparam name="T">
            The type of the argument passed to the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The type of the result object produced by the action represented by the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <param name="arg">
            The argument to the action represented bu the current <see cref="T:Axle.Attempt`1"/> delegate.
            </param>
            <param name="result">
            An output parameter to contain the result of the attempt if it was successful.
            </param>
            <returns>
            <c>true</c> if the action represented by the attempt succeeded; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Attempt`3">
            <summary>
            Represents an attempt delegate, that is, a delegate representing an action that may or may not succeed.
            Therefore, the action's result is passed as an output parameter instead of a return value.
            The delegate returns a <see cref="T:System.Boolean"/> value that indicates whether the action succeeded or not.
            </summary>
            <typeparam name="T1">
            The type of the first argument passed to the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second argument passed to the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The type of the result object produced by the action represented by the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <param name="arg1">
            The first argument to the action represented bu the current <see cref="T:Axle.Attempt`1"/> delegate.
            </param>
            <param name="arg2">
            The second argument to the action represented bu the current <see cref="T:Axle.Attempt`1"/> delegate.
            </param>
            <param name="result">
            An output parameter to contain the result of the attempt if it was successful.
            </param>
            <returns>
            <c>true</c> if the action represented by the attempt succeeded; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Attempt`4">
            <summary>
            Represents an attempt delegate, that is, a delegate representing an action that may or may not succeed.
            Therefore, the action's result is passed as an output parameter instead of a return value.
            The delegate returns a <see cref="T:System.Boolean"/> value that indicates whether the action succeeded or not.
            </summary>
            <typeparam name="T1">
            The type of the first argument passed to the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second argument passed to the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third argument passed to the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The type of the result object produced by the action represented by the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <param name="arg1">
            The first argument to the action represented bu the current <see cref="T:Axle.Attempt`1"/> delegate.
            </param>
            <param name="arg2">
            The second argument to the action represented bu the current <see cref="T:Axle.Attempt`1"/> delegate.
            </param>
            <param name="arg3">
            The third argument to the action represented bu the current <see cref="T:Axle.Attempt`1"/> delegate.
            </param>
            <param name="result">
            An output parameter to contain the result of the attempt if it was successful.
            </param>
            <returns>
            <c>true</c> if the action represented by the attempt succeeded; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Attempt`5">
            <summary>
            Represents an attempt delegate, that is, a delegate representing an action that may or may not succeed.
            Therefore, the action's result is passed as an output parameter instead of a return value.
            The delegate returns a <see cref="T:System.Boolean"/> value that indicates whether the action succeeded or not.
            </summary>
            <typeparam name="T1">
            The type of the first argument passed to the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second argument passed to the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third argument passed to the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth argument passed to the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The type of the result object produced by the action represented by the current <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <param name="arg1">
            The first argument to the action represented bu the current <see cref="T:Axle.Attempt`1"/> delegate.
            </param>
            <param name="arg2">
            The second argument to the action represented bu the current <see cref="T:Axle.Attempt`1"/> delegate.
            </param>
            <param name="arg3">
            The third argument to the action represented bu the current <see cref="T:Axle.Attempt`1"/> delegate.
            </param>
            <param name="arg4">
            The fourth argument to the action represented bu the current <see cref="T:Axle.Attempt`1"/> delegate.
            </param>
            <param name="result">
            An output parameter to contain the result of the attempt if it was successful.
            </param>
            <returns>
            <c>true</c> if the action represented by the attempt succeeded; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.AttemptExtensions">
            <summary>
            A <see langword="static"/> class containing extension methods for 
            working with attempt delegates.
            </summary>
        </member>
        <member name="M:Axle.AttemptExtensions.Any``1(System.Collections.Generic.IEnumerable{Axle.Attempt{``0}},``0@)">
            <summary>
            Executes the collection of <see cref="T:Axle.Attempt`1"/> in the provided by 
            collection order until any of the delegates returns <c><see langword="true"/></c>.
            </summary>
            <typeparam name="TResult">
            The type of the result of the <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <param name="attempts">
            The collection of <see cref="T:Axle.Attempt`1"/> to invoke.
            </param>
            <param name="result">
            An output parameter containing the result of the first delegate to return <c>true</c>.
            </param>
            <returns>
            <c><see langword="true"/></c> if any of the provided by the <paramref name="attempts"/> 
            delegate succeeds (returns <c><see langword="true"/></c> itself); 
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.AttemptExtensions.Any``2(System.Collections.Generic.IEnumerable{Axle.Attempt{``0,``1}},``0,``1@)">
            <summary>
            Executes the collection of <see cref="T:Axle.Attempt`2"/> in the provided by 
            the collection order until any of the delegates returns <c><see langword="true"/></c>.
            </summary>
            <typeparam name="T">
            The type of the argument to the <see cref="T:Axle.Attempt`2"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The type of the result of the <see cref="T:Axle.Attempt`2"/> delegate.
            </typeparam>
            <param name="attempts">
            The collection of <see cref="T:Axle.Attempt`2"/> to invoke.
            </param>
            <param name="arg">
            The argument to the <see cref="T:Axle.Attempt`2"/> delegate.
            </param>
            <param name="result">
            An output parameter containing the result of the first delegate to return <c>true</c>.
            </param>
            <returns>
            <c><see langword="true"/></c> if any of the provided by the 
            <paramref name="attempts"/> delegate succeeds (returns <c>true</c> itself); 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.AttemptExtensions.Any``3(System.Collections.Generic.IEnumerable{Axle.Attempt{``0,``1,``2}},``0,``1,``2@)">
            <summary>
            Executes the collection of <see cref="T:Axle.Attempt`3"/> in the provided 
            by the collection order until any of the delegates returns <c><see langword="true"/></c>.
            </summary>
            <typeparam name="T1">
            The type of the first argument to the <see cref="T:Axle.Attempt`3"/> 
            delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second argument to the <see cref="T:Axle.Attempt`3"/> 
            delegate.
            </typeparam>
            <typeparam name="TResult">
            The type of the result of the <see cref="T:Axle.Attempt`3"/> 
            delegate.
            </typeparam>
            <param name="attempts">
            The collection of <see cref="T:Axle.Attempt`3"/> to invoke.
            </param>
            <param name="arg1">
            The first argument to the <see cref="T:Axle.Attempt`3"/> delegate.
            </param>
            <param name="arg2">
            The second argument to the <see cref="T:Axle.Attempt`3"/> delegate.
            </param>
            <param name="result">
            An output parameter containing the result of the first delegate to return 
            <c><see langword="true"/></c>.
            </param>
            <returns>
            <c><see langword="true"/></c> if any of the provided by the <paramref name="attempts"/> 
            delegates succeeds (returns <c><see langword="true"/></c> itself); 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.AttemptExtensions.Any``4(System.Collections.Generic.IEnumerable{Axle.Attempt{``0,``1,``2,``3}},``0,``1,``2,``3@)">
            <summary>
            Executes the collection of <see cref="T:Axle.Attempt`4"/> in the provided by 
            the collection order until any of the delegates returns <c><see langword="true"/></c>.
            </summary>
            <typeparam name="T1">
            The type of the first argument to the <see cref="T:Axle.Attempt`4"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second argument to the <see cref="T:Axle.Attempt`4"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third argument to the <see cref="T:Axle.Attempt`4"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The type of the result of the <see cref="T:Axle.Attempt`4"/> delegate.
            </typeparam>
            <param name="attempts">
            The collection of <see cref="T:Axle.Attempt`4"/> to invoke.
            </param>
            <param name="arg1">
            The first argument to the <see cref="T:Axle.Attempt`4"/> delegate.
            </param>
            <param name="arg2">
            The second argument to the <see cref="T:Axle.Attempt`4"/> delegate.
            </param>
            <param name="arg3">
            The third argument to the <see cref="T:Axle.Attempt`4"/> delegate.
            </param>
            <param name="result">
            An output parameter containing the result of the first delegate to return 
            <c><see langword="true"/></c>.
            </param>
            <returns>
            <c><see langword="true"/></c> if any of the provided by the <paramref name="attempts"/> 
            delegate succeeds (returns <c><see langword="true"/></c> itself); 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.AttemptExtensions.Any``5(System.Collections.Generic.IEnumerable{Axle.Attempt{``0,``1,``2,``3,``4}},``0,``1,``2,``3,``4@)">
            <summary>
            Executes the collection of <see cref="T:Axle.Attempt`5"/> in the provided 
            by the collection order until any of the delegates returns <c><see langword="true"/></c>.
            </summary>
            <typeparam name="T1">
            The type of the first argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The type of the result of the <see cref="T:Axle.Attempt`5"/> delegate.
            </typeparam>
            <param name="attempts">
            The collection of <see cref="T:Axle.Attempt`5"/> to invoke.
            </param>
            <param name="arg1">
            The first argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </param>
            <param name="arg2">
            The second argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </param>
            <param name="arg3">
            The third argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </param>
            <param name="arg4">
            The fourth argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </param>
            <param name="result">
            An output parameter containing the result of the first delegate to return <c>true</c>.
            </param>
            <returns>
            <c><see langword="true"/></c> if any of the provided by the <paramref name="attempts"/> 
            delegate succeeds (returns <c><see langword="true"/></c> itself);
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.AttemptExtensions.InvokeOrDefault``1(Axle.Attempt{``0},``0)">
            <summary>
            Invokes the current <see cref="T:Axle.Attempt`1"/> and returns either the delegate's result,
            or the provided by the <paramref name="defaultValue"/> parameter value.
            </summary>
            <typeparam name="TResult">
            The type of the result of the <see cref="T:Axle.Attempt`1"/> delegate.
            </typeparam>
            <param name="attempt">
            The delegate to invoke.
            </param>
            <param name="defaultValue">
            A default value to use as a fallback in case the provided delegate does not produce a value of its own.
            </param>
            <returns>
            Either the delegate's result, or the provided by the <paramref name="defaultValue"/> 
            parameter value.
            </returns>
        </member>
        <member name="M:Axle.AttemptExtensions.InvokeOrDefault``2(Axle.Attempt{``0,``1},``0,``1)">
            <summary>
            Invokes the current <see cref="T:Axle.Attempt`2"/> and returns either the delegate's 
            result, or the provided by the <paramref name="defaultValue"/> parameter value.
            </summary>
            <typeparam name="T">
            The type of the first argument to the <see cref="T:Axle.Attempt`2"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The type of the result of the <see cref="T:Axle.Attempt`2"/> delegate.
            </typeparam>
            <param name="attempt">
            The delegate to invoke.
            </param>
            <param name="arg">
            The argument to the <see cref="T:Axle.Attempt`2"/> delegate.
            </param>
            <param name="defaultValue">
            A default value to use as a fallback in case the provided delegate does not produce a value of its own.
            </param>
            <returns>
            Either the delegate's result, or the provided by the <paramref name="defaultValue"/> parameter value.
            </returns>
        </member>
        <member name="M:Axle.AttemptExtensions.InvokeOrDefault``3(Axle.Attempt{``0,``1,``2},``0,``1,``2)">
            <summary>
            Invokes the current <see cref="T:Axle.Attempt`3"/> and returns either the delegate's result,
            or the provided by the <paramref name="defaultValue"/> parameter value.
            </summary>
            <typeparam name="T1">
            The type of the first argument to the <see cref="T:Axle.Attempt`3"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second argument to the <see cref="T:Axle.Attempt`3"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The type of the result of the <see cref="T:Axle.Attempt`3"/> delegate.
            </typeparam>
            <param name="attempt">
            The delegate to invoke.
            </param>
            <param name="arg1">
            The first argument to the <see cref="T:Axle.Attempt`3"/> delegate.
            </param>
            <param name="arg2">
            The second argument to the <see cref="T:Axle.Attempt`3"/> delegate.
            </param>
            <param name="defaultValue">
            A default value to use as a fallback in case the provided delegate does not produce a value of its own.
            </param>
            <returns>
            Either the delegate's result, or the provided by the <paramref name="defaultValue"/> parameter value.
            </returns>
        </member>
        <member name="M:Axle.AttemptExtensions.InvokeOrDefault``4(Axle.Attempt{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Invokes the current <see cref="T:Axle.Attempt`4"/> and returns either the delegate's result,
            or the provided by the <paramref name="defaultValue"/> parameter value.
            </summary>
            <typeparam name="T1">
            The type of the first argument to the <see cref="T:Axle.Attempt`4"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second argument to the <see cref="T:Axle.Attempt`4"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third argument to the <see cref="T:Axle.Attempt`4"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The type of the result of the <see cref="T:Axle.Attempt`4"/> delegate.
            </typeparam>
            <param name="attempt">
            The delegate to invoke.
            </param>
            <param name="arg1">
            The first argument to the <see cref="T:Axle.Attempt`4"/> delegate.
            </param>
            <param name="arg2">
            The second argument to the <see cref="T:Axle.Attempt`4"/> delegate.
            </param>
            <param name="arg3">
            The third argument to the <see cref="T:Axle.Attempt`4"/> delegate.
            </param>
            <param name="defaultValue">
            A default value to use as a fallback in case the provided delegate does not produce a value of its own.
            </param>
            <returns>
            Either the delegate's result, or the provided by the <paramref name="defaultValue"/> parameter value.
            </returns>
        </member>
        <member name="M:Axle.AttemptExtensions.InvokeOrDefault``5(Axle.Attempt{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Invokes the current <see cref="T:Axle.Attempt`5"/> and returns either the delegate's result,
            or the provided by the <paramref name="defaultValue"/> parameter value.
            </summary>
            <typeparam name="T1">
            The type of the first argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The type of the result of the <see cref="T:Axle.Attempt`5"/> delegate.
            </typeparam>
            <param name="attempt">
            The delegate to invoke.
            </param>
            <param name="arg1">
            The first argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </param>
            <param name="arg2">
            The second argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </param>
            <param name="arg3">
            The third argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </param>
            <param name="arg4">
            The fourth argument to the <see cref="T:Axle.Attempt`5"/> delegate.
            </param>
            <param name="defaultValue">
            A default value to use as a fallback in case the provided delegate does not produce a value of its own.
            </param>
            <returns>
            Either the delegate's result, or the provided by the <paramref name="defaultValue"/> parameter value.
            </returns>
        </member>
        <member name="T:Axle.Collections.ChronologicalDictionary`2">
            <summary>
            Represents a collection of key/value pairs that are sorted by the time of insertion (chronologically)
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary. </typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <remarks>This class cannot be inherited.</remarks>
        </member>
        <member name="M:Axle.Collections.ChronologicalDictionary`2.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Collections.ChronologicalDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Axle.Collections.ChronologicalDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Collections.ChronologicalDictionary`2"/> class using the provided
            <paramref name="comparer"/>.
            </summary>
            <param name="comparer">
            An instance of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to be used for key comparison.
            </param>
        </member>
        <member name="M:Axle.Collections.ChronologicalDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Collections.ChronologicalDictionary`2"/> class
            with the specified <paramref name="capacity"/> and using the provided <paramref name="comparer"/>.
            </summary>
            <param name="capacity">
            The initial capacity of the underlying collection.
            </param>
            <param name="comparer">
            An instance of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to be used for key comparison.
            </param>
        </member>
        <member name="M:Axle.Collections.ChronologicalDictionary`2.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Collections.ChronologicalDictionary`2"/> class
            with the specified <paramref name="capacity"/>.
            </summary>
            <param name="capacity">
            The initial capacity of the underlying collection.
            </param>
        </member>
        <member name="P:Axle.Collections.ChronologicalDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the provided <paramref name="key"/>.
            </summary>
            <remarks>
            When overwriting a value with an existing key, the data sorting will disregard the old value's ordering
            and will treat this as a more-recent modification, meaning the key and its new data will appear at a
            later position when enumerated.
            </remarks>
            <param name="key">
            The key to associate a value with.
            </param>
        </member>
        <member name="T:Axle.Collections.Extensions.Array.ArrayExtensions">
            <summary>
            A static class to contain common extension methods for working with arrays.
            </summary>
        </member>
        <member name="M:Axle.Collections.Extensions.Array.ArrayExtensions.MakeGeneric(System.Object[],System.Type)">
            <summary>
            Creates an array of specific type out of an object array.
            </summary>
            <param name="array">
            The source array to be converted.
            </param>
            <param name="type">
            The destination type of the resulting array.
            </param>
            <returns>
            A new array of the provided <paramref name="type"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            There is an element inside the <paramref name="array"/> which cannot be cast to the destination <paramref name="type"/>.
            </exception>
        </member>
        <member name="T:Axle.Collections.Extensions.HashSet.Fluent.HashSetExtensions">
            <summary>
            A static class to contain extension methods that allow manipulating <see cref="T:System.Collections.Generic.HashSet`1"/> collection
            instances using the fluent interface pattern.
            </summary>
        </member>
        <member name="M:Axle.Collections.Extensions.HashSet.Fluent.HashSetExtensions.FluentIntersectWith``2(``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Modifies the current <typeparamref name="TSet"/> object to contain only elements that are present
            in that object and in the specified collection.
            </summary>
            <typeparam name="TSet">The <see cref="T:System.Collections.Generic.HashSet`1"/> type or any class that inherits from it.</typeparam>
            <typeparam name="T">The type of the elements in the set.</typeparam>
            <param name="set">
            The <typeparamref name="TSet"/> object to modify.
            </param>
            <param name="other">
            The collection to compare to the current <typeparamref name="TSet"/> object.
            </param>
            <returns>
            A reference to the current <typeparamref name="TSet"/> object.
            </returns>
            <seealso cref="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:Axle.Collections.Extensions.HashSet.Fluent.HashSetExtensions.FluentExceptWith``2(``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Removes all elements in the specified collection from the current <typeparamref name="TSet"/> object.
            </summary>
            <typeparam name="TSet">The <see cref="T:System.Collections.Generic.HashSet`1"/> type or any class that inherits from it.</typeparam>
            <typeparam name="T">The type of the elements in the set.</typeparam>
            <param name="set">
            The <typeparamref name="TSet"/> object to modify.
            </param>
            <param name="other">
            The collection of items to remove from the current <typeparamref name="TSet"/> object.
            </param>
            <returns>
            A reference to the current <typeparamref name="TSet"/> object.
            </returns>
            <seealso cref="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:Axle.Collections.Extensions.HashSet.Fluent.HashSetExtensions.FluentSymmetricExceptWith``2(``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Modifies the current <typeparamref name="TSet"/> object to contain only elements that are
            present either in that object or in the specified collection, but not both.
            </summary>
            <typeparam name="TSet">The <see cref="T:System.Collections.Generic.HashSet`1"/> type or any class that inherits from it.</typeparam>
            <typeparam name="T">The type of the elements in the set.</typeparam>
            <param name="set">
            The <typeparamref name="TSet"/> object to modify.
            </param>
            <param name="other">
            The collection to compare to the current <typeparamref name="TSet"/> object.
            </param>
            <returns>
            A reference to the current <typeparamref name="TSet"/> object.
            </returns>
            <seealso cref="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:Axle.Collections.Extensions.HashSet.Fluent.HashSetExtensions.FluentUnionWith``2(``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Modifies the current <typeparamref name="TSet"/> object to contain all elements
            that are present in itself, the specified collection, or both.
            </summary>
            <typeparam name="TSet">The <see cref="T:System.Collections.Generic.HashSet`1"/> type or any class that inherits from it.</typeparam>
            <typeparam name="T">The type of the elements in the set.</typeparam>
            <param name="set">
            The <typeparamref name="TSet"/> object to modify.
            </param>
            <param name="other">
            The collection to compare to the current <typeparamref name="TSet"/> object.
            </param>
            <returns>
            A reference to the current <typeparamref name="TSet"/> object.
            </returns>
            <seealso cref="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="T:Axle.Collections.Extensions.List.Fluent.ListExtensions">
            <summary>
            A static class to contain extension methods that allow manipulating <see cref="T:System.Collections.Generic.List`1"/> collection
            instances using the fluent interface pattern.
            </summary>
        </member>
        <member name="M:Axle.Collections.Extensions.List.Fluent.ListExtensions.FluentAdd``1(``0,System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <typeparam name="TCollection">
            The type of the collection this extension method is called against. Must implement the <see cref="T:System.Collections.IList"/> interface.
            </typeparam>
            <param name="list">The <see cref="T:System.Collections.IList"/> instance this method is invoked against.</param>
            <param name="item">The object to add to the <see cref="T:System.Collections.IList"/>. </param>
            <returns>the <see cref="T:System.Collections.IList"/> instance this method is called against.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is <c>null</c>.</exception>
            <seealso cref="M:System.Collections.IList.Add(System.Object)"/>
        </member>
        <member name="T:Axle.Collections.Extensions.List.ListExtensions">
            <summary>
            A static class to hold extension methods for list collections.
            </summary>
        </member>
        <member name="M:Axle.Collections.Extensions.List.ListExtensions.MakeGeneric(System.Collections.IList,System.Type)">
            <summary>
            Converts a given <see cref="T:System.Collections.IList"/> instance to its generic <see cref="T:System.Collections.Generic.IList`1"/> equivalent.
            </summary>
            <param name="list">
            The <see cref="T:System.Collections.IList"/> instance to be converted.
            </param>
            <param name="type">
            The type to be used as generic type argument for the generic list.
            </param>
            <returns>
            A new <see cref="T:System.Collections.IList"/> instance that represents a generic <see cref="T:System.Collections.Generic.IList`1"/> with the generic type being the one
            provided by the <paramref name="type"/> parameter.
            </returns>
        </member>
        <member name="T:Axle.Collections.Generic.Extensions.Comparer.ComparerExtensions">
            <summary>
            A static class to contain extension methods for the <see cref="T:System.Collections.Generic.IComparer`1"/> type.
            </summary>
        </member>
        <member name="M:Axle.Collections.Generic.Extensions.Comparer.ComparerExtensions.Adapt``2(System.Collections.Generic.IComparer{``0},System.Func{``1,``0})">
            <summary>
            Adapts an instance of <see cref="T:System.Collections.Generic.IComparer`1"/> to be used as an <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <typeparam name="T1">The type of objects the initial comparer is capable of handling. </typeparam>
            <typeparam name="T2">The type of objects the adapted comparer is capable of handling. </typeparam>
            <param name="comparer">The initial comparer to be adapted.</param>
            <param name="adaptFunc">
            A function to convert values of type <typeparamref name="T2"/> to type <typeparamref name="T1"/>,
            in order for the <paramref name="comparer"/> to handle.
            </param>
            <returns>
            An instance of <see cref="T:Axle.AdaptiveComparer`2"/>.
            </returns>
        </member>
        <member name="T:Axle.Collections.Generic.Extensions.EqualityComparer.EqualityComparerExtensions">
            <summary>
            A static class to contain extension methods for the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> type.
            </summary>
        </member>
        <member name="M:Axle.Collections.Generic.Extensions.EqualityComparer.EqualityComparerExtensions.Adapt``2(System.Collections.Generic.IEqualityComparer{``0},System.Func{``1,``0})">
            <summary>
            Adapts an instance of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to be used as an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="T1">The type of objects the initial comparer is capable of handling. </typeparam>
            <typeparam name="T2">The type of objects the adapted comparer is capable of handling. </typeparam>
            <param name="comparer">The initial comparer to be adapted.</param>
            <param name="adaptFunc">
            A function to convert values of type <typeparamref name="T2"/> to type <typeparamref name="T1"/>,
            in order for the <paramref name="comparer"/> to handle.
            </param>
            <returns>
            An instance of <see cref="T:Axle.AdaptiveEqualityComparer`2"/>.
            </returns>
        </member>
        <member name="T:Axle.Collections.Generic.GenericEnumerable`1">
            <summary>
            A generic adapter for the non-generic <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <typeparam name="T">
            The type of objects to enumerate.
            </typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            <seealso cref="T:System.Collections.IEnumerable"/>
        </member>
        <member name="M:Axle.Collections.Generic.GenericEnumerable`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Collections.Generic.GenericEnumerable`1"/> class.
            </summary>
            <param name="collection">The underlying collection to be exposed as generic.</param>
        </member>
        <member name="M:Axle.Collections.Generic.GenericEnumerable`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Axle.Collections.Generic.GenericEnumerator">
            <summary>
            A generic decorator for the non-generic <see cref="T:System.Collections.IEnumerator"/> interface.
            This type is equivalent to the <see cref="T:Axle.Collections.Generic.GenericEnumerator`1"/> where <c>T</c> is <see cref="T:System.Object"/>.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1"/>
            <seealso cref="T:System.Collections.IEnumerator"/>
            <seealso cref="T:Axle.Collections.Generic.GenericEnumerator`1"/>
            <seealso cref="T:Axle.Collections.Generic.GenericEnumerator`2"/>
        </member>
        <member name="M:Axle.Collections.Generic.GenericEnumerator.#ctor(System.Collections.IEnumerator)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Collections.Generic.GenericEnumerator`1">
            <summary>
            A generic decorator for the non-generic <see cref="T:System.Collections.IEnumerator"/> interface.
            </summary>
            <typeparam name="T">
            The type of the elements to enumerate.
            </typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1"/>
            <seealso cref="T:System.Collections.IEnumerator"/>
            <seealso cref="T:Axle.Collections.Generic.GenericEnumerator`2"/>
            <seealso cref="T:Axle.Collections.Generic.GenericEnumerator"/>
        </member>
        <member name="M:Axle.Collections.Generic.GenericEnumerator`1.#ctor(System.Collections.IEnumerator)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Collections.Generic.GenericEnumerator`1"/> class.
            </summary>
            <param name="enumerator">
            The underlying <see cref="T:System.Collections.IEnumerator"/> to be represented as a generic <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </param>
        </member>
        <member name="M:Axle.Collections.Generic.GenericEnumerator`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericEnumerator`1.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericEnumerator`1.Reset">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Generic.GenericEnumerator`1.Current">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Generic.GenericEnumerator`1.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="T:Axle.Collections.Generic.GenericEnumerator`2">
            <summary>
            A decorator around an <see cref="T:System.Collections.Generic.IEnumerator`1"/> instance that
            can be used to expose it as a <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </summary>
            <typeparam name="T1">
            The type of elements in the underlying enumerator.
            </typeparam>
            <typeparam name="T2">
            The type of elements for the exposed enumerator.
            </typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1"/>
            <seealso cref="T:System.Collections.IEnumerator"/>
            <seealso cref="T:Axle.Collections.Generic.GenericEnumerator`1"/>
            <seealso cref="T:Axle.Collections.Generic.GenericEnumerator"/>
        </member>
        <member name="M:Axle.Collections.Generic.GenericEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`0},System.Func{`0,`1})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Collections.Generic.GenericEnumerator`2"/> class.
            </summary>
            <param name="enumerator">
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/> instance to be represented as a <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            </param>
            <param name="converter">
            A <see cref="T:System.Func`2"/> that is used to convert elements of type <typeparamref name="T1"/> to type <typeparamref name="T2"/>
            </param>
        </member>
        <member name="M:Axle.Collections.Generic.GenericEnumerator`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericEnumerator`2.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericEnumerator`2.Reset">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Generic.GenericEnumerator`2.Current">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Generic.GenericEnumerator`2.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="T:Axle.Collections.Generic.GenericList`1">
            <summary>
            A generic adapter for the non-generic <see cref="T:System.Collections.IList"/> collection.
            </summary>
            <typeparam name="T">
            The type of the elements in the list.
            </typeparam>
            <seealso cref="T:System.Collections.Generic.IList`1"/>
            <seealso cref="T:System.Collections.IList"/>
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.#ctor(System.Collections.IList,System.Func{System.Object,`0})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Collections.Generic.GenericList`1"/> class.
            </summary>
            <param name="collection">The underlying collection to be exposed as generic.</param>
            <param name="converter">
            A conversion function that is used to turn the raw object elements of the underlying collection to the
            the generic type <typeparamref name="T"/>.
            </param>
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.#ctor(System.Collections.IList)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Collections.Generic.GenericList`1"/> class.
            </summary>
            <param name="collection">The underlying collection to be exposed as generic.</param>
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.Clear">
            <inheritdoc cref="T:System.Collections.Generic.IList`1" />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.RemoveAt(System.Int32)">
            <inheritdoc cref="T:System.Collections.Generic.IList`1"/>
        </member>
        <member name="P:Axle.Collections.Generic.GenericList`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Generic.GenericList`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Axle.Collections.Generic.GenericList`1"/> has a fixed size.
            </summary>
            <returns>
            <c>true</c> if the <see cref="T:Axle.Collections.Generic.GenericList`1"/> has a fixed size; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Axle.Collections.Generic.GenericList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Generic.GenericList`1.System#Collections#ICollection#Count">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Generic.GenericList`1.System#Collections#ICollection#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Generic.GenericList`1.System#Collections#ICollection#SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Generic.GenericList`1.System#Collections#Generic#ICollection{T}#Count">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Generic.GenericList`1.System#Collections#IList#RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Generic.GenericList`1.System#Collections#IList#IsFixedSize">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Generic.GenericList`1.System#Collections#IList#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Generic.GenericList`1.System#Collections#IList#Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Collections.Sdk.DictionaryDecorator`2">
            <summary>
            An abstract base class that can be used as a wrapper over an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.
            Can be used as a base class for dictionary-based key/value collections. The initial implementation delegates all
            <see cref="T:System.Collections.Generic.IDictionary`2"/> logic to the provided inner dictionary class.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary. </typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="F:Axle.Collections.Sdk.DictionaryDecorator`2.Target">
            <summary>
            A reference to the decorated <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Axle.Collections.Sdk.DictionaryDecorator`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Collections.Sdk.DictionaryDecorator`2"/>
            class.
            </summary>
            <param name="target">
            The decorated <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.
            </param>
        </member>
        <member name="M:Axle.Collections.Sdk.DictionaryDecorator`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Axle.Collections.Sdk.DictionaryDecorator`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">
            The item to add to the collection.
            </param>
        </member>
        <member name="M:Axle.Collections.Sdk.DictionaryDecorator`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Axle.Collections.Sdk.DictionaryDecorator`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the collection contains a specific value. 
            </summary>
            <param name="item">
            The value to check if it is contained within the collection.
            </param>
            <returns>
            <c>true</c> if the provided <paramref name="item"/> was present in the collection;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Collections.Sdk.DictionaryDecorator`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to the provided <paramref name="array"/>, starting from the specified
            <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">
            The array to contain the copied elements.
            </param>
            <param name="arrayIndex">
            The start index of the array to store copying values.
            </param>
        </member>
        <member name="M:Axle.Collections.Sdk.DictionaryDecorator`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurence of the specified <paramref name="item"/> of the collection.
            </summary>
            <param name="item">
            The elemet to remove from the collection.
            </param>
            <returns>
            <c>true</c> if an item was removed from the collection; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Axle.Collections.Sdk.DictionaryDecorator`2.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Axle.Collections.Sdk.DictionaryDecorator`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:Axle.Collections.Sdk.DictionaryDecorator`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Sdk.DictionaryDecorator`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Sdk.DictionaryDecorator`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Collections.Sdk.DictionaryDecorator`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Sdk.DictionaryDecorator`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Sdk.DictionaryDecorator`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:Axle.Collections.Sdk.DictionaryDecorator`2.Values">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.AbstractConverter`2">
            <summary>
            An abstract class to serve as a base for converter implementations
            </summary>
            <typeparam name="TS">
            The type of the source value - the one that is to be converted to an instance of <typeparamref name="TD"/>.
            </typeparam>
            <typeparam name="TD">
            The destination type of the conversion.
            </typeparam>
        </member>
        <member name="M:Axle.Conversion.AbstractConverter`2.DoConvert(`0)">
            <summary>
            An abstract method to contain the actual conversion of an instance of <typeparamref name="TS">the source type</typeparamref>
            to an instance of <typeparamref name="TD">the destination type</typeparamref>.
            </summary>
            <param name="source">The source value to be converted.</param>
            <returns>
            An instance of <typeparamref name="TD">the destination type</typeparamref> which is the result of converting the <paramref name="source"/> object.
            </returns>
            <seealso cref="M:Axle.Conversion.AbstractConverter`2.Convert(`0)"/>
        </member>
        <member name="M:Axle.Conversion.AbstractConverter`2.Convert(`0)">
            <summary>
            Converts a given <paramref name="value"/> of type <typeparamref name="TS"/> to
            a value of type <typeparamref name="TD"/>.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            A value of type <typeparamref name="TD"/> that is the result of converting the given <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Axle.Conversion.AbstractConverter`2.TryConvert(`0,`1@)">
            <summary>
            Attempts to convert a given <paramref name="value"/> of type <typeparamref name="TS"/> to
            a value of type <typeparamref name="TD"/>.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <param name="result">
            A value of type <typeparamref name="TD"/> that is the result of converting the given <paramref name="value"/>.
            </param>
            <returns>
            <c>true</c> if the conversion was successful, and a value was written to the <paramref name="result"/> output parameter;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Conversion.AbstractTwoWayConverter`2.DoConvertBack(`1)">
            <summary>
            An abstract method to contain the actual conversion of an instance of <typeparamref name="TD">the destination type</typeparamref> 
            back to an instance of <typeparamref name="TS">the source type</typeparamref>.
            </summary>
            <param name="source">The destination type's value to be converted.</param>
            <returns>
            An instance of <typeparamref name="TS">the source type</typeparamref> which is the result of converting the <paramref name="source"/> object.
            </returns>
            <seealso cref="M:Axle.Conversion.AbstractConverter`2.Convert(`0)"/>
        </member>
        <member name="M:Axle.Conversion.AbstractTwoWayConverter`2.ConvertBack(`1)">
            <summary>
            Converts of an instance of <typeparamref name="TD">the destination type</typeparamref>
            to an instance of <typeparamref name="TS">the source type</typeparamref>.
            This method does the opposite conversion of the <see cref="M:Axle.Conversion.AbstractConverter`2.Convert(`0)"/> method.
            </summary>
            <param name="value">The source value to be converted.</param>
            <returns>
            An instance of <typeparamref name="TD">the destination type</typeparamref> which is the result
            of converting the <paramref name="value"/> object.
            </returns>
            <seealso cref="M:Axle.Conversion.AbstractConverter`2.Convert(`0)"/>
        </member>
        <member name="M:Axle.Conversion.AbstractTwoWayConverter`2.TryConvertBack(`1,`0@)">
            <summary>
            Attempts to convert of an instance of <typeparamref name="TD">the destination type</typeparamref>
            to an instance of <typeparamref name="TS">the source type</typeparamref>.
            This method does the opposite conversion of the <see cref="M:Axle.Conversion.AbstractConverter`2.TryConvert(`0,`1@)"/> method.
            </summary>
            <param name="value">
            The source value to be converted.
            </param>
            <param name="result">
            A value of type <typeparamref name="TS"/> that is the result of converting the given <paramref name="value"/>.
            </param>
            <returns>
            <c>true</c> if the conversion was successful, and a value was written to the <paramref name="result"/> output parameter;
            <c>false</c> otherwise.
            </returns>
            <seealso cref="M:Axle.Conversion.AbstractConverter`2.TryConvert(`0,`1@)"/>
        </member>
        <member name="T:Axle.Conversion.BytesToStringConverter">
            <summary>
            A converter class that can turn a byte sequence to a <see cref="T:System.String">string</see> representation, using a specified 
            <see cref="T:System.Text.Encoding"/>
            </summary>
        </member>
        <member name="M:Axle.Conversion.BytesToStringConverter.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new <see cref="T:Axle.Conversion.BytesToStringConverter" /> instance using the specified <paramref name="encoding" /> parameter.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding">encoding</see> that is used for the conversion.</param>
        </member>
        <member name="M:Axle.Conversion.BytesToStringConverter.#ctor">
            <summary>
            Creates a new <see cref="T:Axle.Conversion.BytesToStringConverter" /> instance using the <see cref="P:System.Text.Encoding.Default">default encoding</see>
            </summary>
        </member>
        <member name="M:Axle.Conversion.BytesToStringConverter.DoConvert(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.BytesToStringConverter.DoConvertBack(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Axle.Conversion.BytesToStringConverter.Encoding">
            <summary>
            Gets the <see cref="T:System.Text.Encoding" /> instance used to convert string instances to bytes and vice-versa.
            </summary>
        </member>
        <member name="T:Axle.Conversion.ByteToDecimalConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Byte"/> and <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.ByteToDecimalConverter.DoConvert(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.ByteToDecimalConverter.DoConvertBack(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.ByteToDoubleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Byte"/> and <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.ByteToDoubleConverter.DoConvert(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.ByteToDoubleConverter.DoConvertBack(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.ByteToSingleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Byte"/> and <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.ByteToSingleConverter.DoConvert(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.ByteToSingleConverter.DoConvertBack(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.ChainedConverter`3">
            <summary>
            A special converter implementation that chains together two <see cref="T:Axle.Conversion.IConverter`2"/> instances.
            Useful if the conversion from an instance of a given type <typeparamref name="T" /> must be converted to an intermediate
            type <typeparamref name="TIntermediate"/> with one <see cref="T:Axle.Conversion.IConverter`2">converter</see> before that conversion result
            is converted to the desired type <typeparamref name="TResult"/> with <see cref="T:Axle.Conversion.IConverter`2">another converter</see>.
            <para>
            Multiple chained converters can be used together to cover a more complex conversion with more than one intermediate object.
            </para>
            </summary>
            <typeparam name="T">The type of the source object to be converted. </typeparam>
            <typeparam name="TIntermediate">The type of an intermediate object to convert the source object to. </typeparam>
            <typeparam name="TResult">The resulting type of the conversion, produced by converting the intermediate object. </typeparam>
        </member>
        <member name="M:Axle.Conversion.ChainedConverter`3.DoConvert(`0)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.ChainedConverter">
            <summary>
            A static class providing helper methods related to the <see cref="T:Axle.Conversion.ChainedConverter`3"/> class.
            </summary>
        </member>
        <member name="M:Axle.Conversion.ChainedConverter.Create``3(Axle.Conversion.IConverter{``0,``1},Axle.Conversion.IConverter{``1,``2})">
            <summary>
            Chains a series of converters to allow them to be interfaced as a single <see cref="T:Axle.Conversion.IConverter`2"/> implementation.
            </summary>
            <typeparam name="T">
            The type of the source object to be converted
            </typeparam>
            <typeparam name="T1">
            A type that is the result of an intermediate conversion.
            </typeparam>
            <typeparam name="TResult">
            The type of the final conversion result
            </typeparam>
            <param name="converter1">
            The first converter to put to the conversion chain.
            </param>
            <param name="converter2">
            The last converter to put to the conversion chain.
            </param>
            <returns>
            Series of converters interfaced as a single <see cref="T:Axle.Conversion.IConverter`2"/> implementation
            </returns>
        </member>
        <member name="M:Axle.Conversion.ChainedConverter.Create``4(Axle.Conversion.IConverter{``0,``1},Axle.Conversion.IConverter{``1,``2},Axle.Conversion.IConverter{``2,``3})">
            <summary>
            Chains a series of converters to allow them to be interfaced as a single <see cref="T:Axle.Conversion.IConverter`2"/> implementation.
            </summary>
            <typeparam name="T">
            The type of the source object to be converted
            </typeparam>
            <typeparam name="T1">
            A type that is the result of an intermediate conversion.
            </typeparam>
            <typeparam name="T2">
            A type that is the result of an intermediate conversion.
            </typeparam>
            <typeparam name="TResult">
            The type of the final conversion result
            </typeparam>
            <param name="converter1">
            The first converter to put to the conversion chain.
            </param>
            <param name="converter2">
            The second converter to put to the conversion chain.
            </param>
            <param name="converter3">
            The last converter to put to the conversion chain.
            </param>
            <returns>
            Series of converters interfaced as a single <see cref="T:Axle.Conversion.IConverter`2"/> implementation
            </returns>
        </member>
        <member name="M:Axle.Conversion.ChainedConverter.Create``5(Axle.Conversion.IConverter{``0,``1},Axle.Conversion.IConverter{``1,``2},Axle.Conversion.IConverter{``2,``3},Axle.Conversion.IConverter{``3,``4})">
            <summary>
            Chains a series of converters to allow them to be interfaced as a single <see cref="T:Axle.Conversion.IConverter`2"/> implementation.
            </summary>
            <typeparam name="T">
            The type of the source object to be converted
            </typeparam>
            <typeparam name="T1">
            A type that is the result of an intermediate conversion.
            </typeparam>
            <typeparam name="T2">
            A type that is the result of an intermediate conversion.
            </typeparam>
            <typeparam name="T3">
            A type that is the result of an intermediate conversion.
            </typeparam>
            <typeparam name="TResult">
            The type of the final conversion result
            </typeparam>
            <param name="converter1">
            The first converter to put to the conversion chain.
            </param>
            <param name="converter2">
            The second converter to put to the conversion chain.
            </param>
            <param name="converter3">
            The third converter to put to the conversion chain.
            </param>
            <param name="converter4">
            The last converter to put to the conversion chain.
            </param>
            <returns>
            Series of converters interfaced as a single <see cref="T:Axle.Conversion.IConverter`2"/> implementation
            </returns>
        </member>
        <member name="T:Axle.Conversion.CombinedConverter`2">
            <summary>
            A class representing a combination of two separate <see cref="T:Axle.Conversion.IConverter`2">one-way converter</see> instances.
            </summary>
            <typeparam name="T1">
            The source type to convert into a <typeparamref name="T2"/>  (and back)
            </typeparam>
            <typeparam name="T2">
            The target type to convert a <typeparamref name="T1"/> instance to (and back)
            </typeparam>
        </member>
        <member name="M:Axle.Conversion.CombinedConverter`2.#ctor(Axle.Conversion.IConverter{`0,`1},Axle.Conversion.IConverter{`1,`0})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.CombinedConverter`2"/> class.
            </summary>
            <param name="primaryConverter">
            The <see cref="T:Axle.Conversion.IConverter`2"/> to be used for conversion from <typeparamref name="T1"/> to <typeparamref name="T2"/>
            </param>
            <param name="reverseConverter">
            The <see cref="T:Axle.Conversion.IConverter`2"/> to be used for conversion from <typeparamref name="T2"/> to <typeparamref name="T1"/>
            </param>
        </member>
        <member name="M:Axle.Conversion.CombinedConverter`2.Axle#Conversion#IConverter{T1,T2}#Convert(`0)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.CombinedConverter`2.Axle#Conversion#IConverter{T1,T2}#TryConvert(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.CombinedConverter`2.Axle#Conversion#ITwoWayConverter{T1,T2}#Invert">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.CombinedConverter`2.Axle#Conversion#ITwoWayConverter{T1,T2}#ConvertBack(`1)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.CombinedConverter`2.Axle#Conversion#ITwoWayConverter{T1,T2}#TryConvertBack(`1,`0@)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.ConversionException">
            <summary>
            An exception thrown whenever a conversion form object of one given type fails to convert to an instance of another type.
            </summary>
            <seealso cref="T:Axle.Conversion.IConverter`2"/>
            <seealso cref="T:Axle.Conversion.ITwoWayConverter`2"/>
        </member>
        <member name="M:Axle.Conversion.ConversionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Conversion.ConversionException"/> class.
            </summary>
        </member>
        <member name="M:Axle.Conversion.ConversionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Conversion.ConversionException"/> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
        </member>
        <member name="M:Axle.Conversion.ConversionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Conversion.ConversionException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
            <param name="inner">
            The exception that is the cause of the current exception, or a <c>null</c> reference (<c>Nothing</c> in Visual Basic)
            if no inner exception is specified.
            </param>
        </member>
        <member name="M:Axle.Conversion.ConversionException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Axle.Conversion.ConversionException"/> to represent the failure of converting the given types.
            </summary>
            <param name="sourceType">
            The type of the source object that failed to convert.
            </param>
            <param name="destinationType">
            The destination type of the failed conversion.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Either the <paramref name="sourceType"/> or <paramref name="destinationType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Conversion.ConversionException.#ctor(System.Type,System.Type,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Axle.Conversion.ConversionException"/> to represent the failure of converting the given types,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="sourceType">
            The type of the source object that failed to convert.
            </param>
            <param name="destinationType">
            The destination type of the failed conversion.
            </param>
            <param name="inner">
            The exception that is the cause of the current exception, or a <c>null</c> reference (<c>Nothing</c> in Visual Basic)
            if no inner exception is specified.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Either the <paramref name="sourceType"/> or <paramref name="destinationType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Conversion.ConversionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Conversion.ConversionException"/> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Axle.Conversion.DateTimeToTicksConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.DateTime"/> and <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.DateTimeToTicksConverter.DoConvert(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.DateTimeToTicksConverter.DoConvertBack(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.DoubleToDecimalConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Double"/> and <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.DoubleToDecimalConverter.DoConvert(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.DoubleToDecimalConverter.DoConvertBack(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.IConverter`2">
            <summary>
            An interface for a converter object, that is, a class which is used to convert 
            object instances of one type to instances of another type.
            </summary>
            <typeparam name="TSource">
            The type of the object to be converted. 
            </typeparam>
            <typeparam name="TTarget">
            The type of the conversion result. 
            </typeparam>
        </member>
        <member name="M:Axle.Conversion.IConverter`2.Convert(`0)">
            <summary>
            Convert the specified by the <paramref name="source"/> parameter objects to an instance of <typeparamref name="TTarget"/>.
            </summary>
            <param name="source">
            The source instance to be converted.
            </param>
            <returns>
            An instance of <typeparamref name="TTarget" /> which is produced as result of the conversion of the object passed via the <paramref name="source"/> parameter. 
            </returns>
        </member>
        <member name="M:Axle.Conversion.IConverter`2.TryConvert(`0,`1@)">
            <summary>
            Attempts to covert the specified by the <paramref name="source"/> parameter instance of the <typeparamref name="TSource" /> 
            type to an instance of the <typeparamref name="TTarget"/> type.
            </summary>
            <param name="source">
            The source instance to be converted.
            </param>
            <param name="target">
            An output parameter to contain the conversion result if the conversion succeeds.
            </param>
            <returns>
            <c>true</c> if the conversion was successful; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Conversion.IdentityConverter`1">
            <summary>
            Similar to the identity function in mathematics - which returns the value passed in,
            an identity converter is an implementation of the <see cref="T:Axle.Conversion.IConverter`2"/> interface
            that returns the same object instance which was passed for conversion.
            </summary>
        </member>
        <member name="M:Axle.Conversion.IdentityConverter`1.Convert(`0)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.IdentityConverter`1.ConvertBack(`0)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.IdentityConverter`1.Invert">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.IdentityConverter`1.TryConvert(`0,`0@)">
            <inheritdoc />
            <remarks>
            This method returns the current instance.
            </remarks>
        </member>
        <member name="M:Axle.Conversion.IdentityConverter`1.TryConvertBack(`0,`0@)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Int16ToDecimalConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Int16"/> and <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Int16ToDecimalConverter.DoConvert(System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Int16ToDecimalConverter.DoConvertBack(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Int16ToDoubleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Int16"/> and <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Int16ToDoubleConverter.DoConvert(System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Int16ToDoubleConverter.DoConvertBack(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Int16ToSingleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Int16"/> and <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Int16ToSingleConverter.DoConvert(System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Int16ToSingleConverter.DoConvertBack(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Int32ToDecimalConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Int32"/> and <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Int32ToDecimalConverter.DoConvert(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Int32ToDecimalConverter.DoConvertBack(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Int32ToDoubleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Int32"/> and <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Int32ToDoubleConverter.DoConvert(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Int32ToDoubleConverter.DoConvertBack(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Int32ToSingleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Int32"/> and <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Int32ToSingleConverter.DoConvert(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Int32ToSingleConverter.DoConvertBack(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Int64ToDecimalConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Int64"/> and <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Int64ToDecimalConverter.DoConvert(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Int64ToDecimalConverter.DoConvertBack(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Int64ToDoubleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Int64"/> and <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Int64ToDoubleConverter.DoConvert(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Int64ToDoubleConverter.DoConvertBack(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Int64ToSingleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Int64"/> and <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Int64ToSingleConverter.DoConvert(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Int64ToSingleConverter.DoConvertBack(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.ITwoWayConverter`2">
            <summary>
            An interface for converters that allow converting from one type to another and vice-versa.
            </summary>
            <seealso cref="T:Axle.Conversion.IConverter`2"/>
        </member>
        <member name="M:Axle.Conversion.ITwoWayConverter`2.ConvertBack(`1)">
            <summary>
            Performs the reverse conversion operation of the inherited <see cref="M:Axle.Conversion.IConverter`2.Convert(`0)"/> method.
            </summary>
            <param name="obj">
            The <typeparamref name="TTarget"/> instance to be re-converted back to an instance of <typeparamref name="TSource"/>.
            </param>
            <returns>
            An instance of <typeparamref name="TSource"/> which is the result of reverse-converting the <typeparamref name="TTarget"/> instance
            passed via the <paramref name="obj"/> parameter.
            </returns>
        </member>
        <member name="M:Axle.Conversion.ITwoWayConverter`2.Invert">
            <summary>
            Gets a <see cref="T:Axle.Conversion.IConverter`2"/> instance, which represents the inverted direction
            of the current <see cref="T:Axle.Conversion.ITwoWayConverter`2"/>.
            <para>
            Practically, this instance is an implementation of the <see cref="T:Axle.Conversion.IConverter`2"/> interface.
            This method returns a <see cref="T:Axle.Conversion.IConverter`2"/> object (the type argument parameters swapped),
            by using the <see cref="M:Axle.Conversion.ITwoWayConverter`2.ConvertBack(`1)"/> and <see cref="M:Axle.Conversion.ITwoWayConverter`2.TryConvertBack(`1,`0@)"/> methods as an implementation to the
            <see cref="M:Axle.Conversion.IConverter`2.Convert(`0)"/> and <see cref="M:Axle.Conversion.IConverter`2.TryConvert(`0,`1@)"/>
            methods of the returned converter respectively.
            </para>
            </summary>
            <returns>
            A <see cref="T:Axle.Conversion.IConverter`2"/> instance which represents the inverted direction
            of the current <see cref="T:Axle.Conversion.ITwoWayConverter`2"/>.
            </returns>
        </member>
        <member name="M:Axle.Conversion.ITwoWayConverter`2.TryConvertBack(`1,`0@)">
            <summary>
            Performs the reverse conversion operation of the inherited <see cref="M:Axle.Conversion.IConverter`2.TryConvert(`0,`1@)"/> method.
            </summary>
            <param name="obj">
            The <typeparamref name="TTarget"/> instance to be re-converted back to an instance of <typeparamref name="TSource"/>.
            </param>
            <param name="result">
            An output parameter containing the conversion result, whenever successful.
            </param>
            <returns>
            <c>true</c> if the conversion succeeded; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Conversion.OACurrencyConverter">
            <summary>
            A converter to and from <see cref="T:System.Decimal"/> to an OLE Automation currency format.
            </summary>
            <seealso cref="M:System.Decimal.FromOACurrency(System.Int64)"/>
            <seealso cref="M:System.Decimal.ToOACurrency(System.Decimal)"/>
        </member>
        <member name="M:Axle.Conversion.OACurrencyConverter.DoConvert(System.Decimal)">
            <summary>
            Converts the specified <see cref="T:System.Decimal"/> value to the equivalent OLE Automation Currency value,
            which is contained in a <see cref="T:System.Int64">64-bit signed integer</see>.
            </summary>
            <param name="value">
            The <see cref="T:System.Decimal"/> number to convert
            </param>
            <returns>
            A <see cref="T:System.Int64">64-bit signed integer</see> that contains the OLE Automation equivalent of <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Axle.Conversion.OACurrencyConverter.DoConvertBack(System.Int64)">
            <summary>
            Converts the specified <see cref="T:System.Int64">64-bit signed integer</see>, which contains an OLE Automation Currency value,
            to the equivalent <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">
            An OLE Automation Currency value.
            </param>
            <returns>
            A <see cref="T:System.Decimal"/> that contains the equivalent of <paramref name="value"/>.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.AbstractParser`1">
            <summary>
            An abstract class to aid the implementation of a custom parser.
            Supports optional input validation prior parsing.
            </summary>
            <typeparam name="T">
            The result type of the parsing.
            </typeparam>
        </member>
        <member name="M:Axle.Conversion.Parsing.AbstractParser`1.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> to the specified type <typeparamref name="T"/>.
            </summary>
            <param name="value">
            The string value to be parsed.
            </param>
            <returns>
            An instance of <typeparamref name="T" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the string cannot be recognized
            as a valid provider for and instance of <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Axle.Conversion.Parsing.AbstractParser`1.Parse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.AbstractParser`1.TryParse(System.String,`0@)">
            <summary>
            Converts the specified string representation of a logical value to its <typeparamref name="T"/> equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing the value to convert.
            </param>
            <param name="output">
            When this method returns, contains the <typeparamref name="T"/> value equivalent to 
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <typeparamref name="T"/> if the conversion failed. 
            The conversion fails if the <paramref name="value"/> parameter is null or is not of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            true if value was converted successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Axle.Conversion.Parsing.AbstractParser`1.TryParse(System.String,System.IFormatProvider,`0@)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.AbstractParser`1.DoParse(System.String,System.IFormatProvider)">
            <summary>
            Attempts to create an instance of the specified type,
            but does not perform any validation of the input string.
            <remarks>
            This method is intended to be used after a string validation was performed.
            </remarks> 
            </summary>
            <param name="value">
            The string value to be parsed.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific format recognition. 
            </param>
            <returns>
            An instance of <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Axle.Conversion.Parsing.AbstractParser`1.Validate(System.String,System.IFormatProvider)">
            <summary>
            Performs validation of the input string to ensure
            that safe parsing is possible.
            </summary>
            <param name="value">The value to be validated.</param>
            <param name="formatProvider">A format provider used to assist parsing and/or provide culture-specific format recognition.</param>
            <returns>true if the value can be parsed to the specified type; false otherwise</returns>
        </member>
        <member name="P:Axle.Conversion.Parsing.AbstractParser`1.TargetType">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.AbstractStrictParser`1">
            <summary>
            An abstract class to serve as a base for implementing the <see cref="T:Axle.Conversion.Parsing.IStrictParser`1"/> interface.
            </summary>
            <typeparam name="T">
            The result type of the parsing.
            </typeparam>
        </member>
        <member name="M:Axle.Conversion.Parsing.AbstractStrictParser`1.ParseExact(System.String,System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.AbstractStrictParser`1.TryParseExact(System.String,System.String,System.IFormatProvider,`0@)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.AbstractStrictParser`1.ValidateExact(System.String,System.String,System.IFormatProvider)">
            <summary>
            This method is called within the <see cref="M:Axle.Conversion.Parsing.AbstractStrictParser`1.TryParseExact(System.String,System.String,System.IFormatProvider,`0@)"/> to
            further validate the provided value and format, before the parsing is attempted.
            </summary>
            <param name="value">
            A <see cref="T:System.String"/> containing the value to convert. 
            </param>
            <param name="format">
            A format string specifying the format of the value to parse. 
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific 
            format recognition. 
            </param>
            <returns>
            <c><see langword="true"/></c>, if the validation logic determines that the value is a valid representation 
            of <typeparamref name="T"/>;
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Conversion.Parsing.AbstractStrictParser`1.DoParseExact(System.String,System.String,System.IFormatProvider)">
            <summary>
            Attempts to create an instance of the specified type, but does not perform any validation of the input 
            string.
            <remarks>
            This method is intended to be used after a string validation was performed.
            </remarks> 
            </summary>
            <param name="value">
            The string value to be parsed.
            </param>
            <param name="format">
            A format string specifying the format of the value to parse. 
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific 
            format recognition. 
            </param>
            <returns>
            An instance of <typeparamref name="T" />.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.AssemblyParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of an
            <see cref="T:System.Reflection.Assembly">assembly</see> to a valid <see cref="T:System.Reflection.Assembly"/> instance.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.AssemblyParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.BooleanParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of a
            <see cref="T:System.Boolean">boolean</see> to a valid <see cref="T:System.Boolean"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.BooleanParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.BooleanParser.TryParse(System.String,System.IFormatProvider,System.Boolean@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <see cref="T:System.Boolean"/> equivalent.
            A <see cref="T:System.Boolean">boolean</see> return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific 
            format recognition.
            </param>
            <param name="output">
            When this method returns, <paramref name="output"/> contains the <see cref="T:System.Boolean"/> value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <see cref="T:System.Boolean"/> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c><see langword="null"/></c> or is not 
            of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c><see langword="true"/></c> if value was converted successfully; 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Conversion.Parsing.BooleanParser.TryParse(System.String,System.Boolean@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <see cref="T:System.Boolean"/> equivalent.
            A <see cref="T:System.Boolean">boolean</see> return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="output">
            When this method returns, <paramref name="output"/> contains the <see cref="T:System.Boolean"/> value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <see cref="T:System.Boolean"/> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c><see langword="null"/></c> or is not 
            of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c><see langword="true"/></c> if value was converted successfully; 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.ByteParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of  a
            <see cref="T:System.Byte">byte</see> to a valid <see cref="T:System.Byte"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.ByteParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.ByteParser.TryParse(System.String,System.IFormatProvider,System.Byte@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <see cref="T:System.Byte"/> equivalent.
            A <see cref="T:System.Boolean">boolean</see> return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific
            format recognition.
            </param>
            <param name="output">
            When this method returns, <paramref name="output"/> contains the <see cref="T:System.Byte"/> value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <see cref="T:System.Byte"/> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c><see langword="null"/></c> or is not 
            of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c><see langword="true"/></c> if value was converted successfully; 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.CharacterParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of a
            <see cref="T:System.Char">character</see> to a valid <see cref="T:System.Char"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.CharacterParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.CharacterParser.TryParse(System.String,System.IFormatProvider,System.Char@)">
            <summary>
            Converts the specified string representation of a logical value to its <see cref="T:System.Char"/> equivalent.
            A <see cref="T:System.Boolean">boolean</see> return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing the value to convert.
            </param>
            <param name="formatProvider">A format provider used to assist parsing and/or provide culture-specific 
            format recognition.</param>
            <param name="output">
            When this method returns, contains the <see cref="T:System.Char"/> value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <see cref="T:System.Char"/> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c><see langword="null"/></c> or is not 
            of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c><see langword="true"/></c> if value was converted successfully;
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.DateTimeISOParser">
            <summary>
            A class that can parse ISO 8601 <see cref="T:System.String">string</see> representations of a
            <see cref="T:System.DateTime">time instant</see> to a valid <see cref="T:System.DateTime"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.DateTimeISOParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.DateTimeOffsetParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of a
            <see cref="T:System.DateTimeOffset">datetime offset</see> to a valid <see cref="T:System.DateTimeOffset"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.DateTimeOffsetParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.DateTimeOffsetParser.DoParseExact(System.String,System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.DateTimeParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of a
            <see cref="T:System.DateTime">time instant</see> to a valid <see cref="T:System.DateTime"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.DateTimeParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.DateTimeParser.DoParseExact(System.String,System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.DecimalParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of  a
            <see cref="T:System.Decimal">decimal</see> to a valid <see cref="T:System.Decimal"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.DecimalParser.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.DecimalParser"/> class.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.DecimalParser.#ctor(System.Globalization.NumberStyles)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.DecimalParser"/> class using the provided 
            <paramref name="numberStyles"/>.
            </summary>
            <param name="numberStyles">
            One of the <see cref="T:System.Globalization.NumberStyles"/> enumeration values.
            </param>
        </member>
        <member name="M:Axle.Conversion.Parsing.DecimalParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.DecimalParser.TryParse(System.String,System.IFormatProvider,System.Decimal@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <see cref="T:System.Decimal"/> equivalent.
            A <see cref="T:System.Boolean">boolean</see> return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific
            format recognition.
            </param>
            <param name="output">
            When this method returns, <paramref name="output"/> contains the <see cref="T:System.Decimal"/> value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <see cref="T:System.Decimal"/> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c><see langword="null"/></c> or is not 
            of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c><see langword="true"/></c> if value was converted successfully;
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.DoubleParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of a
            <see cref="T:System.Double">double precision floating point number</see> to a valid <see cref="T:System.Double"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.DoubleParser.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.DoubleParser"/> class.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.DoubleParser.#ctor(System.Globalization.NumberStyles)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.DoubleParser"/> class using the provided 
            <paramref name="numberStyles"/>.
            </summary>
            <param name="numberStyles">
            One of the <see cref="T:System.Globalization.NumberStyles"/> enumeration values.
            </param>
        </member>
        <member name="M:Axle.Conversion.Parsing.DoubleParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.DoubleParser.TryParse(System.String,System.IFormatProvider,System.Double@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <see cref="T:System.Double"/> equivalent.
            A <see cref="T:System.Boolean">boolean</see> return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific
            format recognition.
            </param>
            <param name="output">
            When this method returns, <paramref name="output"/> contains the <see cref="T:System.Double"/> value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <see cref="T:System.Double"/> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c><see langword="null"/></c> or is not 
            of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c><see langword="true"/></c> if value was converted successfully;
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.EnumParser`1">
            <summary>
            A generic <see cref="T:Axle.Conversion.Parsing.IParser`1"/> implementation that can handle <see cref="T:System.Enum">enum</see> types.
            </summary>
            <typeparam name="T">
            An enumeration type.
            </typeparam>
        </member>
        <member name="M:Axle.Conversion.Parsing.EnumParser`1.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.GuidParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of a
            <see cref="T:System.Guid">globally unique identifier</see> to a valid <see cref="T:System.Guid"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.GuidParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.Int16Parser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of a
            <see cref="T:System.Int16">16-bit integer</see> to a valid <see cref="T:System.Int16"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.Int16Parser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.Int16Parser.TryParse(System.String,System.IFormatProvider,System.Int16@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <see cref="T:System.Int16"/> equivalent.
            A <see cref="T:System.Boolean">boolean</see> return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific 
            format recognition.
            </param>
            <param name="output">
            When this method returns, <paramref name="output"/> contains the <see cref="T:System.Int16"/> value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <see cref="T:System.Int16"/> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c><see langword="null"/></c> or is not 
            of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c><see langword="true"/></c> if value was converted successfully;
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.Int32Parser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of a
            <see cref="T:System.Int32">32-bit integer</see> to a valid <see cref="T:System.Int32"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.Int32Parser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.Int32Parser.TryParse(System.String,System.IFormatProvider,System.Int32@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <see cref="T:System.Int32"/> equivalent.
            A <see cref="T:System.Boolean">boolean</see> return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific 
            format recognition.
            </param>
            <param name="output">
            When this method returns, <paramref name="output"/> contains the <see cref="T:System.Int32"/> value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <see cref="T:System.Int32"/> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c><see langword="null"/></c> or is not 
            of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c><see langword="true"/></c> if value was converted successfully; 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.Int64Parser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of a
            <see cref="T:System.Int64">64-bit integer</see> to a valid <see cref="T:System.Int64"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.Int64Parser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.Int64Parser.TryParse(System.String,System.IFormatProvider,System.Int64@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <see cref="T:System.Int64"/> equivalent.
            A <see cref="T:System.Boolean">boolean</see> return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific 
            format recognition.
            </param>
            <param name="output">
            When this method returns, <paramref name="output"/> contains the <see cref="T:System.Int64"/> value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <see cref="T:System.Int64"/> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c><see langword="null"/></c> or is not 
            of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c><see langword="true"/></c> if value was converted successfully; 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.IParser">
            <summary>
            An interface for a parser, that is, an object which is capable of converting a <see cref="T:System.String">string</see>
            representation of a given type to an instance of that type.
            </summary>
            <remarks>
            This interface is not intended for direct implementation. Its purpose is to allow a <see cref="T:Axle.Conversion.Parsing.IParser`1">generic parser</see> instance
            to be used in code where the generic type parameter cannot be inferred or supplied. Therefore, it is assumed that implementations of this
            interface also implement the <see cref="T:Axle.Conversion.Parsing.IParser`1">generic parser</see> interface.
            </remarks>
            <seealso cref="T:Axle.Conversion.Parsing.IParser`1"/>
        </member>
        <member name="M:Axle.Conversion.Parsing.IParser.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parses a <see cref="T:System.String">string</see> <paramref name="value"/> to the specified type.
            </summary>
            <param name="value">
            The <see cref="T:System.String">string</see> value to be parsed.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific format recognition.
            </param>
            <returns>
            An instance created by the <see cref="T:Axle.Conversion.Parsing.IParser`1">generic parser</see> implementation behind this interface.
            See remarks in the <see cref="T:Axle.Conversion.Parsing.IParser"/> interface for more info.
            </returns>
            <seealso cref="T:Axle.Conversion.Parsing.IParser`1"/>
        </member>
        <member name="M:Axle.Conversion.Parsing.IParser.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String">string</see> to the specified type.
            </summary>
            <param name="value">
            The <see cref="T:System.String">string</see> value to be parsed.
            </param>
            <returns>
            An instance created by the <see cref="T:Axle.Conversion.Parsing.IParser`1">generic parser</see> implementation behind this interface.
            See remarks in the <see cref="T:Axle.Conversion.Parsing.IParser"/> interface for more info.
            </returns>
            <seealso cref="T:Axle.Conversion.Parsing.IParser`1"/>
        </member>
        <member name="M:Axle.Conversion.Parsing.IParser.TryParse(System.String,System.IFormatProvider,System.Object@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <see cref="P:Axle.Conversion.Parsing.IParser.TargetType"/> equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="formatProvider">A format provider used to assist parsing and/or provide culture-specific format recognition.</param>
            <param name="result">
            When this method returns, <paramref name="result"/> contains the parsed value created by the <see cref="T:Axle.Conversion.Parsing.IParser`1">generic parser</see> implementation behind this interface,
            (see remarks in the <see cref="T:Axle.Conversion.Parsing.IParser"/> interface for more info) that is the equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or <c>null</c> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c>null</c> or is not of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if <paramref name="value"/> was converted successfully; otherwise, <c>false</c>.
            </returns>
            <seealso cref="T:Axle.Conversion.Parsing.IParser`1"/>
        </member>
        <member name="M:Axle.Conversion.Parsing.IParser.TryParse(System.String,System.Object@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <see cref="P:Axle.Conversion.Parsing.IParser.TargetType"/> equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing the value to convert.
            </param>
            <param name="result">
            When this method returns, <paramref name="result"/> contains the parsed value created by the <see cref="T:Axle.Conversion.Parsing.IParser`1">generic parser</see> implementation behind this interface,
            (see remarks in the <see cref="T:Axle.Conversion.Parsing.IParser"/> interface for more info) that is the equivalent to the string passed in <paramref name="value" />,
            if the conversion succeeded, or <c>null</c> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c>null</c> or is not of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if <paramref name="value"/> was converted successfully; otherwise, <c>false</c>.
            </returns>
            <seealso cref="T:Axle.Conversion.Parsing.IParser`1"/>
        </member>
        <member name="P:Axle.Conversion.Parsing.IParser.TargetType">
            <summary>
            The result type of the parsing.
            </summary>
        </member>
        <member name="T:Axle.Conversion.Parsing.IParser`1">
            <summary>
            An interface for a parser, that is, an object which is capable of converting a <see cref="T:System.String">string</see>
            representation of a given type to an instance of that type.
            </summary>
            <typeparam name="T">
            The result type of the parsing.
            </typeparam>
        </member>
        <member name="M:Axle.Conversion.Parsing.IParser`1.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parses a given <see cref="T:System.String">string</see> <paramref name="value"/> to the specified type.
            </summary>
            <param name="value">
            The <see cref="T:System.String">string</see> value to be parsed.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific format recognition.
            </param>
            <returns>
            An instance of <typeparamref name="T" /> that is the result of parsing <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Axle.Conversion.Parsing.IParser`1.Parse(System.String)">
            <summary>
            Parses a given <see cref="T:System.String">string</see> <paramref name="value"/> to the specified type.
            </summary>
            <param name="value">
            The <see cref="T:System.String">string</see> value to be parsed.
            </param>
            <returns>
            An instance of <typeparamref name="T" /> that is the result of parsing <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Axle.Conversion.Parsing.IParser`1.TryParse(System.String,System.IFormatProvider,`0@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <typeparamref name="T"/> equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific format recognition.
            </param>
            <param name="output">
            When this method returns, <paramref name="output"/> contains the <typeparamref name="T"/> value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <typeparamref name="T"/> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c>null</c> or is not of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if value was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Axle.Conversion.Parsing.IParser`1.TryParse(System.String,`0@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <typeparamref name="T"/> equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="output">
            When this method returns, <paramref name="output"/> contains the <typeparamref name="T"/> value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <typeparamref name="T"/> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c>null</c> or is not of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if value was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.IStrictParser">
            <summary>
            An interface for a strict parser; that is, a parser which may use additional format specifications for a raw string value
            in order to parse it into an object instance.
            </summary>
            <seealso cref="T:Axle.Conversion.Parsing.IParser" />
        </member>
        <member name="M:Axle.Conversion.Parsing.IStrictParser.ParseExact(System.String,System.String,System.IFormatProvider)">
            <summary>
            Parses a <see cref="T:System.String">string</see> <paramref name="value"/> to the specified type while conforming
            to a specific <paramref name="format"/>.
            </summary>
            <param name="value">The string value to be parsed.</param>
            <returns>
            An object that is the result of parsing <paramref name="value"/>.
            </returns>
            <param name="format">
            A format string specifying the format of the <paramref name="value"/> to parse.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide
            culture-specific format recognition.
            </param>
            <returns>
            An object that is the result of parsing <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Axle.Conversion.Parsing.IStrictParser.TryParseExact(System.String,System.String,System.IFormatProvider,System.Object@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its object equivalent, while conforming to a specific <paramref name="format"/>.
            A <see cref="T:System.Boolean">boolean</see> return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="format">
            A format string specifying the format of the <paramref name="value"/> to parse.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide
            culture-specific format recognition.
            </param>
            <param name="result">
            When this method returns, <paramref name="result"/> contains the parsed object value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or <c>null</c> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c>null</c> or is not of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if value was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.IStrictParser`1">
            <summary>
            A generic version of the <see cref="T:Axle.Conversion.Parsing.IStrictParser"/> interface.
            </summary>
            <seealso cref="T:Axle.Conversion.Parsing.IParser`1"/>
        </member>
        <member name="M:Axle.Conversion.Parsing.IStrictParser`1.ParseExact(System.String,System.String,System.IFormatProvider)">
            <summary>
            Parses a <see cref="T:System.String">string</see> <paramref name="value"/> to the specified type while conforming
            to a specific <paramref name="format"/>.
            </summary>
            <param name="value">The string value to be parsed.</param>
            <returns>
            An instance of <typeparamref name="T" /> that is the result of parsing <paramref name="value"/>.
            </returns>
            <param name="format">
            A format string specifying the format of the <paramref name="value"/> to parse.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide
            culture-specific format recognition.
            </param>
            <returns>
            An instance of <typeparamref name="T" /> that is the result of parsing <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Axle.Conversion.Parsing.IStrictParser`1.TryParseExact(System.String,System.String,System.IFormatProvider,`0@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <typeparamref name="T"/> equivalent, while conforming to a specific <paramref name="format"/>.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="format">
            A format string specifying the format of the <paramref name="value"/> to parse.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide
            culture-specific format recognition.
            </param>
            <param name="result">
            When this method returns, <paramref name="result"/> contains the <typeparamref name="T"/> value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <typeparamref name="T"/> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c>null</c> or is not of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if value was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.NullableParser`1">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of a nullable
            <typeparamref name="T"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.NullableParser`1.#ctor(Axle.Conversion.Parsing.IParser{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.NullableParser`1"/> class.
            </summary>
            <param name="actualParser">
            The underlying <see cref="T:Axle.Conversion.Parsing.IParser`1">parser</see> that is wrapped by the current 
            <see cref="T:Axle.Conversion.Parsing.NullableParser`1"/> instance.
            </param>
        </member>
        <member name="M:Axle.Conversion.Parsing.NullableParser`1.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.NullableParser`1.TryParse(System.String,System.IFormatProvider,System.Nullable{`0}@)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.ParseException">
            <summary>
            An exception that is thrown when failing to parse a <see cref="T:System.String"/> expression into a meaningful value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.ParseException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.ParseException"/> class.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.ParseException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.ParseException"/> class with a specified error 
            <paramref name="message"/>.
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
        </member>
        <member name="M:Axle.Conversion.Parsing.ParseException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.ParseException"/> class with a specified error 
            <paramref name="message"/> and a reference to the <paramref name="inner"/> exception that is the cause of 
            this exception.
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
            <param name="inner">
            The <see cref="T:System.Exception">exception</see> that is the cause of the current exception.
            If the <paramref name="inner"/> parameter is not a <c><see langword="null"/></c> reference 
            (<c>Nothing</c> in Visual Basic), the current exception is raised in a catch block that handles the inner 
            exception.
            </param>
        </member>
        <member name="M:Axle.Conversion.Parsing.ParseException.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.ParseException"/> class with information about the 
            <see cref="T:System.String"/> <paramref name="value"/>being parsed and the target <paramref name="type"/> of the 
            parsing.
            </summary>
            <param name="value">
            The input <see cref="T:System.String"/> that was parsed.
            </param>
            <param name="type">
            A <see cref="T:System.Type"/> representing the desired result type of the parsed value.
            </param>
        </member>
        <member name="M:Axle.Conversion.Parsing.ParseException.#ctor(System.String,System.Type,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.ParseException"/> class with information about the 
            <see cref="T:System.String"/> <paramref name="value"/>being parsed and the target <paramref name="type"/> of the 
            parsing.
            </summary>
            <param name="value">
            The input <see cref="T:System.String"/> that was parsed.
            </param>
            <param name="type">
            A <see cref="T:System.Type"/> representing the desired result type of the parsed value.
            </param>
            <param name="inner">
            The <see cref="T:System.Exception">exception</see> that is the cause of the current exception.
            If the <paramref name="inner"/> parameter is not a <c><see langword="null"/></c> reference 
            (<c>Nothing</c> in Visual Basic), the current exception is raised in a catch block that handles the inner 
            exception.
            </param>
        </member>
        <member name="M:Axle.Conversion.Parsing.ParseException.#ctor(System.String,System.String,System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.ParseException"/> class with information about the 
            <see cref="T:System.String"/> <paramref name="value"/>being parsed, the <paramref name="format"/> used to represent
            the value, and the target <paramref name="type"/> of the parsing.
            </summary>
            <param name="value">
            The input <see cref="T:System.String"/> that was parsed.
            </param>
            <param name="format">
            A <see cref="T:System.String"/> that represents the format that is used to represent the value.
            </param>
            <param name="type">
            A <see cref="T:System.Type"/> representing the desired result type of the parsed value.
            </param>
        </member>
        <member name="M:Axle.Conversion.Parsing.ParseException.#ctor(System.String,System.String,System.Type,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.ParseException"/> class with information about the 
            <see cref="T:System.String"/> <paramref name="value"/>being parsed, the <paramref name="format"/> used to represent
            the value, and the target <paramref name="type"/> of the parsing.
            </summary>
            <param name="value">
            The input <see cref="T:System.String"/> that was parsed.
            </param>
            <param name="format">
            A <see cref="T:System.String"/> that represents the format that is used to represent the value.
            </param>
            <param name="type">
            A <see cref="T:System.Type"/> representing the desired result type of the parsed value.
            </param>
            <param name="inner">
            The <see cref="T:System.Exception">exception</see> that is the cause of the current exception.
            If the <paramref name="inner"/> parameter is not a <c><see langword="null"/></c> reference 
            (<c>Nothing</c> in Visual Basic), the current exception is raised in a catch block that handles the inner 
            exception.
            </param>
        </member>
        <member name="M:Axle.Conversion.Parsing.ParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.ParseException"/> class with serialized data.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Axle.Conversion.Parsing.ParserExtensions">
            <summary>
            A static class holding extension methods for the <see cref="T:Axle.Conversion.Parsing.IParser`1"/> type.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.ParserExtensions.GetNullableParser``1(Axle.Conversion.Parsing.IParser{``0})">
            <summary>
            Gets a nullable type parser instance derived from the provided <paramref name="parser"/>.
            </summary>
            <typeparam name="T">The type of values this parser can handle.</typeparam>
            <param name="parser">
            The underlying <see cref="T:Axle.Conversion.Parsing.IParser`1"/> which is used to parse non-empty string representations of 
            <typeparamref name="T"/>
            </param>
            <returns>
            A nullable type parser instance derived from the provided <paramref name="parser"/>.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.SByteParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of 
            a <see cref="T:System.SByte">signed byte</see> to a valid <see cref="T:System.SByte"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.SByteParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.SByteParser.TryParse(System.String,System.IFormatProvider,System.SByte@)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.SingleParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of
            a <see cref="T:System.Single">single precision floating point number</see> to a valid <see cref="T:System.Single"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.SingleParser.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.SingleParser"/> class.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.SingleParser.#ctor(System.Globalization.NumberStyles)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.Parsing.SingleParser"/> class using the provided 
            <paramref name="numberStyles"/>.
            </summary>
            <param name="numberStyles">
            One of the <see cref="T:System.Globalization.NumberStyles"/> enumeration values.
            </param>
        </member>
        <member name="M:Axle.Conversion.Parsing.SingleParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.SingleParser.TryParse(System.String,System.IFormatProvider,System.Single@)">
            <summary>
            Converts the specified <see cref="T:System.String">string</see> representation of a logical <paramref name="value"/>
            to its <see cref="T:System.Single"/> equivalent.
            A <see cref="T:System.Boolean">boolean</see> return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A <see cref="T:System.String">string</see> containing the value to convert.
            </param>
            <param name="formatProvider">
            A <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific
            format recognition.
            </param>
            <param name="output">
            When this method returns, <paramref name="output"/> contains the <see cref="T:System.Single"/> value equivalent to
            the string passed in <paramref name="value" />, if the conversion succeeded, or the default
            value for <see cref="T:System.Single"/> if the conversion has failed.
            The conversion fails if the <paramref name="value"/> parameter is <c><see langword="null"/></c> or is not 
            of the correct format.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if value was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Axle.Conversion.Parsing.TimeSpanParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of a
            <see cref="T:System.TimeSpan">time interval</see> to a valid <see cref="T:System.TimeSpan"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.TimeSpanParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.TimeSpanParser.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.TimeSpanParser.DoParseExact(System.String,System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.UInt16Parser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of
            an <see cref="T:System.UInt16">unsigned 16-bit integer</see> to a valid <see cref="T:System.UInt16"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.UInt16Parser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.UInt16Parser.TryParse(System.String,System.IFormatProvider,System.UInt16@)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.UInt32Parser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of 
            an <see cref="T:System.UInt32">unsigned 32-bit integer</see> to a valid <see cref="T:System.UInt32"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.UInt32Parser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.UInt32Parser.TryParse(System.String,System.IFormatProvider,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.UInt64Parser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of
            an <see cref="T:System.UInt64">unsigned 64-bit integer</see> to a valid <see cref="T:System.UInt64"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.UInt64Parser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.UInt64Parser.TryParse(System.String,System.IFormatProvider,System.UInt64@)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.UriParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of
            an <see cref="T:System.Uri">uniform resource identifier</see> to a valid <see cref="T:System.Uri"/> instance.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.UriParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.Parsing.UriParser.TryParse(System.String,System.IFormatProvider,System.Uri@)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.Parsing.VersionParser">
            <summary>
            A class that can parse <see cref="T:System.String">string</see> representations of
            a <see cref="T:System.Version">version number</see> to a valid <see cref="T:System.Version"/> value.
            </summary>
        </member>
        <member name="M:Axle.Conversion.Parsing.VersionParser.DoParse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.ReverseConverter`2">
            <summary>
            A reverse converter swaps the <see cref="M:Axle.Conversion.IConverter`2.Convert(`0)"/> and <see cref="M:Axle.Conversion.ITwoWayConverter`2.ConvertBack(`1)"/>
            methods and the <see cref="M:Axle.Conversion.IConverter`2.TryConvert(`0,`1@)"/> and <see cref="M:Axle.Conversion.ITwoWayConverter`2.TryConvertBack(`1,`0@)"/>
            of a provided <see cref="T:Axle.Conversion.ITwoWayConverter`2"/> object.
            </summary>
            <typeparam name="TS">
            The source type for the reversed converter (same as the destination type of the underlying <see cref="T:Axle.Conversion.ITwoWayConverter`2"/>.
            </typeparam>
            <typeparam name="TD">
            The destination type for the reversed converter (same as the source type of the underlying <see cref="T:Axle.Conversion.ITwoWayConverter`2"/>.
            </typeparam>
        </member>
        <member name="M:Axle.Conversion.ReverseConverter`2.#ctor(Axle.Conversion.ITwoWayConverter{`1,`0})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Conversion.ReverseConverter`2"/> class.
            </summary>
            <param name="converter">
            The underlying <see cref="T:Axle.Conversion.ITwoWayConverter`2">converter</see> object to be reversed.
            </param>
        </member>
        <member name="M:Axle.Conversion.ReverseConverter`2.Convert(`0)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.ReverseConverter`2.ConvertBack(`1)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.ReverseConverter`2.Invert">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.ReverseConverter`2.TryConvert(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.ReverseConverter`2.TryConvertBack(`1,`0@)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.SByteToDecimalConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.SByte"/> and <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.SByteToDecimalConverter.DoConvert(System.SByte)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.SByteToDecimalConverter.DoConvertBack(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.SByteToDoubleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.SByte"/> and <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.SByteToDoubleConverter.DoConvert(System.SByte)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.SByteToDoubleConverter.DoConvertBack(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.SByteToSingleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.SByte"/> and <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.SByteToSingleConverter.DoConvert(System.SByte)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.SByteToSingleConverter.DoConvertBack(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.SingleToDoubleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.Single"/> and <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.SingleToDoubleConverter.DoConvert(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.SingleToDoubleConverter.DoConvertBack(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.UInt16ToDecimalConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.UInt16"/> and <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.UInt16ToDecimalConverter.DoConvert(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.UInt16ToDecimalConverter.DoConvertBack(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.UInt16ToDoubleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.UInt16"/> and <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.UInt16ToDoubleConverter.DoConvert(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.UInt16ToDoubleConverter.DoConvertBack(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.UInt16ToSingleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.UInt16"/> and <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.UInt16ToSingleConverter.DoConvert(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.UInt16ToSingleConverter.DoConvertBack(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.UInt32ToDecimalConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.UInt32"/> and <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.UInt32ToDecimalConverter.DoConvert(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.UInt32ToDecimalConverter.DoConvertBack(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.UInt32ToDoubleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.UInt32"/> and <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.UInt32ToDoubleConverter.DoConvert(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.UInt32ToDoubleConverter.DoConvertBack(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.UInt32ToSingleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.UInt32"/> and <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.UInt32ToSingleConverter.DoConvert(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.UInt32ToSingleConverter.DoConvertBack(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.UInt64ToDecimalConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.UInt64"/> and <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.UInt64ToDecimalConverter.DoConvert(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.UInt64ToDecimalConverter.DoConvertBack(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.UInt64ToDoubleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.UInt64"/> and <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.UInt64ToDoubleConverter.DoConvert(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.UInt64ToDoubleConverter.DoConvertBack(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Conversion.UInt64ToSingleConverter">
            <summary>
            A class that can be used to convert values to and from <see cref="T:System.UInt64"/> and <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Axle.Conversion.UInt64ToSingleConverter.DoConvert(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Conversion.UInt64ToSingleConverter.DoConvertBack(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Environment.Endianness">
            <summary>
            Indicates the byte order ("endianness") in which data is stored in a computer architecture. 
            </summary>
            <seealso cref="F:System.BitConverter.IsLittleEndian" />
        </member>
        <member name="F:Axle.Environment.Endianness.LittleEndian">
            <summary>
            Represents the little endian computer architecture
            </summary>
        </member>
        <member name="F:Axle.Environment.Endianness.BigEndian">
            <summary>
            Represents the big endian computer architecture
            </summary>
        </member>
        <member name="T:Axle.Environment.EnvironmentExtensions">
            <summary>
            A <see langword="static"/> class containing extension methods for 
            the <see cref="T:Axle.Environment.IEnvironment"/> interface
            </summary>
        </member>
        <member name="M:Axle.Environment.EnvironmentExtensions.IsMac(Axle.Environment.IEnvironment)">
            <summary>
            Determines whether the given <paramref name="environment"/> object represents
            a <see cref="F:Axle.Environment.OperatingSystemID.MacOS"/> operating system.
            </summary>
            <param name="environment">
            The <see cref="T:Axle.Environment.IEnvironment"/> instance to check.
            </param>
            <returns>
            <c><see langword="true"/></c> if the given <paramref name="environment"/> is 
            a <see cref="F:Axle.Environment.OperatingSystemID.MacOS"/> operating system;
            <c><see langword="false"/></c> otherwise.
            </returns>
            <seealso cref="M:Axle.Environment.EnvironmentExtensions.IsOS(Axle.Environment.IEnvironment,Axle.Environment.OperatingSystemID)"/>
            <seealso cref="T:Axle.Environment.OperatingSystemID"/>
        </member>
        <member name="M:Axle.Environment.EnvironmentExtensions.IsOS(Axle.Environment.IEnvironment,Axle.Environment.OperatingSystemID)">
            <summary>
            Determines whether the given <paramref name="environment"/> object represents
            a certain operating system.
            </summary>
            <param name="environment">
            The <see cref="T:Axle.Environment.IEnvironment"/> instance to check.
            </param>
            <param name="osID">
            The <see cref="T:Axle.Environment.OperatingSystemID"/> of the operating system to check.
            </param>
            <returns>
            <c><see langword="true"/></c> if the given <paramref name="environment"/> is 
            an operating system represented by the <paramref name="osID"/>;
            <c><see langword="false"/></c> otherwise.
            </returns>
            <seealso cref="T:Axle.Environment.OperatingSystemID"/>
        </member>
        <member name="M:Axle.Environment.EnvironmentExtensions.IsUnix(Axle.Environment.IEnvironment)">
            <summary>
            Determines whether the given <paramref name="environment"/> object represents
            a <see cref="F:Axle.Environment.OperatingSystemID.Unix"/> operating system.
            </summary>
            <param name="environment">
            The <see cref="T:Axle.Environment.IEnvironment"/> instance to check.
            </param>
            <returns>
            <c><see langword="true"/></c> if the given <paramref name="environment"/> is 
            a <see cref="F:Axle.Environment.OperatingSystemID.Unix"/> operating system;
            <c><see langword="false"/></c> otherwise.
            </returns>
            <seealso cref="M:Axle.Environment.EnvironmentExtensions.IsOS(Axle.Environment.IEnvironment,Axle.Environment.OperatingSystemID)"/>
            <seealso cref="T:Axle.Environment.OperatingSystemID"/>
        </member>
        <member name="M:Axle.Environment.EnvironmentExtensions.IsWindows(Axle.Environment.IEnvironment)">
            <summary>
            Determines whether the given <paramref name="environment"/> object represents
            a <see cref="F:Axle.Environment.OperatingSystemID.Windows"/> operating system.
            </summary>
            <param name="environment">
            The <see cref="T:Axle.Environment.IEnvironment"/> instance to check.
            </param>
            <returns>
            <c><see langword="true"/></c> if the given <paramref name="environment"/> is 
            a <see cref="F:Axle.Environment.OperatingSystemID.Windows"/> operating system;
            <c><see langword="false"/></c> otherwise.
            </returns>
            <seealso cref="M:Axle.Environment.EnvironmentExtensions.IsOS(Axle.Environment.IEnvironment,Axle.Environment.OperatingSystemID)"/>
            <seealso cref="T:Axle.Environment.OperatingSystemID"/>
        </member>
        <member name="T:Axle.Environment.IEnvironment">
            <summary>
            An interface representing an application's execution environment and its properties.
            </summary>
        </member>
        <member name="P:Axle.Environment.IEnvironment.Endianness">
            <summary>
            Indicates the byte order ("endianness") in which data is stored in the platform's computer architecture.
            </summary>
        </member>
        <member name="P:Axle.Environment.IEnvironment.ProcessorCount">
            <summary>
            Gets the number of processors on the current machine.
            </summary>
        </member>
        <member name="P:Axle.Environment.IEnvironment.NewLine">
            <summary>
            Gets the default line terminator character for the current platform.
            </summary>
        </member>
        <member name="P:Axle.Environment.IEnvironment.PathSeparator">
            <summary>
            Gets the default path separator character for the current platform.
            </summary>
        </member>
        <member name="P:Axle.Environment.IEnvironment.MachineName">
            <summary>
            Gets the NetBIOS name of the current platform.
            </summary>
        </member>
        <member name="P:Axle.Environment.IEnvironment.Culture">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo"/> that represents the culture installed with the current operating system.
            </summary>
        </member>
        <member name="P:Axle.Environment.IEnvironment.DefaultEncoding">
            <summary>
            Gets an encoding for the platform operating system's ANSI code page.
            </summary>
        </member>
        <member name="P:Axle.Environment.IEnvironment.OperatingSystem">
            <summary>
            Gets an <see cref="P:Axle.Environment.IEnvironment.OperatingSystem"/> object that contains the platform's OS identifier and version number.
            </summary>
        </member>
        <member name="P:Axle.Environment.IEnvironment.OperatingSystemID">
            <summary>
            Gets the operating system identifier for the current platform.
            </summary>
        </member>
        <member name="T:Axle.Environment.IRuntime">
            <summary>
            An interface serving as an abstraction to a .NET runtime.
            </summary>
        </member>
        <member name="M:Axle.Environment.IRuntime.GetAssemblies">
            <summary>
            Gets the assemblies that have been loaded into the execution context by the current app domain.
            </summary>
            <returns>
            A collection of <see cref="T:System.Reflection.Assembly"/> objects.
            </returns>
        </member>
        <member name="M:Axle.Environment.IRuntime.LoadAssembly(System.String)">
            <summary>
            Instructs the current runtime to load the assembly specified by the
            <paramref name="assemblyName"/> parameter.
            </summary>
            <param name="assemblyName">
            The name of the assembly to be loaded.
            </param>
            <returns>
            An <see cref="T:System.Reflection.Assembly"/> object corresponding to the given <paramref name="assemblyName"/> parameter.
            </returns>
        </member>
        <member name="M:Axle.Environment.IRuntime.LoadAssembly(System.String,System.Security.Policy.Evidence)">
            <summary>
            Instructs the current runtime to load the assembly specified by the
            <paramref name="assemblyName"/> and <paramref name="securityEvidence"/> parameters.
            </summary>
            <param name="assemblyName">
            The name of the assembly to be loaded.
            </param>
            <param name="securityEvidence">
            The <see cref="T:System.Security.Policy.Evidence"/> object to use when loading the assembly.
            </param>
            <returns>
            An <see cref="T:System.Reflection.Assembly"/> object corresponding to the given <paramref name="assemblyName"/> parameter.
            </returns>
        </member>
        <member name="M:Axle.Environment.IRuntime.LoadSatelliteAssembly(System.Reflection.Assembly,System.Globalization.CultureInfo)">
            <summary>
            Loads a satellite assembly to the specified <paramref name="targetAssembly">target</paramref> assembly and <paramref name="culture"/>.
            </summary>
            <param name="targetAssembly">
            The target <see cref="T:System.Reflection.Assembly"/> to search for related satellite assemblies.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/> object specifying the culture for the requested satellite assembly.
            </param>
            <returns>
            A satellite assembly to the specified <paramref name="targetAssembly">target</paramref> assembly and <paramref name="culture"/>.
            This method can return <c>null</c> in case a satellite assembly was not found for the given culture.
            In case the passed in <paramref name="culture"/> object represents the <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see>
            then this method also returns <c>null</c>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either the <paramref name="targetAssembly"/> or <paramref name="culture"/> parameter is <c>null</c>.
            </exception>
        </member>
        <member name="P:Axle.Environment.IRuntime.Version">
            <summary>
            Gets a <see cref="T:System.Version"/> object that describes the major, minor, build, and revision numbers of
            the current CLR implementation.
            </summary>
        </member>
        <member name="P:Axle.Environment.IRuntime.FrameworkVersion">
            <summary>
            Gets a <see cref="T:System.Version"/> object that describes the major, minor, build, and revision numbers of
            the common language runtime that is supported by the current CLR implementation.
            </summary>
        </member>
        <member name="P:Axle.Environment.IRuntime.Implementation">
            <summary>
            Gets a <see cref="T:Axle.Environment.RuntimeImplementation"/> value that describes the type of the .NET runtime that executes the current code.
            </summary>
        </member>
        <member name="P:Axle.Environment.IRuntime.Domain">
            <summary>
            Returns a reference to the <see cref="T:System.AppDomain"/> instance hosting the current .NET runtime.
            </summary>
        </member>
        <member name="T:Axle.Environment.OperatingSystemID">
            <summary>
            An enumeration of various operating system and platform identifiers, supported by an assembly.
            <list type="table">
              <listheader>
                <term>Value</term>
                <description>Flags</description>
              </listheader>
              <item>
                <term>
                  <para><see cref="F:Axle.Environment.OperatingSystemID.Unknown"/></para>
                  <para><see cref="F:Axle.Environment.OperatingSystemID.All"/></para>
                  <code> </code>
                </term>
                <description>
                  <para><b><c>0 0 0 0 </c></b><c>0 0 0 0</c></para>
                  <para><b><c>1 1 1 1 </c></b><c>0 0 0 0</c></para>
                  <para><see cref="F:Axle.Environment.OperatingSystemID.Unix"/> | <see cref="F:Axle.Environment.OperatingSystemID.Windows"/> | <see cref="F:Axle.Environment.OperatingSystemID.Mac"/></para>
                </description>
              </item>
              <item>
                <term><see cref="F:Axle.Environment.OperatingSystemID.Unix"/></term>
                <description><b><c>1 0 0 0 </c></b><c>0 0 0 0</c></description>
              </item>
              <item>
                <term><see cref="F:Axle.Environment.OperatingSystemID.Mac"/> / <see cref="F:Axle.Environment.OperatingSystemID.MacOS"/></term>
                <description><b><c>0 1 0 0 </c></b><c>0 0 0 0</c></description>
              </item>
              <item>
                <term><see cref="F:Axle.Environment.OperatingSystemID.XBox"/></term>
                <description><b><c>0 0 1 0 </c></b><c>0 0 0 0</c></description>
              </item>
              <item>
                <term>
                  <para><see cref="F:Axle.Environment.OperatingSystemID.Windows"/> / <see cref="F:Axle.Environment.OperatingSystemID.Win"/></para>
                  <para><see cref="F:Axle.Environment.OperatingSystemID.WinCE"/></para>
                  <para><see cref="F:Axle.Environment.OperatingSystemID.Win32"/></para>
                  <para><see cref="F:Axle.Environment.OperatingSystemID.Win32NT"/> / <see cref="F:Axle.Environment.OperatingSystemID.WinNT"/></para>
                  <para><see cref="F:Axle.Environment.OperatingSystemID.Win32S"/></para>
                  <para><see cref="F:Axle.Environment.OperatingSystemID.Win32Windows"/></para>
                </term>
                <description>
                  <para><b><c>0 0 0 1 </c></b><c>0 0 0 0</c></para>
                  <para><b><c>0 0 0 1 </c></b><c>0 0 0 1</c></para>
                  <para><b><c>0 0 0 1 </c></b><c>1 0 0 0</c></para>
                  <para><b><c>0 0 0 1 </c></b><c>1 1 0 0</c></para>
                  <para><b><c>0 0 0 1 </c></b><c>1 0 1 0</c></para>
                  <para><b><c>0 0 0 1 </c></b><c>1 0 0 1</c></para>
                </description>
              </item>
            </list>
            </summary>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.Unknown">
            <summary>
            Used to identify unrecognized operating system.
            </summary>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.Unix">
            <summary>
            Marks <b>any</b> Unix operating system.
            </summary>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.MacOS">
            <summary>
            Identifies the Macintosh operating system.
            </summary>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.XBox">
            <summary>
            Identifies the Xbox 360 platform.
            </summary>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.Windows">
            <summary>
            Marks <b>any</b> Windows operating system.
            </summary>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.WinCE">
            <summary>
            Identifies a Windows CE operating system.
            </summary>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.Win32">
            <summary>
            Marks <b>any</b> Win32 operating system.
            </summary>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.Win32S">
            <summary>
            Identifies a Win32s operating system. Win32s is a layer that runs on 16-bit versions of Windows to provide access to 32-bit applications.
            </summary>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.Win32Windows">
            <summary>
            Identifies a Windows 95 operating system or later.
            </summary>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.Win32NT">
            <summary>
            Identifies a Windows NT operating system or later.
            </summary>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.WinNT">
            <summary>
            Same as <see cref="F:Axle.Environment.OperatingSystemID.Win32NT"/>
            </summary>
            <seealso cref="F:Axle.Environment.OperatingSystemID.Win32NT"/>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.Win">
            <summary>
            Same as <see cref="F:Axle.Environment.OperatingSystemID.Windows"/>
            </summary>
            <seealso cref="F:Axle.Environment.OperatingSystemID.Windows"/>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.Mac">
            <summary>
            Marks <b>any</b> Macintosh operating system.
            </summary>
        </member>
        <member name="F:Axle.Environment.OperatingSystemID.All">
            <summary>
            A flag combination for all operating systems represented by <see cref="T:Axle.Environment.OperatingSystemID">this enumeration</see>.
            </summary>
        </member>
        <member name="T:Axle.Environment.Platform">
            <summary>
            A static class that enables access to the current execution environment and .NET runtime properties.
            </summary>
        </member>
        <member name="P:Axle.Environment.Platform.Environment">
            <summary>
            Gets an <see cref="T:Axle.Environment.IEnvironment"/> instance that represents the current execution environment.
            </summary>
        </member>
        <member name="P:Axle.Environment.Platform.Runtime">
            <summary>
            Gets an instance of <see cref="T:Axle.Environment.IRuntime"/> that represents the current .NET runtime.
            </summary>
        </member>
        <member name="T:Axle.Environment.RuntimeImplementation">
            <summary>
            An enumeration describing the possible type of CLR implementations.
            </summary>
        </member>
        <member name="F:Axle.Environment.RuntimeImplementation.Unknown">
            <summary>
            Unrecognized CLR implementation.
            </summary>
        </member>
        <member name="F:Axle.Environment.RuntimeImplementation.Mono">
            <summary>
            Mono is a free, open-source implementation of the CLR.
            </summary>
        </member>
        <member name="F:Axle.Environment.RuntimeImplementation.NetFramework">
            <summary>
            The original .NET framework CLR from Microsoft.
            </summary>
        </member>
        <member name="F:Axle.Environment.RuntimeImplementation.NetCore">
            <summary>
            .NET Core
            </summary>
        </member>
        <member name="F:Axle.Environment.RuntimeImplementation.NetStandard">
            <summary>
            .NET Standard
            </summary>
        </member>
        <member name="T:Axle.Extensions.DateTimeOffset.DateTimeOffsetExtensions">
            <summary>
            A <see langword="static"/> class that contains extension methods for the 
            <see cref="T:System.DateTimeOffset"/> <see langword="struct"/>
            </summary>
        </member>
        <member name="M:Axle.Extensions.DateTimeOffset.DateTimeOffsetExtensions.ToISOString(System.DateTimeOffset)">
            <summary>
            Convers the value of the current <paramref name="dateTimeOffset"/> to its ISO 8601 string representation.
            </summary>
            <param name="dateTimeOffset">
            The <see cref="T:System.DateTimeOffset"/> value to convert to <see cref="T:System.String"/>
            </param>
            <returns>
            Am ISO 8601 string representation of the current <paramref name="dateTimeOffset"/> value.
            </returns>
        </member>
        <member name="T:Axle.Extensions.DateTime.DateTimeExtensions">
            <summary>
            A <see langword="static"/> class that contains extension methods for the 
            <see cref="T:System.DateTime"/> <see langword="struct"/>
            </summary>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeExtensions.DaysInMonth(System.DateTime)">
            <summary>
            Returns the number of days in the specified month and year.
            </summary>
            <param name="current">
            The <see cref="T:System.DateTime"/> instance upon which this extension method is invoked.
            </param>
            <returns>
            Returns the number of days in the specified date's month and year.
            For example, if month equals 2 for February, the return value is 28 or 29 depending upon whether year is a
            leap year.
            </returns>
            <seealso cref="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeExtensions.FirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> value representing the first day of the same week as the <paramref name="current"/> date time is in.
            </summary>
            <param name="current">
            A <see cref="T:System.DateTime"/> value from the same week to get the first day of week from.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/> instance representing the culture to obtain date-time settings from.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value representing the first day of the same week as the <paramref name="current"/> date time is in.
            </returns>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.FirstDayOfWeek(System.DateTime,System.DayOfWeek)"/>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.LastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeExtensions.FirstDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> value representing the first day of the same week as the <paramref name="current"/> date time is in.
            </summary>
            <param name="current">
            A <see cref="T:System.DateTime"/> value from the same week to get the first day of week from.
            </param>
            <param name="firstDayOfWeek">
            A <see cref="T:System.DayOfWeek"/> value telling which day of the week is considered the first.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value representing the first day of the same week as the <paramref name="current"/> date time is in.
            </returns>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.FirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)"/>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.LastDayOfWeek(System.DateTime,System.DayOfWeek)"/>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeExtensions.FirstDayOfMonth(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> value representing the first day of the same month as <paramref name="current"/> date time is in.
            </summary>
            <param name="current">
            A <see cref="T:System.DateTime"/> value in the same month to get the first day from.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value representing the first day of the same month as <paramref name="current"/> date time is in.
            </returns>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.LastDayOfMonth(System.DateTime)"/>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeExtensions.FirstDayOfYear(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> value representing the first day of the same year as <paramref name="current"/> date time is in.
            </summary>
            <param name="current">
            A <see cref="T:System.DateTime"/> value in the same year to get the first day from.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value representing the first day of the same year as <paramref name="current"/> date time is in.
            </returns>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.LastDayOfYear(System.DateTime)"/>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeExtensions.LastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> value representing the last day of the same week as the <paramref name="current"/> date time is in.
            </summary>
            <param name="current">
            A <see cref="T:System.DateTime"/> value from the same week to get the last day of week from.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/> instance representing the culture to obtain date-time settings from.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value representing the last day of the same week as the <paramref name="current"/> date time is in.
            </returns>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.FirstDayOfWeek(System.DateTime,System.DayOfWeek)"/>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.LastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeExtensions.LastDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> value representing the last day of the same week as the <paramref name="current"/> date time is in.
            </summary>
            <param name="current">
            A <see cref="T:System.DateTime"/> value from the same week to get the last day of week from.
            </param>
            <param name="firstDayOfWeek">
            A <see cref="T:System.DayOfWeek"/> value telling which day of the week is considered the first.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value representing the last day of the same week as the <paramref name="current"/> date time is in.
            </returns>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.FirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)"/>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.LastDayOfWeek(System.DateTime,System.DayOfWeek)"/>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeExtensions.LastDayOfMonth(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> value representing the last day of the same month as <paramref name="current"/> date time is in.
            </summary>
            <param name="current">
            A <see cref="T:System.DateTime"/> value in the same month to get the last day from.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value representing the last day of the same month as <paramref name="current"/> date time is in.
            </returns>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.FirstDayOfMonth(System.DateTime)"/>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeExtensions.LastDayOfYear(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> value representing the last day of the same year as <paramref name="current"/> date time is in.
            </summary>
            <param name="current">
            A <see cref="T:System.DateTime"/> value in the same year to get the last day from.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value representing the last day of the same year as <paramref name="current"/> date time is in.
            </returns>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.FirstDayOfYear(System.DateTime)"/>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeExtensions.ChangeKind(System.DateTime,System.DateTimeKind)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value with the same number of <see cref="P:System.DateTime.Ticks"/> but with
            a <see cref="P:System.DateTime.Kind"/> value as specified by the <paramref name="kind"/> parameter.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> value to change the kind of.</param>
            <param name="kind">
            The <see cref="T:System.DateTimeKind"/> value to use for the changed <see cref="T:System.DateTime"/>.
            </param>
            <returns>
            A new <see cref="T:System.DateTime"/> value with the same number of <see cref="P:System.DateTime.Ticks"/> but with
            a <see cref="P:System.DateTime.Kind"/> value as specified by the <paramref name="kind"/> parameter.
            </returns>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.ChangeKindToLocal(System.DateTime)"/>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.ChangeKindToUtc(System.DateTime)"/>
            <seealso cref="P:System.DateTime.Kind"/>
            <seealso cref="T:System.DateTimeKind"/>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeExtensions.ChangeKindToLocal(System.DateTime)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value with the same number of <see cref="P:System.DateTime.Ticks"/> but with
            a <see cref="P:System.DateTime.Kind"/> value changed to <see cref="F:System.DateTimeKind.Local"/>.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> value to change the kind of.</param>
            <returns>
            A new <see cref="T:System.DateTime"/> value with the same number of <see cref="P:System.DateTime.Ticks"/> but with
            a <see cref="P:System.DateTime.Kind"/> value changed to <see cref="F:System.DateTimeKind.Local"/>.
            </returns>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.ChangeKindToLocal(System.DateTime)"/>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.ChangeKindToUtc(System.DateTime)"/>
            <seealso cref="P:System.DateTime.Kind"/>
            <seealso cref="F:System.DateTimeKind.Local"/>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeExtensions.ChangeKindToUtc(System.DateTime)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value with the same number of <see cref="P:System.DateTime.Ticks"/> but with
            a <see cref="P:System.DateTime.Kind"/> value changed to <see cref="F:System.DateTimeKind.Utc"/>.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> value to change the kind of.</param>
            <returns>
            A new <see cref="T:System.DateTime"/> value with the same number of <see cref="P:System.DateTime.Ticks"/> but with
            a <see cref="P:System.DateTime.Kind"/> value changed to <see cref="F:System.DateTimeKind.Utc"/>.
            </returns>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.ChangeKindToLocal(System.DateTime)"/>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeExtensions.ChangeKindToUtc(System.DateTime)"/>
            <seealso cref="P:System.DateTime.Kind"/>
            <seealso cref="F:System.DateTimeKind.Utc"/>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeExtensions.ToISOString(System.DateTime)">
            <summary>
            Convers the value of the current <paramref name="dateTime"/> to its ISO 8601 string representation.
            </summary>
            <param name="dateTime">
            The <see cref="T:System.DateTime"/> value to convert to <see cref="T:System.String"/>
            </param>
            <returns>
            Am ISO 8601 string representation of the current <paramref name="dateTime"/> value.
            </returns>
        </member>
        <member name="T:Axle.Extensions.DateTime.DateTimeTimezoneExtensions">
            <summary>
            A <see langword="static"/> class containing <see cref="T:System.DateTime"/> extensions 
            methods for working with timezones.
            </summary>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeTimezoneExtensions.ToLocalTime(System.DateTime,System.DateTimeKind)">
            <summary>
            Converts the given <see cref="T:System.DateTime"/> value to local date time.
            </summary>
            <param name="current">
            The <see cref="T:System.DateTime"/> value to convert.
            </param>
            <param name="assumedKind">
            A <see cref="T:System.DateTimeKind"/> value to be used as the assumed <see cref="P:System.DateTime.Kind">kind</see> of the
            <paramref name="current">given</paramref> <see cref="T:System.DateTime"/> in case its kind was set to <see cref="F:System.DateTimeKind.Unspecified"/>
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value that represents <paramref name="current">a given</paramref> <see cref="T:System.DateTime"/> value into the local <see cref="T:System.TimeZoneInfo"/>.
            </returns>
            <seealso cref="P:System.DateTime.Kind"/>
            <seealso cref="T:System.DateTimeKind"/>
            <seealso cref="T:System.TimeZoneInfo"/>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeTimezoneExtensions.ToLocalTime(System.DateTime)"/>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeTimezoneExtensions.ChangeTimeZone(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)"/>
            <seealso cref="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)"/>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeTimezoneExtensions.ToLocalTime(System.DateTime)">
            <summary>
            Converts the given <see cref="T:System.DateTime"/> value to local date time.
            <remarks>
            In case the <paramref name="current"/> <see cref="P:System.DateTime.Kind"/> property is set to <see cref="F:System.DateTimeKind.Unspecified"/>,
            it is assumed that the date is a local date (as if it were <see cref="F:System.DateTimeKind.Local"/>).
            </remarks>
            </summary>
            <param name="current">
            The <see cref="T:System.DateTime"/> value to convert.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value that represents <paramref name="current">a given</paramref> <see cref="T:System.DateTime"/> value into the local <see cref="T:System.TimeZoneInfo"/>.
            </returns>
            <seealso cref="P:System.DateTime.Kind"/>
            <seealso cref="T:System.DateTimeKind"/>
            <seealso cref="T:System.TimeZoneInfo"/>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeTimezoneExtensions.ToLocalTime(System.DateTime,System.DateTimeKind)"/>
            <seealso cref="M:Axle.Extensions.DateTime.DateTimeTimezoneExtensions.ChangeTimeZone(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)"/>
            <seealso cref="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)"/>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeTimezoneExtensions.ChangeTimeZone(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo,System.Boolean)">
            <summary>
            Converts a time from one time zone to another.
            </summary>
            <param name="dateTime">
            The <see cref="T:System.DateTime"/> instance upon which this extension method is invoked.
            </param>
            <param name="sourceTimeZone">
            The time zone of the given <paramref name="dateTime"/>.
            </param>
            <param name="destinationTimeZone">
            The time zone to convert <paramref name="dateTime"/> to.
            </param>
            <param name="assumeLocal">
            A boolean value indicating whether the provided <see cref="T:System.DateTime"/> value in the
            <paramref name="dateTime"/> should be treated as a local time in the <paramref name="sourceTimeZone"/>
            if its <see cref="P:System.DateTime.Kind" /> property is set to <see cref="F:System.DateTimeKind.Unspecified"/>.
            If this value is <c>false</c>, the <paramref name="dateTime"/> is assumed to be an UTC date, otherwise
            it is treated as a date local to the timezone specified by the <paramref name="sourceTimeZone"/>.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value that represents the date and time in the destination time zone which
            corresponds to the <paramref name="dateTime"/> parameter in the source time zone.
            </returns>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeTimezoneExtensions.ChangeTimeZone(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
            <summary>
            Converts a time from one time zone to another.
            </summary>
            <param name="dateTime">
            The <see cref="T:System.DateTime"/> instance upon which this extension method is invoked.
            </param>
            <param name="sourceTimeZone">
            The time zone of the given <paramref name="dateTime"/>.
            </param>
            <param name="destinationTimeZone">
            The time zone to convert <paramref name="dateTime"/> to.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value that represents the date and time in the destination time zone which
            corresponds to the <paramref name="dateTime"/> parameter in the source time zone.
            </returns>
        </member>
        <member name="M:Axle.Extensions.DateTime.DateTimeTimezoneExtensions.ToUniversalTime(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Converts a time to the universal time zone (UTC).
            </summary>
            <param name="dateTime">
            The <see cref="T:System.DateTime"/> instance upon which this extension method is invoked.
            </param>
            <param name="sourceTimeZone">
            The time zone of the given <paramref name="dateTime"/>.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value that represents the date and time in the UTC time zone which
            corresponds to the <paramref name="dateTime"/> parameter.
            </returns>
        </member>
        <member name="T:Axle.Extensions.Object.ObjectExtensions">
            <summary>
            A <see langword="static"/> class containing common extension methods 
            applicable to all <see cref="T:System.Object"/> instances.
            </summary>
        </member>
        <member name="M:Axle.Extensions.Object.ObjectExtensions.CalculateHashCode``1(``0,System.Int32,System.Object[])">
            <summary>
            Calculates the hash code for a given object and its members. The members are passed in as arguments.
            </summary>
            <remarks>
            The usual context of calculating the hash code includes a type's members. However, this method does not
            constrain you in any way to pass external and potentially un-related objects that will be used to obtain the resulting hash.
            Be advised to carefully choose the arguments when performing calls to this method, as it serves more as a convenient
            shortcut to manually doing the hash calculation.
            </remarks>
            <typeparam name="T">
            The type of the object to calculate a hash code for.
            </typeparam>
            <param name="obj">
            The source object to calculate the hash code for.
            Its own <see cref="M:System.Object.GetHashCode"/> method is not invoked inside this method, only the hashes of the arguments are being used.
            </param>
            <param name="magic">
            An integer "magic" number, used to augment the combined hash code of the passed in arguments.
            </param>
            <param name="args">
            An array of objects, usually the key members of the target <paramref name="obj"/> that will participate in calculating the final hash code.
            </param>
            <returns>
            An integer representing the hash code as a combined value of the hashes from the objects passed in trough the <paramref name="args"/> parameter.
            </returns>
        </member>
        <member name="M:Axle.Extensions.Object.ObjectExtensions.CalculateHashCode``1(``0,System.Object[])">
            <summary>
            Calculates the hash code for a given object and its members. The members are passed in as arguments.
            </summary>
            <remarks>
            The usual context of calculating the hash code includes a type's members. However, this method does not
            constrain you in any way to pass external and potentially un-related objects that will be used to obtain the resulting hash.
            Be advised to carefully choose the arguments when performing calls to this method, as it serves more as a convenient
            shortcut to manually doing the hash calculation.
            </remarks>
            <typeparam name="T">
            The type of the object to calculate a hash code for.
            </typeparam>
            <param name="obj">
            The source object to calculate the hash code for.
            Its own <see cref="M:System.Object.GetHashCode"/> method is not invoked inside this method, only the hashes of the arguments are being used.
            </param>
            <param name="args">
            An array of objects, usually the key members of the target <paramref name="obj"/> that will participate in calculating the final hash code.
            </param>
            <returns>
            An integer representing the hash code as a combined value of the hashes from the objects passed in trough the <paramref name="args"/> parameter.
            </returns>
        </member>
        <member name="T:Axle.Extensions.StringComparison.StringComparisonExtensions">
            <summary>
            A <see langword="static"/> class containing common extension methods to 
            <see cref="N:Axle.Extensions.StringComparison"/> instances.
            </summary>
        </member>
        <member name="M:Axle.Extensions.StringComparison.StringComparisonExtensions.GetComparer(System.StringComparison)">
            <summary>
            Gets the respective <see cref="T:System.StringComparer"/> implementation corresponding to
            the given <paramref name="stringComparison"/> value.
            </summary>
            <param name="stringComparison">One of the <see cref="N:Axle.Extensions.StringComparison"/> values</param>
            <returns>
            A <seealso cref="T:System.StringComparer"/> instance that corresponds to the given
            <paramref name="stringComparison"/> value.
            </returns>
        </member>
        <member name="T:Axle.Extensions.String.StringExtensions">
            <summary>
            A <see langword="static"/> class containing common extension methods to 
            <see cref="N:Axle.Extensions.String"/> instances.
            </summary>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Determines if the provided by the <paramref name="value"/> parameter <see cref="T:System.String"/> is contained
            within the target <see cref="T:System.String"/> represented by the <paramref name="str"/> parameter.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> to seek.
            </param>
            <param name="comparison">
             One of the <see cref="T:System.StringComparison"/> enumeration values that specifies the rules for the search.
            </param>
            <returns>
            A <c>true</c> if the <see cref="T:System.String"/> represented by the <paramref name="value"/> parameter is contained
            within the target <see cref="T:System.String"/> represented by the <paramref name="str"/> parameter; <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
            <seealso cref="T:System.StringComparison"/>
            <seealso cref="M:System.String.IndexOf(System.String,System.StringComparison)"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Contains(System.String,System.String)">
            <summary>
            Determines if the provided by the <paramref name="value"/> parameter <see cref="T:System.String"/> is contained
            within the target <see cref="T:System.String"/> represented by the <paramref name="str"/> parameter.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> to seek.
            </param>
            <returns>
            A <c>true</c> if the <see cref="T:System.String"/> represented by the <paramref name="value"/> parameter is contained
            within the target <see cref="T:System.String"/> represented by the <paramref name="str"/> parameter; <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            </exception>
            <seealso cref="M:System.String.IndexOf(System.String)"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Contains(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Determines if the provided by the <paramref name="value"/> parameter <see cref="T:System.String"/> is contained
            within the target <see cref="T:System.String"/> represented by the <paramref name="str"/> parameter.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> to seek.
            </param>
            <param name="startIndex">
            The search starting position.
            </param>
            <param name="comparison">
             One of the <see cref="T:System.StringComparison"/> enumeration values that specifies the rules for the search.
            </param>
            <returns>
            A <c>true</c> if the <see cref="T:System.String"/> represented by the <paramref name="value"/> parameter is contained
            within the target <see cref="T:System.String"/> represented by the <paramref name="str"/> parameter; <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of <paramref name="str"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
            <seealso cref="T:System.StringComparison"/>
            <seealso cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Contains(System.String,System.String,System.Int32)">
            <summary>
            Determines if the provided by the <paramref name="value"/> parameter <see cref="T:System.String"/> is contained
            within the target <see cref="T:System.String"/> represented by the <paramref name="str"/> parameter.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> to seek.
            </param>
            <param name="startIndex">
            The search starting position.
            </param>
            <returns>
            A <c>true</c> if the <see cref="T:System.String"/> represented by the <paramref name="value"/> parameter is contained
            within the <paramref name="str">target string</paramref>; <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of <paramref name="str"/>.
            </exception>
            <seealso cref="M:System.String.IndexOf(System.String,System.Int32)"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Contains(System.String,System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Determines if the provided by the <paramref name="value"/> parameter <see cref="T:System.String"/> is contained
            within the target <see cref="T:System.String"/> represented by the <paramref name="str"/> parameter.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> to seek.
            </param>
            <param name="startIndex">
            The search starting position.
            </param>
            <param name="count">
            The number of character positions to examine.
            </param>
            <param name="comparison">
             One of the <see cref="T:System.StringComparison"/> enumeration values that specifies the rules for the search.
            </param>
            <returns>
            A <c>true</c> if the <see cref="T:System.String"/> represented by the <paramref name="value"/> parameter is contained
            within the <paramref name="str">target string</paramref>; <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> or <paramref name="startIndex"/> is negative.
            <para>-or-</para>
            <paramref name="startIndex"/> is greater than the length of <paramref name="str"/>.
            <para>-or-</para>
            <paramref name="count"/> is greater than the length of <paramref name="str"/> minus <paramref name="startIndex"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
            <seealso cref="T:System.StringComparison"/>
            <seealso cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Contains(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Determines if the provided by the <paramref name="value"/> parameter <see cref="T:System.String"/> is contained
            within the target <see cref="T:System.String"/> represented by the <paramref name="str"/> parameter.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> to seek.
            </param>
            <param name="startIndex">
            The search starting position.
            </param>
            <param name="count">
            The number of character positions to examine.
            </param>
            <returns>
            A <c>true</c> if the <see cref="T:System.String"/> represented by the <paramref name="value"/> parameter is contained
            within the <paramref name="str">target string</paramref>; <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> or <paramref name="startIndex"/> is negative.
            <para>-or-</para>
            <paramref name="startIndex"/> is greater than the length of <paramref name="str"/>.
            <para>-or-</para>
            <paramref name="count"/> is greater than the length of <paramref name="str"/> minus <paramref name="startIndex"/>.
            </exception>
            <seealso cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.IsEmpty(System.String)">
            <summary>
            Checks if the target <see cref="T:System.String"/> is an empty string.
            </summary>
            <param name="str">The target <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the <paramref name="str">target string</paramref> is an empty string instance; false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="str"/> is <c>null</c>.
            </exception>
            <seealso cref="F:System.String.Empty"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Checks if the target <see cref="T:System.String"/> is <c>null</c> or an empty string.
            </summary>
            <param name="str">The target <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the <paramref name="str">target string</paramref> is <c>null</c> or an empty string instance; false otherwise.
            </returns>
            <seealso cref="F:System.String.Empty"/>
            <seealso cref="M:System.String.IsNullOrEmpty(System.String)"/>
            <seealso cref="M:Axle.Extensions.String.StringExtensions.IsEmpty(System.String)"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Reverse(System.String)">
            <summary>
            Creates a <see cref="T:System.String"/> using all the characters from a target string instance, but in a reversed order.
            </summary>
            <param name="str">The <see cref="T:System.String">string instance</see> upon which the extension method is called upon.</param>
            <returns>
            A new string instance using all the characters from a target string instance, but in a reversed order.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="str"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Split(System.String,System.StringSplitOptions,System.Char)">
            <summary>
            Returns a string array that contains the substrings in the <paramref name="str">target string</paramref>
            that are delimited by elements of a specified Unicode character provided by the <paramref name="separator"/> parameter.
            The <paramref name="options"/> parameter specifies whether to return empty array elements.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/>
            </param>
            <param name="options">
            Use <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned;
            or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned
            </param>
            <param name="separator">
            An Unicode character to act as a delimiter.
            </param>
            <returns>
            A string array that contains the substrings in the <paramref name="str">target string</paramref>
            that are delimited by elements of a specified Unicode character.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="str"/> is <c>null</c>;
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="options"/> is not one of the <see cref="T:System.StringSplitOptions"/> values.
            </exception>
            <seealso cref="M:System.String.Split(System.Char[],System.StringSplitOptions)"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Split(System.String,System.StringSplitOptions,System.Char[])">
            <summary>
            Returns a string array that contains the substrings in the <paramref name="str">target string</paramref>
            that are delimited by elements of a specified Unicode character array provided by the <paramref name="separators"/> parameter.
            The <paramref name="options"/> parameter specifies whether to return empty array elements.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/>
            </param>
            <param name="options">
            Use <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned;
            or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned
            </param>
            <param name="separators">
            An array of Unicode characters to act as delimiters, an empty array or <c>null</c>.
            </param>
            <returns>
            A string array that contains the substrings in the <paramref name="str">target string</paramref>
            that are delimited by elements of a specified Unicode character.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="str"/> is <c>null</c>;
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="options"/> is not one of the <see cref="T:System.StringSplitOptions"/> values.
            </exception>
            <seealso cref="M:System.String.Split(System.Char[],System.StringSplitOptions)"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Split(System.String,System.StringSplitOptions,System.Int32,System.Char[])">
            <summary>
            Returns a string array that contains the substrings in the <paramref name="str">target string</paramref>
            that are delimited by elements of a specified Unicode character array provided by the <paramref name="separators"/> parameter.
            The <paramref name="options"/> parameter specifies whether to return empty array elements.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/>
            </param>
            <param name="options">
            Use <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned;
            or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned
            </param>
            <param name="count">
            The maximum number of substrings to return.
            </param>
            <param name="separators">
            An array of Unicode characters to act as delimiters, an empty array or <c>null</c>.
            </param>
            <returns>
            A string array that contains the substrings in the <paramref name="str">target string</paramref>
            that are delimited by elements of a specified Unicode character.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="str"/> is <c>null</c>;
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="options"/> is not one of the <see cref="T:System.StringSplitOptions"/> values.
            </exception>
            <seealso cref="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Split(System.String,System.StringSplitOptions,System.String[])">
            <summary>
            Returns a string array that contains the substrings in the <paramref name="str">target string</paramref>
            that are delimited by elements of a specified array of strings provided by the <paramref name="separators"/> parameter.
            The <paramref name="options"/> parameter specifies whether to return empty array elements.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/>
            </param>
            <param name="options">
            Use <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned;
            or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned
            </param>
            <param name="separators">
            An array of strings to act as delimiters, an empty array or <c>null</c>.
            </param>
            <returns>
            A string array that contains the substrings in the <paramref name="str">target string</paramref>
            that are delimited by elements of a specified array of strings.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="str"/> is <c>null</c>;
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="options"/> is not one of the <see cref="T:System.StringSplitOptions"/> values.
            </exception>
            <seealso cref="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Split(System.String,System.StringSplitOptions,System.Int32,System.String[])">
            <summary>
            Returns a string array that contains the substrings in the <paramref name="str">target string</paramref>
            that are delimited by elements of a specified array of strings provided by the <paramref name="separators"/> parameter.
            The <paramref name="options"/> parameter specifies whether to return empty array elements.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/>
            </param>
            <param name="options">
            Use <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned;
            or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned
            </param>
            <param name="count">
            The maximum number of substrings to return.
            </param>
            <param name="separators">
            An array of strings to act as delimiters, an empty array or <c>null</c>.
            </param>
            <returns>
            A string array that contains the substrings in the <paramref name="str">target string</paramref>
            that are delimited by elements of a specified array of strings.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="str"/> is <c>null</c>;
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="options"/> is not one of the <see cref="T:System.StringSplitOptions"/> values.
            </exception>
            <seealso cref="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Split(System.String,System.String[])">
            <summary>
            Returns a string array that contains the substrings in the <paramref name="str">target string</paramref>
            that are delimited by elements of a specified array of strings provided by the <paramref name="separators"/> parameter.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/>
            </param>
            <param name="separators">
            An array of strings to act as delimiters, an empty array or <c>null</c>.
            </param>
            <returns>
            A string array that contains the substrings in the <paramref name="str">target string</paramref>
            that are delimited by elements of a specified array of strings.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="str"/> is <c>null</c>;
            </exception>
            <seealso cref="M:System.String.Split(System.Char[],System.StringSplitOptions)"/>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeBeforeFirst(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Takes the part of a string that precedes the first occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <param name="startIndex">
            The index to start the searching from.
            </param>
            <param name="comparison">
            One of the <see cref="T:System.StringComparison"/> values, determining the string comparison method to be used for searching.
            </param>
            <returns>
            The part of the original string that precedes the first occurrence of a given <paramref name="value"/>, or
            the original string if the <paramref name="value"/> was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="startIndex"/> specifies a position that is greater than the length of the string <paramref name="str"/>,
            or is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeBeforeFirst(System.String,System.String,System.StringComparison)">
            <summary>
            Takes the part of a string that precedes the first occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <param name="comparison">
            One of the <see cref="T:System.StringComparison"/> values, determining the string comparison method to be used for searching.
            </param>
            <returns>
            The part of the original string that precedes the first occurrence of a given <paramref name="value"/>, or
            the original string if the <paramref name="value"/> was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeBeforeFirst(System.String,System.String,System.Int32)">
            <summary>
            Takes the part of a string that precedes the first occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <param name="startIndex">
            The index to start the searching from.
            </param>
            <returns>
            The part of the original string that precedes the first occurrence of a given <paramref name="value"/>, or
            the original string if the <paramref name="value"/> was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="startIndex"/> specifies a position that is greater than the length of the string <paramref name="str"/>,
            or is less than zero.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeBeforeFirst(System.String,System.String)">
            <summary>
            Takes the part of a string that precedes the first occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <returns>
            The part of the original string that precedes the first occurrence of a given <paramref name="value"/>, or
            the original string if the <paramref name="value"/> was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeBeforeFirst(System.String,System.Char,System.Int32)">
            <summary>
            Takes the part of a string that precedes the first occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <param name="startIndex">
            The index to start the searching from.
            </param>
            <returns>
            The part of the original string that precedes the first occurrence of a given <paramref name="value"/>, or
            the original string if the <paramref name="value"/> was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="startIndex"/> specifies a position that is greater than the length of the string <paramref name="str"/>,
            or is less than zero.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeBeforeFirst(System.String,System.Char)">
            <summary>
            Takes the part of a string that precedes the first occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <returns>
            The part of the original string that precedes the first occurrence of a given <paramref name="value"/>, or
            the original string if the <paramref name="value"/> was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeBeforeLast(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Takes the part of a string that precedes the last occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <param name="startIndex">
            The index to start the searching from.
            </param>
            <param name="comparison">
            One of the <see cref="T:System.StringComparison"/> values, determining the string comparison method to be used for searching.
            </param>
            <returns>
            The part of the original string that precedes the last occurrence of a given <paramref name="value"/>, or
            the original string if the <paramref name="value"/> was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="startIndex"/> specifies a position that is greater than the length of the string <paramref name="str"/>,
            or is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeBeforeLast(System.String,System.String,System.StringComparison)">
            <summary>
            Takes the part of a string that precedes the last occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <param name="comparison">
            One of the <see cref="T:System.StringComparison"/> values, determining the string comparison method to be used for searching.
            </param>
            <returns>
            The part of the original string that precedes the last occurrence of a given <paramref name="value"/>, or
            the original string if the <paramref name="value"/> was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeBeforeLast(System.String,System.String,System.Int32)">
            <summary>
            Takes the part of a string that precedes the last occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <param name="startIndex">
            The index to start the searching from.
            </param>
            <returns>
            The part of the original string that precedes the last occurrence of a given <paramref name="value"/>, or
            the original string if the <paramref name="value"/> was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="startIndex"/> specifies a position that is greater than the length of the string <paramref name="str"/>,
            or is less than zero.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeBeforeLast(System.String,System.String)">
            <summary>
            Takes the part of a string that precedes the last occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <returns>
            The part of the original string that precedes the last occurrence of a given <paramref name="value"/>, or
            the original string if the <paramref name="value"/> was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeBeforeLast(System.String,System.Char,System.Int32)">
            <summary>
            Takes the part of a string that precedes the last occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.Char"/> value to cut the string by.
            </param>
            <param name="startIndex">
            The index to start the searching from.
            </param>
            <returns>
            The part of the original string that precedes the last occurrence of a given <paramref name="value"/>, or
            the original string if the <paramref name="value"/> was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="startIndex"/> specifies a position that is greater than the length of the string <paramref name="str"/>,
            or is less than zero.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeBeforeLast(System.String,System.Char)">
            <summary>
            Takes the part of a string that precedes the last occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.Char"/> value to cut the string by.
            </param>
            <returns>
            The part of the original string that precedes the last occurrence of a given <paramref name="value"/>, or
            the original string if the <paramref name="value"/> was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeAfterFirst(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Takes the part of a string that follows the first occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <param name="startIndex">
            The index to start the searching from.
            </param>
            <param name="comparison">
            One of the <see cref="T:System.StringComparison"/> values, determining the string comparison method to be used for searching.
            </param>
            <returns>
            The part of the original string that follows the first occurrence of a given <paramref name="value"/>, or
            <see cref="F:System.String.Empty">an empty string</see> if the <paramref name="value"/> was not found in the string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="startIndex"/> specifies a position that is greater than the length of the string <paramref name="str"/>,
            or is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeAfterFirst(System.String,System.String,System.StringComparison)">
            <summary>
            Takes the part of a string that follows the first occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <param name="comparison">
            One of the <see cref="T:System.StringComparison"/> values, determining the string comparison method to be used for searching.
            </param>
            <returns>
            The part of the original string that follows the first occurrence of a given <paramref name="value"/>, or
            <see cref="F:System.String.Empty">an empty string</see> if the <paramref name="value"/> was not found in the string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeAfterFirst(System.String,System.String)">
            <summary>
            Takes the part of a string that follows the first occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <returns>
            The part of the original string that follows the first occurrence of a given <paramref name="value"/>, or
            <see cref="F:System.String.Empty">an empty string</see> if the <paramref name="value"/> was not found in the string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeAfterFirst(System.String,System.String,System.Int32)">
            <summary>
            Takes the part of a string that follows the first occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <param name="startIndex">
            The index to start the searching from.
            </param>
            <returns>
            The part of the original string that follows the first occurrence of a given <paramref name="value"/>, or
            <see cref="F:System.String.Empty">an empty string</see> if the <paramref name="value"/> was not found in the string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="startIndex"/> specifies a position that is greater than the length of the string <paramref name="str"/>,
            or is less than zero.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeAfterFirst(System.String,System.Char)">
            <summary>
            Takes the part of a string that follows the first occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.Char"/> value to cut the string by.
            </param>
            <returns>
            The part of the original string that follows the first occurrence of a given <paramref name="value"/>, or
            <see cref="F:System.String.Empty">an empty string</see> if the <paramref name="value"/> was not found in the string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeAfterFirst(System.String,System.Char,System.Int32)">
            <summary>
            Takes the part of a string that follows the first occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.Char"/> value to cut the string by.
            </param>
            <param name="startIndex">
            The index to start the searching from.
            </param>
            <returns>
            The part of the original string that follows the first occurrence of a given <paramref name="value"/>, or
            <see cref="F:System.String.Empty">an empty string</see> if the <paramref name="value"/> was not found in the string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="startIndex"/> specifies a position that is greater than the length of the string <paramref name="str"/>,
            or is less than zero.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeAfterLast(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Takes the part of a string that follows the last occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <param name="startIndex">
            The index to start the searching from.
            </param>
            <param name="comparison">
            One of the <see cref="T:System.StringComparison"/> values, determining the string comparison method to be used for searching.
            </param>
            <returns>
            The part of the original string that follows the last occurrence of a given <paramref name="value"/>, or
            <see cref="F:System.String.Empty">an empty string</see> if the <paramref name="value"/> was not found in the string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="startIndex"/> specifies a position that is greater than the length of the string <paramref name="str"/>,
            or is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeAfterLast(System.String,System.String,System.StringComparison)">
            <summary>
            Takes the part of a string that follows the last occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <param name="comparison">
            One of the <see cref="T:System.StringComparison"/> values, determining the string comparison method to be used for searching.
            </param>
            <returns>
            The part of the original string that follows the last occurrence of a given <paramref name="value"/>, or
            <see cref="F:System.String.Empty">an empty string</see> if the <paramref name="value"/> was not found in the string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeAfterLast(System.String,System.String)">
            <summary>
            Takes the part of a string that follows the last occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <returns>
            The part of the original string that follows the last occurrence of a given <paramref name="value"/>, or
            <see cref="F:System.String.Empty">an empty string</see> if the <paramref name="value"/> was not found in the string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeAfterLast(System.String,System.String,System.Int32)">
            <summary>
            Takes the part of a string that follows the last occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.String"/> value to cut the string by.
            </param>
            <param name="startIndex">
            The index to start the searching from.
            </param>
            <returns>
            The part of the original string that follows the last occurrence of a given <paramref name="value"/>, or
            <see cref="F:System.String.Empty">an empty string</see> if the <paramref name="value"/> was not found in the string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="startIndex"/> specifies a position that is greater than the length of the string <paramref name="str"/>,
            or is less than zero.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeAfterLast(System.String,System.Char,System.Int32)">
            <summary>
            Takes the part of a string that follows the last occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.Char"/> value to cut the string by.
            </param>
            <param name="startIndex">
            The index to start the searching from.
            </param>
            <returns>
            The part of the original string that follows the last occurrence of a given <paramref name="value"/>, or
            <see cref="F:System.String.Empty">an empty string</see> if the <paramref name="value"/> was not found in the string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="startIndex"/> specifies a position that is greater than the length of the string <paramref name="str"/>,
            or is less than zero.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TakeAfterLast(System.String,System.Char)">
            <summary>
            Takes the part of a string that follows the last occurrence of a given <paramref name="value"/>.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The <see cref="T:System.Char"/> value to cut the string by.
            </param>
            <returns>
            The part of the original string that follows the last occurrence of a given <paramref name="value"/>, or
            <see cref="F:System.String.Empty">an empty string</see> if the <paramref name="value"/> was not found in the string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TrimStart(System.String,System.String,System.StringComparison)">
            <summary>
            Removes the leading occurrence of a given string <paramref name="value"/> from a target <see cref="T:System.String"/> instance.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The string value to be cut.
            </param>
            <param name="comparison">
            One of the <see cref="T:System.StringComparison"/> values, determining the string comparison method to be used for searching.
            </param>
            <returns>
            The string without the passed <paramref name="value"/> at the end, if found; otherwise the original string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TrimStart(System.String,System.String)">
            <summary>
            Removes the leading occurrence of a given string <paramref name="value"/> from a target <see cref="T:System.String"/> instance.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The string value to be cut.
            </param>
            <returns>
            The string without the passed <paramref name="value"/> at the end, if found; otherwise the original string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TrimEnd(System.String,System.String,System.StringComparison)">
            <summary>
            Removes the trailing occurrence of a given string <paramref name="value"/> from a target <see cref="T:System.String"/> instance.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The string value to be cut.
            </param>
            <param name="comparison">
            One of the <see cref="T:System.StringComparison"/> values, determining the string comparison method to be used for searching.
            </param>
            <returns>
            The string without the passed <paramref name="value"/> at the end, if found; otherwise the original string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.TrimEnd(System.String,System.String)">
            <summary>
            Removes the trailing occurrence of a given string <paramref name="value"/> from a target <see cref="T:System.String"/> instance.
            </summary>
            <param name="str">
            The target <see cref="T:System.String"/> instance this extension method is called on.
            </param>
            <param name="value">
            The string value to be cut.
            </param>
            <returns>
            The string without the passed <paramref name="value"/> at the end, if found; otherwise the original string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="str"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Extensions.String.StringExtensions.Intern(System.String)">
            <summary>
            Retrieves the system's reference for the specified string.
            </summary>
            <param name="str">A <see cref="T:System.String"/> to search for in the intern pool.</param>
            <returns>
            The system's reference to <paramref name="str"/>, if it is interned; otherwise, a new reference to a
            <see cref="T:System.String"/> with the value of <paramref name="str"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="str"/> is <c>null</c>.
            </exception>
            <seealso cref="M:System.String.Intern(System.String)"/>
        </member>
        <member name="T:Axle.Extensions.Uri.UriExtensions">
            <summary>
            A <see langword="static"/> class containing common extension 
            methods to <see cref="N:Axle.Extensions.Uri"/> instances.
            </summary>
        </member>
        <member name="F:Axle.Extensions.Uri.UriExtensions.UriSchemeAssembly">
            <summary>
            The uri scheme for accessing resources embedded into an assembly. 
            Similar to the <see cref="F:Axle.Extensions.Uri.UriExtensions.UriSchemeResource"/> but requires the assemby <em>name</em> 
            to be provided as a host of the <see cref="N:Axle.Extensions.Uri"/>.
            </summary>
        </member>
        <member name="F:Axle.Extensions.Uri.UriExtensions.UriSchemeResource">
            <summary>
            The uri scheme for accessing resources embedded into an assembly. 
            Similar to the <see cref="F:Axle.Extensions.Uri.UriExtensions.UriSchemeAssembly"/> but requires the assemby <em>file name</em>
            to be provided as a host of the <see cref="N:Axle.Extensions.Uri"/>.
            </summary>
        </member>
        <member name="F:Axle.Extensions.Uri.UriExtensions.UriSchemeHttp">
            <summary>
            The uri scheme for the http protocol.
            </summary>
        </member>
        <member name="F:Axle.Extensions.Uri.UriExtensions.UriSchemeHttps">
            <summary>
            The uri scheme for the https (secure http) protocol.
            </summary>
        </member>
        <member name="F:Axle.Extensions.Uri.UriExtensions.UriSchemeFile">
            <summary>
            The uri scheme for a file system location.
            </summary>
        </member>
        <member name="F:Axle.Extensions.Uri.UriExtensions.UriSchemeFtp">
            <summary>
            The uri scheme for ftp location.
            </summary>
        </member>
        <member name="M:Axle.Extensions.Uri.UriExtensions.IsFile(System.Uri)">
            <summary>
            Determines if a given <see cref="T:System.Uri">URI</see> references a file on the file system.
            The check is done against the <see cref="T:System.Uri">URI</see>'s scheme, expecting it to be <c>file://</c>
            </summary>
            <param name="uri">The <see cref="T:System.Uri">URI</see> to check.</param>
            <returns>
            <c>true</c> if the given <see cref="T:System.Uri">URI</see> references a file on the file system;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Extensions.Uri.UriExtensions.IsFtp(System.Uri)">
            <summary>
            Determines if a given <see cref="T:System.Uri">URI</see> references a resource over FTP connection.
            The check is done against the <see cref="T:System.Uri">URI</see>'s scheme, expecting it to be <c>ftp://</c>
            </summary>
            <param name="uri">The <see cref="T:System.Uri">URI</see> to check.</param>
            <returns>
            <c>true</c> if the given <see cref="T:System.Uri">URI</see> references a resource over FTP connection;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Extensions.Uri.UriExtensions.IsHttp(System.Uri)">
            <summary>
            Determines if a given <see cref="T:System.Uri">URI</see> references a resource over HTTP connection.
            The check is done against the <see cref="T:System.Uri">URI</see>'s scheme, expecting it to be <c>http://</c>
            </summary>
            <param name="uri">The <see cref="T:System.Uri">URI</see> to check.</param>
            <returns>
            <c>true</c> if the given <see cref="T:System.Uri">URI</see> references a resource over HTTP connection;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Extensions.Uri.UriExtensions.IsSecureHttp(System.Uri)">
            <summary>
            Determines if a given <see cref="T:System.Uri">URI</see> references a resource over HTTPS connection.
            The check is done against the <see cref="T:System.Uri">URI</see>'s scheme, expecting it to be <c>https://</c>
            </summary>
            <param name="uri">The <see cref="T:System.Uri">URI</see> to check.</param>
            <returns>
            <c>true</c> if the given <see cref="T:System.Uri">URI</see> references a resource over HTTPS connection;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Extensions.Uri.UriExtensions.IsResource(System.Uri)">
            <summary>
            Determines if a given <see cref="T:System.Uri">URI</see> references an embedded resource.
            The check is done against the <see cref="T:System.Uri">URI</see>'s scheme, expecting it to be <c>res://</c>
            </summary>
            <param name="uri">The <see cref="T:System.Uri">URI</see> to check.</param>
            <returns>
            <c>true</c> if the given <see cref="T:System.Uri">URI</see> references an embedded resource;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Extensions.Uri.UriExtensions.IsAssembly(System.Uri)">
            <summary>
            Determines if a given <see cref="T:System.Uri">URI</see> references an embedded resource.
            The check is done against the <see cref="T:System.Uri">URI</see>'s scheme, expecting it to be <c>assembly://</c>
            </summary>
            <param name="uri">The <see cref="T:System.Uri">URI</see> to check.</param>
            <returns>
            <c>true</c> if the given <see cref="T:System.Uri">URI</see> references an embedded resource;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Extensions.Uri.UriExtensions.IsEmbeddedResource(System.Uri)">
            <summary>
            Determines if a given <see cref="T:System.Uri">URI</see> references an embedded resource.
            The check is done against the <see cref="T:System.Uri">URI</see>'s scheme, expecting it to be
            <c>assembly://</c> or <c>res://</c>
            </summary>
            <param name="uri">The <see cref="T:System.Uri">URI</see> to check.</param>
            <returns>
            <c>true</c> if the given <see cref="T:System.Uri">URI</see> references an embedded resource;
            <c>false</c> otherwise.
            </returns>
            <seealso cref="M:Axle.Extensions.Uri.UriExtensions.IsResource(System.Uri)"/>
            <seealso cref="M:Axle.Extensions.Uri.UriExtensions.IsAssembly(System.Uri)"/>
            <seealso cref="F:Axle.Extensions.Uri.UriExtensions.UriSchemeResource"/>
            <seealso cref="F:Axle.Extensions.Uri.UriExtensions.UriSchemeAssembly"/>
        </member>
        <member name="M:Axle.Extensions.Uri.UriExtensions.ChangeScheme(System.Uri,System.String)">
            <summary>
            Creates a new <see cref="T:System.Uri">URI</see> using the address of an existing <see cref="T:System.Uri">URI</see>,
            but with a different <see cref="P:System.Uri.Scheme">scheme</see>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri">URI</see> form which the address will be taken. </param>
            <param name="scheme">The schema to be used for the new <see cref="T:System.Uri">URI</see>.</param>
            <returns>
            A new <see cref="T:System.Uri">URI</see> using the address of an existing <see cref="N:Axle.Extensions.Uri">URI</see>,
            that uses the <see cref="P:System.Uri.Scheme">scheme</see> provided by the <paramref name="scheme"/> parameter.
            </returns>
        </member>
        <member name="M:Axle.Extensions.Uri.UriExtensions.Resolve(System.Uri,System.Uri)">
            <summary>
            Resolves an absolute <see cref="T:System.Uri">URI</see> instance based on the combination of a base
            <see cref="T:System.Uri">URI</see> and a relative <see cref="T:System.Uri">URI</see>.
            </summary>
            <param name="uri">
            The base <see cref="T:System.Uri">URI</see>
            </param>
            <param name="other">
            The relative <see cref="T:System.Uri">URI</see> to be combined with <paramref name="uri"/>
            </param>
            <returns>
            An absolute <see cref="T:System.Uri">URI</see> instance based on the combination of a base
            <see cref="T:System.Uri">URI</see> and a relative <see cref="T:System.Uri">URI</see>.
            </returns>
            <remarks>
            This method will immediately return the <paramref name="other"/> in case it represents an
            <see cref="P:System.Uri.IsAbsoluteUri">absolute</see> URI
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="uri" /> is not an absolute <see cref="T:System.Uri" /> instance.
            </exception>
            <exception cref="T:System.UriFormatException">
            The URI formed by combining <paramref name="uri" /> and <paramref name="other" /> is empty or contains only
            spaces.
            -or-
            The scheme specified in the URI formed by combining <paramref name="uri" /> and <paramref name="other" /> 
            is not valid.
            -or-
            The URI formed by combining <paramref name="uri" /> and <paramref name="other" /> contains too many 
            slashes.
            -or-
            The password specified in the URI formed by combining <paramref name="uri" /> and <paramref name="other" />
            is not valid.
            -or-
            The host name specified in the URI formed by combining <paramref name="uri" /> and 
            <paramref name="other" /> is not valid.
            -or-
            The file name specified in the URI formed by combining <paramref name="uri" /> and 
            <paramref name="other" /> is not valid.
            -or-
            The user name specified in the URI formed by combining <paramref name="uri" /> and 
            <paramref name="other" /> is not valid.
            -or-
            The host or authority name specified in the URI formed by combining <paramref name="uri" /> and 
            <paramref name="other" /> cannot be terminated by backslashes.
            -or-
            The port number specified in the URI formed by combining <paramref name="uri" /> and 
            <paramref name="other" /> is not valid or cannot be parsed.
            -or-
            The length of the URI formed by combining <paramref name="uri" /> and 
            <paramref name="other" /> exceeds 65519 characters.
            -or-
            The length of the scheme specified in the URI formed by combining <paramref name="uri" /> and 
            <paramref name="other" /> exceeds 1023 characters.
            -or-
            There is an invalid character sequence in the URI formed by combining <paramref name="uri" /> and 
            <paramref name="other" />.
            -or-
            The MS-DOS path specified in <paramref name="uri" /> must start with <c>c:\</c>.
            </exception>
        </member>
        <member name="M:Axle.Extensions.Uri.UriExtensions.Resolve(System.Uri,System.String)">
            <summary>
            Resolves an absolute <see cref="T:System.Uri">URI</see> instance based on the combination of a base
            <see cref="T:System.Uri">URI</see> and a relative <see cref="T:System.Uri">URI</see>.
            </summary>
            <param name="uri">The base <see cref="T:System.Uri">URI</see></param>
            <param name="other">A string representation of the relative <see cref="T:System.Uri">URI</see>
            to be combined with <paramref name="uri"/></param>
            <returns>
            An absolute <see cref="T:System.Uri">URI</see> instance based on the combination of
            a base <see cref="T:System.Uri">URI</see> and a relative <see cref="T:System.Uri">URI</see>.
            </returns>
            <remarks>
            This method will immediately return the <paramref name="other"/> in case it represents an
            <see cref="P:System.Uri.IsAbsoluteUri">absolute</see> URI.
            </remarks>
        </member>
        <member name="M:Axle.Extensions.Uri.UriExtensions.GetQueryParameters(System.Uri)">
            <summary>
            Gets a dictionary of key-value pairs representing the query parameters of the given <paramref name="uri"/>.
            </summary>
            <param name="uri">
            The <see cref="N:Axle.Extensions.Uri"/> instance to get the query parameters from.
            </param>
            <returns>
            A dictionary of key-value pairs representing the query parameters of the given <paramref name="uri"/>.
            </returns>
        </member>
        <member name="T:Axle.Globalization.CultureScope">
            <summary>
            Represents a disposable scope, which allows changing the current culture/ui culture of the executing thread to the 
            respective <see cref="P:Axle.Globalization.CultureScope.Culture"/> and <see cref="P:Axle.Globalization.CultureScope.UICulture"/> throughout its lifetine. 
            Upon disposing, the culture settings prior initializing the scope are rolled back.
            </summary>
        </member>
        <member name="M:Axle.Globalization.CultureScope.Create(System.Globalization.CultureInfo)">
            <summary>
            Creates a new <see cref="T:Axle.Globalization.CultureScope"/> instance using the specified <paramref name="culture"/>.
            </summary>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo">culture</see> to be set as default culture and UI culture by the newly created <see cref="T:Axle.Globalization.CultureScope">culture scope</see>.
            </param>
            <returns>
            A new <see cref="T:Axle.Globalization.CultureScope"/> instance.
            </returns>
        </member>
        <member name="M:Axle.Globalization.CultureScope.Create(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Creates a new <see cref="T:Axle.Globalization.CultureScope"/> instance using the specified <paramref name="culture"/> and <paramref name="uiCulture">UI culture</paramref>.
            </summary>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo">culture</see> to be set as default culture by the newly created <see cref="T:Axle.Globalization.CultureScope">culture scope</see>.
            </param>
            <param name="uiCulture">
            The <see cref="T:System.Globalization.CultureInfo">culture</see> to be set as default UI culture by the newly created <see cref="T:Axle.Globalization.CultureScope">culture scope</see>.
            </param>
            <returns>
            A new <see cref="T:Axle.Globalization.CultureScope"/> instance.
            </returns>
        </member>
        <member name="M:Axle.Globalization.CultureScope.Create(System.String)">
            <summary>
            Creates a new <see cref="T:Axle.Globalization.CultureScope"/> instance using the specified <paramref name="culture"/>.
            </summary>
            <param name="culture">
            The name for the <see cref="T:System.Globalization.CultureInfo">culture</see> to be set as default culture and UI culture by the newly created <see cref="T:Axle.Globalization.CultureScope">culture scope</see>.
            </param>
            <returns>
            A new <see cref="T:Axle.Globalization.CultureScope"/> instance.
            </returns>
        </member>
        <member name="M:Axle.Globalization.CultureScope.Create(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Axle.Globalization.CultureScope"/> instance using the specified <paramref name="culture"/> and <paramref name="uiCulture">UI culture</paramref>.
            </summary>
            <param name="culture">
            The name of the <see cref="T:System.Globalization.CultureInfo">culture</see> to be set as default culture by the newly created <see cref="T:Axle.Globalization.CultureScope">culture scope</see>.
            </param>
            <param name="uiCulture">
            The name of the <see cref="T:System.Globalization.CultureInfo">culture</see> to be set as default UI culture by the newly created <see cref="T:Axle.Globalization.CultureScope">culture scope</see>.
            </param>
            <returns>
            A new <see cref="T:Axle.Globalization.CultureScope"/> instance.
            </returns>
        </member>
        <member name="M:Axle.Globalization.CultureScope.CreateInvariant">
            <summary>
            Creates a new <see cref="T:Axle.Globalization.CultureScope"/> instance using an invariant <see cref="T:System.Globalization.CultureInfo">culture</see>.
            </summary>
            <returns>
            A new <see cref="T:Axle.Globalization.CultureScope"/> instance.
            </returns>
        </member>
        <member name="P:Axle.Globalization.CultureScope.CurrentCulture">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo">culture</see> for the current <see cref="T:Axle.Globalization.CultureScope">culture scope</see>.
            </summary>
        </member>
        <member name="P:Axle.Globalization.CultureScope.CurrentUICulture">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo">culture</see> for the current <see cref="T:Axle.Globalization.CultureScope">culture scope</see>.
            </summary>
        </member>
        <member name="P:Axle.Globalization.CultureScope.Culture">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo">culture</see> that the current <see cref="T:Axle.Globalization.CultureScope">culture scope</see> was initialized with.
            </summary>
        </member>
        <member name="P:Axle.Globalization.CultureScope.UICulture">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo">UI culture</see> that the current <see cref="T:Axle.Globalization.CultureScope">culture scope</see> was initialized with.
            </summary>
        </member>
        <member name="M:Axle.Globalization.CultureScope.Dispose">
            <summary>
            Disposes the current <see cref="T:Axle.Globalization.CultureScope"/> instance and attempts to 
            reset the <see cref="P:System.Threading.Thread.CurrentCulture"/> and the
            <see cref="P:System.Threading.Thread.CurrentUICulture"/> properties to their values prior creating the scope.
            </summary>
        </member>
        <member name="T:Axle.Globalization.Extensions.CultureInfo.CultureInfoExtensions">
            <summary>
            A <see langword="static"/> class providing extension methods to 
            <see cref="T:System.Globalization.CultureInfo"/> instances.
            </summary>
        </member>
        <member name="M:Axle.Globalization.Extensions.CultureInfo.CultureInfoExtensions.ExpandHierarchy(System.Globalization.CultureInfo)">
            <summary>
            Returns a collection of <see cref="T:System.Globalization.CultureInfo" /> instances that include the current culture and all parent cultures.
            The cultures are ordered by their level of relation, starting from the culture specified by the <paramref name="culture"/> parameter
            and continuing with its parent culture. The resulting list should represent the natural culture fallback order that occurs during localization.
            </summary>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo">culture</see> instance to expand.</param>
            <returns>A collection of <see cref="T:System.Globalization.CultureInfo" /> instances that include the current culture and its parent cultures.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="culture"/> is <c>null</c></exception>
            <example>
            For instance, if we take the culture <c>bg-BG</c> (The Bulgarian official culture), the method will return the following list of culture objects:
            <list type="bullet">
              <item>
                <term>bg-BG</term>  
                <description>
                <para>
                Identical to the culture we have called the method on. Indeed, in terms of culture definition in .NET
                this one has both country and language identifiers, making it the most-concrete of the ones listed.
                </para>
                </description>  
              </item>
              <item>
                <term>bg</term>  
                <description>
                <para>
                The parent of the above culture, including only the language identifier.
                </para>
                </description>  
              </item>
              <item>
                <term><see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see></term>
                <description>
                <para>
                A reference to an <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see> object, which is the ultimate parent for all culture instances.
                </para>
                </description>  
              </item>
            </list>
            If we called the method on the culture <c>en</c> we will receive the following list: 
            <list type="bullet">
              <item>
                <term>en</term>
                <description>
                <para>
                Again the instance we called the method on
                </para>
                </description>
              </item>
              <item>
                <term><see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see></term>
                <description>
                <para>
                The only parent here is the <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see> object, as culture <c>en</c> has only the language qualifier.
                </para>
                </description>
              </item>
            </list>
            </example>
        </member>
        <member name="T:Axle.Globalization.Extensions.TextInfo.TextInfoExtensions">
            <summary>
            A <see langword="static"/> class providing extension methods for 
            <see cref="T:System.Globalization.TextInfo"/> instances.
            </summary>
        </member>
        <member name="M:Axle.Globalization.Extensions.TextInfo.TextInfoExtensions.GetOemEncoding(System.Globalization.TextInfo)">
            <summary>
            Gets the encoding for the OEM code page of the writing system represented by the current <see cref="T:System.Globalization.TextInfo"/>. 
            </summary>
            <param name="textInfo">
            The <see cref="T:System.Globalization.TextInfo"/> instance to get the encoding for. 
            </param>
            <returns>
            A reference to the encoding for the OEM code page of the writing system represented by the current <see cref="T:System.Globalization.TextInfo"/>. 
            </returns>
            <seealso cref="P:System.Globalization.TextInfo.OEMCodePage"/>
        </member>
        <member name="M:Axle.Globalization.Extensions.TextInfo.TextInfoExtensions.GetEbcdicEncoding(System.Globalization.TextInfo)">
            <summary>
            Gets the encoding for the EBCDIC codepage of the writing system represented by the current <see cref="T:System.Globalization.TextInfo"/>. 
            </summary>
            <param name="textInfo">
            The <see cref="T:System.Globalization.TextInfo"/> instance to get the encoding for. 
            </param>
            <returns>
            A reference to the encoding for the EBCDIC codepage of the writing system represented by the current <see cref="T:System.Globalization.TextInfo"/>. 
            </returns>
            <seealso cref="P:System.Globalization.TextInfo.EBCDICCodePage"/>
        </member>
        <member name="M:Axle.Globalization.Extensions.TextInfo.TextInfoExtensions.GetAnsiEncoding(System.Globalization.TextInfo)">
            <summary>
            Gets the encoding for the ANSI codepage of the writing system represented by the current <see cref="T:System.Globalization.TextInfo"/>. 
            </summary>
            <param name="textInfo">
            The <see cref="T:System.Globalization.TextInfo"/> instance to get the encoding for. 
            </param>
            <returns>
            A reference to the encoding for the ANSI codepage of the writing system represented by the current <see cref="T:System.Globalization.TextInfo"/>. 
            </returns>
            <seealso cref="P:System.Globalization.TextInfo.ANSICodePage"/>
        </member>
        <member name="M:Axle.Globalization.Extensions.TextInfo.TextInfoExtensions.GetMacEncoding(System.Globalization.TextInfo)">
            <summary>
            Gets the encoding for the Mac codepage of the writing system represented by the current <see cref="T:System.Globalization.TextInfo"/>. 
            </summary>
            <param name="textInfo">
            The <see cref="T:System.Globalization.TextInfo"/> instance to get the encoding for. 
            </param>
            <returns>
            A reference to the encoding for the Mac codepage of the writing system represented by the current <see cref="T:System.Globalization.TextInfo"/>. 
            </returns>
            <seealso cref="P:System.Globalization.TextInfo.MacCodePage"/>
        </member>
        <member name="M:Axle.Globalization.Extensions.TextInfo.TextInfoExtensions.GetEncoding(System.Globalization.TextInfo)">
            <summary>
            Gets the default encoding for the writing system represented by the current <see cref="T:System.Globalization.TextInfo"/>. 
            This would be equal to encoding for the <see cref="P:System.Globalization.TextInfo.OEMCodePage"/> for non-invariant cultures.
            In case the current <see cref="T:System.Globalization.TextInfo"/> represents a culture-invariant writing system, this method
            returns <see cref="P:System.Text.Encoding.UTF8"/>. 
            </summary>
            <param name="textInfo">
            The <see cref="T:System.Globalization.TextInfo"/> instance to get the encoding for.
            </param>
            <returns>
            A reference to the default encoding for the writing system represented by the current <see cref="T:System.Globalization.TextInfo"/>. 
            This would be equal to encoding for the <see cref="P:System.Globalization.TextInfo.OEMCodePage"/> for non-invariant cultures.
            In case the current <see cref="T:System.Globalization.TextInfo"/> represents a culture-invariant writing system, this method
            returns <see cref="P:System.Text.Encoding.UTF8"/>.
            </returns>
            <seealso cref="T:System.Text.Encoding" />
            <seealso cref="T:System.Globalization.TextInfo"/>
            <seealso cref="P:System.Globalization.TextInfo.OEMCodePage" />
            <seealso cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            <exception cref="T:System.ArgumentNullException">
            <paramref name="textInfo"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Axle.IO.Extensions.BinaryReader.BinaryReaderExtensions">
            <summary>
            A static class providing extension methods to <see cref="T:System.IO.BinaryReader"/> instances.
            </summary>
        </member>
        <member name="M:Axle.IO.Extensions.BinaryReader.BinaryReaderExtensions.Seek(System.IO.BinaryReader,System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the <see cref="P:System.IO.BinaryReader.BaseStream">underlying stream</see> of the <see cref="T:System.IO.BinaryReader" />.
            </summary>
            <param name="reader">
            The <see cref="T:System.IO.BinaryReader" /> instance that owns the stream.
            </param>
            <param name="offset">
            A byte offset relative to the <paramref name="origin"/> parameter. 
            </param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. 
            </param>
            <returns>
            The new position within the <see cref="P:System.IO.BinaryReader.BaseStream">underlying stream</see> of the <see cref="T:System.IO.BinaryReader" />.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="P:System.IO.BinaryReader.BaseStream">underlying stream</see> of the <see cref="T:System.IO.BinaryReader" /> does not support seeking, 
            such as if the stream is constructed from a pipe or console output. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the <see cref="T:System.IO.BinaryReader" /> or its <see cref="P:System.IO.BinaryReader.BaseStream">underlying stream</see> were closed. 
            </exception>
            <seealso cref="T:System.IO.BinaryReader"/>
            <seealso cref="P:System.IO.BinaryReader.BaseStream"/>
            <seealso cref="T:System.IO.SeekOrigin"/>
        </member>
        <member name="T:Axle.IO.Extensions.BinaryWriter.BinaryWriterExtensions">
            <summary>
            A static class providing extension methods to <see cref="T:System.IO.BinaryWriter"/> instances.
            </summary>
        </member>
        <member name="M:Axle.IO.Extensions.BinaryWriter.BinaryWriterExtensions.Seek(System.IO.BinaryWriter,System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the <see cref="P:System.IO.BinaryWriter.BaseStream">underlying stream</see> of the <see cref="T:System.IO.BinaryWriter" />.
            </summary>
            <param name="writer">
            The <see cref="T:System.IO.BinaryWriter" /> instance that owns the stream. 
            </param>
            <param name="offset">
            A byte offset relative to the <paramref name="origin"/> parameter. 
            </param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. 
            </param>
            <returns>
            The new position within the <see cref="P:System.IO.BinaryWriter.BaseStream">underlying stream</see> of the <see cref="T:System.IO.BinaryWriter" />.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="P:System.IO.BinaryWriter.BaseStream">underlying stream</see> of the <see cref="T:System.IO.BinaryWriter" /> does not support seeking, 
            such as if the stream is constructed from a pipe or console output. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the <see cref="T:System.IO.BinaryWriter" /> or its <see cref="P:System.IO.BinaryWriter.BaseStream">underlying stream</see> were closed. 
            </exception>
            <seealso cref="T:System.IO.BinaryWriter"/>
            <seealso cref="P:System.IO.BinaryWriter.BaseStream"/>
            <seealso cref="T:System.IO.SeekOrigin"/>
        </member>
        <member name="T:Axle.IO.Extensions.StreamReader.StreamReaderExtensions">
            <summary>
            A static class providing extension methods to <see cref="T:System.IO.StreamReader"/> instances.
            </summary>
        </member>
        <member name="M:Axle.IO.Extensions.StreamReader.StreamReaderExtensions.Seek(System.IO.StreamReader,System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the <see cref="P:System.IO.StreamReader.BaseStream">underlying stream</see> of the <see cref="T:System.IO.StreamReader" />.
            </summary>
            <param name="reader">
            The <see cref="T:System.IO.StreamReader" /> instance that owns the stream. 
            </param>
            <param name="offset">
            A byte offset relative to the <paramref name="origin"/> parameter. 
            </param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. 
            </param>
            <returns>
            The new position within the <see cref="P:System.IO.StreamReader.BaseStream">underlying stream</see> of the <see cref="T:System.IO.StreamReader" />.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="P:System.IO.StreamReader.BaseStream">underlying stream</see> of the <see cref="T:System.IO.StreamReader" /> does not support seeking, 
            such as if the stream is constructed from a pipe or console output. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the <see cref="T:System.IO.StreamReader" /> or its <see cref="P:System.IO.StreamReader.BaseStream">underlying stream</see> were closed. 
            </exception>
            <seealso cref="T:System.IO.StreamReader"/>
            <seealso cref="P:System.IO.StreamReader.BaseStream"/>
            <seealso cref="T:System.IO.SeekOrigin"/>
        </member>
        <member name="T:Axle.IO.Extensions.StreamWriter.StreamWriterExtensions">
            <summary>
            A static class providing extension methods to <see cref="T:System.IO.StreamWriter"/> instances.
            </summary>
        </member>
        <member name="M:Axle.IO.Extensions.StreamWriter.StreamWriterExtensions.Seek(System.IO.StreamWriter,System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the <see cref="P:System.IO.StreamWriter.BaseStream">underlying stream</see> of the <see cref="T:System.IO.StreamWriter" />.
            </summary>
            <param name="writer">
            The <see cref="T:System.IO.StreamWriter" /> instance that owns the stream.
            </param>
            <param name="offset">
            A byte offset relative to the <paramref name="origin"/> parameter. 
            </param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. 
            </param>
            <returns>
            The new position within the <see cref="P:System.IO.StreamWriter.BaseStream">underlying stream</see> of the <see cref="T:System.IO.StreamWriter" />.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="P:System.IO.StreamWriter.BaseStream">underlying stream</see> of the <see cref="T:System.IO.StreamWriter" /> does not support seeking, 
            such as if the stream is constructed from a pipe or console output. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the <see cref="T:System.IO.StreamWriter" /> or its <see cref="P:System.IO.StreamWriter.BaseStream">underlying stream</see> were closed. 
            </exception>
            <seealso cref="T:System.IO.StreamWriter"/>
            <seealso cref="P:System.IO.StreamWriter.BaseStream"/>
            <seealso cref="T:System.IO.SeekOrigin"/>
        </member>
        <member name="T:Axle.IO.Extensions.Stream.Fluent.FluentStreamExtensions">
            <summary>
            A static class providing extension methods to <see cref="T:System.IO.Stream"/> instances.
            </summary>
        </member>
        <member name="M:Axle.IO.Extensions.Stream.Fluent.FluentStreamExtensions.FluentFlush(System.IO.Stream)">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be 
            written to the underlying device.
            </summary>
            <param name="stream">
            The target <see cref="T:System.IO.Stream"/> instance this extension method is being called on.
            </param>
            <returns>
            A reference to the target <see cref="T:System.IO.Stream"/> instance this extension method is being called on.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs. 
            </exception> 
        </member>
        <member name="M:Axle.IO.Extensions.Stream.Fluent.FluentStreamExtensions.FluentSeek(System.IO.Stream,System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="stream">
            The target <see cref="T:System.IO.Stream"/> instance this extension method is being called on.
            </param>
            <param name="offset">
            A byte offset relative to the origin parameter. 
            </param>
            <param name="seekOrigin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.
            </param>
            <returns>
            A reference to the target <see cref="T:System.IO.Stream"/> instance this extension method is being called on.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from a pipe or console output.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="M:Axle.IO.Extensions.Stream.Fluent.FluentStreamExtensions.FluentSeek(System.IO.Stream,System.Int64,System.IO.SeekOrigin,System.Int64@)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="stream">
            The target <see cref="T:System.IO.Stream"/> instance this extension method is being called on.
            </param>
            <param name="offset">
            A byte offset relative to the origin parameter. 
            </param>
            <param name="seekOrigin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.
            </param>
            <param name="position">
            An output parameter to contain the current position in the current stream.
            </param>
            <returns>
            A reference to the target <see cref="T:System.IO.Stream"/> instance this extension method is being called on.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream" /> is <c>null</c>. </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from a pipe or console output. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed. 
            </exception>
        </member>
        <member name="T:Axle.IO.Extensions.Stream.StreamExtensions">
            <summary>
            A static class providing extension methods to  instances of the <see cref="T:System.IO.Stream"/> class.
            </summary>
        </member>
        <member name="M:Axle.IO.Extensions.Stream.StreamExtensions.Allocate(System.IO.Stream,System.Int32)">
            <summary>
            Allocates a specified number of bytes from the current position of the target <paramref name="stream"/>.
            <remarks>
            Any existing data within the current allocation range will be lost.
            </remarks>
            </summary>
            <param name="stream">
            The target stream to allocate bytes to. 
            </param>
            <param name="length">
            The number of bytes to be allocated. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if the current <paramref name="stream"/> does not support seeking or writing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed. 
            </exception>
        </member>
        <member name="M:Axle.IO.Extensions.Stream.StreamExtensions.Dump(System.IO.Stream)">
            <summary>
            Writes the contents of the provided <paramref name="stream"/> to a temporary file.
            </summary>
            <param name="stream">
            The stream object to dump.
            </param>
            <returns>
            A <see cref="T:Axle.IO.TemporaryStreamDump"/> instance pointing to the file containing the dumped data.
            </returns>
            <seealso cref="T:Axle.IO.TemporaryStreamDump"/>
            <seealso cref="M:Axle.IO.TemporaryStreamDump.Dump(System.IO.Stream,System.Boolean)"/>
        </member>
        <member name="M:Axle.IO.Extensions.Stream.StreamExtensions.DumpTo(System.IO.Stream,System.String)">
            <summary>
            Writes the contents of the target <paramref name="stream"/> to a temporary file in the given <paramref name="location"/>.
            </summary>
            <param name="stream">
            The stream object to dump.
            </param>
            <param name="location">
            The location of the file to dump the stream into.
            </param>
            <returns>
            A <see cref="T:Axle.IO.TemporaryStreamDump"/> instance pointing to the file containing the dumped data.
            </returns>
            <seealso cref="T:Axle.IO.TemporaryStreamDump"/>
            <seealso cref="M:Axle.IO.TemporaryStreamDump.Dump(System.IO.Stream,System.String,System.Boolean)"/>
        </member>
        <member name="M:Axle.IO.Extensions.Stream.StreamExtensions.SeekToBeginning(System.IO.Stream)">
            <summary>
            Sets the position of the target <paramref name="stream"/> to its start. The call is equivalent to the following code:
            <code>stream.Seek(0, SeekOrigin.Begin)</code>
            </summary>
            <param name="stream">
            The target stream to set position to. 
            </param>
            <returns>
            A reference to the target stream object so that continued chain calls can be made to it.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from a pipe or console output. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed. 
            </exception>
        </member>
        <member name="M:Axle.IO.Extensions.Stream.StreamExtensions.SeekToEnd(System.IO.Stream)">
            <summary>
            Sets the position of the target <paramref name="stream"/> to its end. The call is equivalent to the following code:
            <code>stream.Seek(0, SeekOrigin.End)</code>
            </summary>
            <param name="stream">
            The target stream to set position to. 
            </param>
            <returns>
            A reference to the target stream object so that continued chain calls can be made to it.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from a pipe or console output. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed. 
            </exception>
        </member>
        <member name="M:Axle.IO.Extensions.Stream.StreamExtensions.ToByteArray(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Converts the contents of a <see cref="T:System.IO.Stream"/> instance to an array of bytes.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream">stream</see> to convert.
            </param>
            <param name="bufferSize">
            An integer value determining the size of the buffer used for reading from the stream.
            </param>
            <param name="leaveOpen">
            A <see cref="T:System.Boolean">boolean</see> flag indicating whether to leave the stream open or not. 
            </param>
            <returns>
            An array of <see cref="T:System.Byte"/> values representing the contents of the <paramref name="stream"/>.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from a pipe or console output. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bufferSize"/> is not a positive number.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed. 
            </exception>
        </member>
        <member name="M:Axle.IO.Extensions.Stream.StreamExtensions.ToByteArray(System.IO.Stream,System.Boolean)">
            <summary>
            Converts the contents of a <see cref="T:System.IO.Stream"/> instance to an array of bytes.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream">stream</see> to convert.
            </param>
            <param name="leaveOpen">
            A <see cref="T:System.Boolean">boolean</see> flag indicating whether to leave the stream open or not. 
            </param>
            <returns>
            An array of <see cref="T:System.Byte"/> values representing the contents of the <paramref name="stream"/>.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from a pipe or console output. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed. 
            </exception>
        </member>
        <member name="M:Axle.IO.Extensions.Stream.StreamExtensions.ToByteArray(System.IO.Stream,System.Int32)">
            <summary>
            Converts the contents of a <see cref="T:System.IO.Stream"/> instance to an array of bytes.
            <remarks>
            This method will not close the <paramref name="stream"/>.
            </remarks>
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream">stream</see> to convert.
            </param>
            <param name="bufferSize">
            An integer value determining the size of the buffer used for reading from the stream.
            </param>
            <returns>
            An array of <see cref="T:System.Byte"/> values representing the contents of the <paramref name="stream"/>.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from a pipe or console output. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed. 
            </exception>
        </member>
        <member name="M:Axle.IO.Extensions.Stream.StreamExtensions.ToByteArray(System.IO.Stream)">
            <summary>
            Converts the contents of a <see cref="T:System.IO.Stream"/> instance to an array of bytes.
            <remarks>
            This method will not close the <paramref name="stream"/>.
            </remarks>
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream">stream</see> to convert.</param>
            <returns>
            An array of <see cref="T:System.Byte"/> values representing the contents of the <paramref name="stream"/>.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from a pipe or console output. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Axle.IO.Extensions.Stream.StreamExtensions.WriteTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Writes data to an output target using the specified input target and buffer size.
            <remarks>
            The data is being read from the input target's current position.
            </remarks>
            </summary>
            <param name="stream">
            The stream to read data from.
            </param>
            <param name="target">
            The target to write data to.
            </param>
            <param name="bufferSize">
            The size of the buffer (byte array) that will be used for writing.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The current input target does not support reading.</para>
            -- OR --
            <para>The specified output target does not support writing.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The output target and the input target are the same instance.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Parameter <paramref name="bufferSize"/> is not a positive number. 
            </exception>
        </member>
        <member name="M:Axle.IO.Extensions.Stream.StreamExtensions.WriteTo(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Writes data to an output target using the specified input target and buffer size.
            <remarks>
            The data is being read from the input target's current position.
            </remarks>
            </summary>
            <param name="stream">
            The stream to read data from.
            </param>
            <param name="target">
            The target to write data to.
            </param>
            <param name="buffer">
            A byte array to be used the buffer for the write operation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The current input target does not support reading.</para>
            -- OR --
            <para>The specified output target does not support writing.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The output target and the input target are the same instance.
            </exception>
        </member>
        <member name="T:Axle.IO.Serialization.BinarySerializer">
            <summary>
            An <see cref="T:Axle.IO.Serialization.ISerializer"/> implementation that uses the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter">binary formatter</see>
            that is built-in within the .NET framework.
            </summary>
            <seealso cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>
        </member>
        <member name="M:Axle.IO.Serialization.BinarySerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.IO.Serialization.BinarySerializer"/> class.
            </summary>
        </member>
        <member name="M:Axle.IO.Serialization.BinarySerializer.#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.IO.Serialization.BinarySerializer"/> class with a given 
            selector and streaming context.
            </summary>
            <param name="selector">
            The <see cref="T:System.Runtime.Serialization.ISurrogateSelector"/> to use. Can be <c>null</c>. 
            </param>
            <param name="context">
            The source and destination for the serialied data. 
            </param>
        </member>
        <member name="M:Axle.IO.Serialization.BinarySerializer.Deserialize(System.IO.Stream,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Axle.IO.Serialization.BinarySerializer.Deserialize(System.IO.Stream,System.Runtime.Remoting.Messaging.HeaderHandler)">
            <summary>
            Deserializes the specified <paramref name="stream"/> into an object graph. The provided header 
            <paramref name="handler"/> handles any headers present in the stream.
            </summary>
            <param name="stream">
            The stream providing the data to deserialize.
            </param>
            <param name="handler">
            A <see cref="T:System.Runtime.Remoting.Messaging.HeaderHandler"/> instance.
            </param>
            <returns>
            An object instance representing the deserialized result.
            </returns>
        </member>
        <member name="M:Axle.IO.Serialization.BinarySerializer.Serialize(System.Object,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Axle.IO.Serialization.BinarySerializer.Serialize(System.Object,System.IO.Stream,System.Runtime.Remoting.Messaging.Header[])">
            <summary>
            Serializes an object <paramref name="graph"/> into the specified <paramref name="stream"/>, 
            attaching the provided <paramref name="headers"/>.
            </summary>
            <param name="graph">
            The object to be serialized.
            </param>
            <param name="stream">
            The target <paramref name="stream"/> to serialize the object to.
            </param>
            <param name="headers">
            Remoting headers to include in the serialization. Can be <c><see langword="null"/></c>.
            </param>
        </member>
        <member name="P:Axle.IO.Serialization.BinarySerializer.Formatter">
            <summary>
            Gets a reference to the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> instance that is used to serialize 
            and deserialize objects.
            </summary>
        </member>
        <member name="T:Axle.IO.Serialization.ISerializer">
            <summary>
            An interface representing a serializer; that is, an object that serializes and de-serializes objects.
            </summary>
        </member>
        <member name="M:Axle.IO.Serialization.ISerializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            Deserializes the contents of the given stream to an instance of the provided by the <paramref name="objectType"/> parameter type.
            </summary>
            <param name="stream">
            The stream containing the data to deserialize.
            </param>
            <param name="objectType">
            The type of the object to be deserialized.
            </param>
            <returns>
            An instance of the provided by the <paramref name="objectType"/> type as deserialized from the <paramref name="stream"/>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="stream"/> or <paramref name="objectType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.IO.Serialization.ISerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the provided by the <paramref name="obj"/> parameter object or graph of objects 
            to the target <paramref name="stream"/>. 
            </summary>
            <param name="obj">
            The object to be serialized.
            </param>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to serialize the object into.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="obj"/> or <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            An error has occurred durring the serialization process.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permissions.
            </exception>
        </member>
        <member name="T:Axle.IO.Serialization.JsonContractSerializer">
            <summary>
            An implementation of the <see cref="T:Axle.IO.Serialization.ISerializer"/> interface using <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer">data contract</see>
            serialization as the underlying implementation.
            </summary>
            <seealso cref="T:System.Runtime.Serialization.DataContractSerializer"/>
            <seealso cref="T:Axle.IO.Serialization.ISerializer"/>
        </member>
        <member name="M:Axle.IO.Serialization.JsonContractSerializer.Deserialize(System.IO.Stream,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Axle.IO.Serialization.JsonContractSerializer.Serialize(System.Object,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="T:Axle.IO.Serialization.XmlContractSerializer">
            <summary>
            An implementation of the <see cref="T:Axle.IO.Serialization.ISerializer"/> interface using <see cref="T:System.Runtime.Serialization.DataContractSerializer">data contract</see>
            serialization as the underlying implementation.
            </summary>
            <seealso cref="T:System.Runtime.Serialization.DataContractSerializer"/>
            <seealso cref="T:Axle.IO.Serialization.ISerializer"/>
        </member>
        <member name="M:Axle.IO.Serialization.XmlContractSerializer.Deserialize(System.IO.Stream,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Axle.IO.Serialization.XmlContractSerializer.Serialize(System.Object,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="T:Axle.IO.Serialization.XmlSerializer">
            <summary>
            Serializes and deserializes objects into and from XML documents. 
            <para>
            This <see cref="T:Axle.IO.Serialization.ISerializer"/> implementation uses <see cref="T:System.Xml.Serialization.XmlSerializer" /> for the 
            actual serialization and deserialization
            </para>
            </summary>
            <seealso cref="T:System.Xml.Serialization.XmlSerializer" />
            <seealso cref="T:Axle.IO.Serialization.ISerializer" />
        </member>
        <member name="M:Axle.IO.Serialization.XmlSerializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            Deserializes the XML document contained by the specified Stream. 
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> that contains the XML document to deserialize. 
            </param>
            <param name="objectType">
            The type of the object that the <paramref name="stream"/> will be deserialized to.
            </param>
            <returns>
            The <see cref="T:System.Object">object</see> being deserialized. 
            </returns>
        </member>
        <member name="M:Axle.IO.Serialization.XmlSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the specified object and writes the XML document to the specified stream. 
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to serialize. 
            </param>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> used to write the XML document. 
            </param>
        </member>
        <member name="T:Axle.IO.StorageInfo">
            <summary>
            A class to act as a wrapper of a filesystem storage. 
            </summary>
        </member>
        <member name="M:Axle.IO.StorageInfo.FromPath(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.IO.StorageInfo"/> class, representing a drive or directory location.
            </summary>
            <param name="path">
            The path representing a directory location.
            </param>
            <returns>
            A <see cref="T:Axle.IO.StorageInfo"/> instance, representing a drive or directory location.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> does not represent a directory location.
            </exception>
        </member>
        <member name="M:Axle.IO.StorageInfo.FromDirectory(System.IO.DirectoryInfo)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.IO.StorageInfo"/> class, representing a drive or directory location.
            </summary>
            <param name="directory">
            A <see cref="T:System.IO.DirectoryInfo"/> object to act as a storage.
            </param>
            <returns>
            A <see cref="T:Axle.IO.StorageInfo"/> instance, representing a drive or directory location.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="directory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.IO.StorageInfo.FromUri(System.Uri)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.IO.StorageInfo"/> class, representing a drive or directory location.
            </summary>
            <param name="uri">
            A <see cref="P:Axle.IO.StorageInfo.Uri"/> reference to a drive or directory to act as a storage space.
            </param>
            <returns>
            A <see cref="T:Axle.IO.StorageInfo"/> instance, representing a drive or directory location.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uri"/> does not represent a directory location.
            </exception>
        </member>
        <member name="M:Axle.IO.StorageInfo.Resolve(System.String)">
            <summary>
            Creates a <see cref="T:Axle.IO.StorageInfo"/> objects from the provided <paramref name="path"/>, relative to
            the current <see cref="T:Axle.IO.StorageInfo"/> location.
            </summary>
            <param name="path">
            A path, relative to the current <see cref="T:Axle.IO.StorageInfo"/> location.
            </param>
            <returns>
            A <see cref="T:Axle.IO.StorageInfo"/> instance, representing the provided location.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> does not represent a directory location.
            </exception>
        </member>
        <member name="M:Axle.IO.StorageInfo.List">
            <summary>
            Gets a <see cref="T:Axle.IO.StorageInfo"/> list based on the subdirectories
            found within the current <see cref="T:Axle.IO.StorageInfo"/> location.
            </summary>
            <returns>
            A <see cref="T:Axle.IO.StorageInfo"/> instances array, representing the subdirectories
            of the location represented by the current <see cref="T:Axle.IO.StorageInfo"/>.
            </returns>
        </member>
        <member name="M:Axle.IO.StorageInfo.OpenFile(System.String,System.IO.FileAccess)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified <paramref name="path"/>,
            with <see cref="F:System.IO.FileMode.OpenOrCreate"/> mode and the specified access.
            </summary>
            <param name="path">
            A path to a file, relative to the location represented by the current <see cref="T:Axle.IO.StorageInfo"/> object.
            </param>
            <param name="access">
            A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.
            </param>
            <returns>
            An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file with the specified <paramref name="access"/> options.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters
            as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The specified location points to a file that is read-only and access is not Read.
            -or-
            the specified location is a directory.
            -or-
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Axle.IO.StorageInfo.OpenFile(System.String)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified <paramref name="path"/>,
            with <see cref="F:System.IO.FileMode.OpenOrCreate"/> mode and <see cref="F:System.IO.FileAccess.ReadWrite"/> access.
            </summary>
            <param name="path">
            A path to a file, relative to the location represented by the current <see cref="T:Axle.IO.StorageInfo"/> object.
            </param>
            <returns>
            An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters
            as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The specified location points to a file that is read-only and access is not Read.
            -or-
            the specified location is a directory.
            -or-
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="P:Axle.IO.StorageInfo.Directory">
            <summary>
            A <see cref="T:System.IO.DirectoryInfo"/> reference to the represented by the current <see cref="T:Axle.IO.StorageInfo"/> drive or directory.
            </summary>
        </member>
        <member name="P:Axle.IO.StorageInfo.Exists">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value determining whether the current directory exists.
            </summary>
        </member>
        <member name="P:Axle.IO.StorageInfo.Uri">
            <summary>
            Gets the <see cref="P:Axle.IO.StorageInfo.Uri"/> of the location represented by the current <see cref="T:Axle.IO.StorageInfo"/> instance. 
            </summary>
        </member>
        <member name="T:Axle.IO.TemporaryStreamDump">
            <summary>
            A class representing a temporary dump of data stream to a file.
            The file is deleted when the current <see cref="T:Axle.IO.TemporaryStreamDump"/> instance is disposed.
            </summary>
        </member>
        <member name="M:Axle.IO.TemporaryStreamDump.Dump(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Writes the contents of the provided <paramref name="stream"/> to a temporary file in the given <paramref name="location"/>.
            </summary>
            <param name="stream">
            The stream object to dump.
            </param>
            <param name="location">
            The location of the file to dump the stream into.
            </param>
            <param name="revertPosition">
            An optional parameter, indicating where the stream's position should be restored after dumping the data.
            </param>
            <returns>
            A <see cref="T:Axle.IO.TemporaryStreamDump"/> instance pointing to the file containing the dumped data.
            </returns>
        </member>
        <member name="M:Axle.IO.TemporaryStreamDump.Dump(System.IO.Stream,System.Boolean)">
            <summary>
            Writes the contents of the provided <paramref name="stream"/> to a temporary file.
            </summary>
            <param name="stream">
            The stream object to dump.
            </param>
            <param name="revertPosition">
            An optional parameter, indicating where the stream's position should be restored after dumping the data.
            </param>
            <returns>
            A <see cref="T:Axle.IO.TemporaryStreamDump"/> instance pointing to the file containing the dumped data.
            </returns>
        </member>
        <member name="P:Axle.IO.TemporaryStreamDump.File">
            <summary>
            Gets a <see cref="T:System.IO.FileInfo"/> object representing the temporary file where the stream data was written.
            </summary>
        </member>
        <member name="T:Axle.Optional">
            <summary>
            A static class that aids the functionality of <see cref="T:Axle.Optional`1"/> instances.
            </summary>
            <seealso cref="T:Axle.Optional`1"/>
        </member>
        <member name="T:Axle.Optional`1">
            <summary>
            A container object for a non-null value. The <see cref="P:Axle.Optional`1.HasValue"/> property indicates whether there is a value available.
            </summary>
        </member>
        <member name="M:Axle.Optional`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Optional`1"/> <see langword="struct"/>.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Axle.Optional`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Axle.Optional`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Axle.Optional`1"/>.
            </returns>
        </member>
        <member name="P:Axle.Optional`1.Value">
            <summary>
            Gets the value of the underlying object represented by the current <see cref="T:Axle.Optional`1"/> instance, or <c>null</c> if there is no value present.
            </summary>
            <value>
            A reference to the underlying object represented by the current <see cref="T:Axle.Optional`1"/> instance, or <c>null</c> if there is no value present.
            </value>
        </member>
        <member name="P:Axle.Optional`1.HasValue">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value indicating whether this <see cref="T:Axle.Optional`1"/> instance has any value.
            </summary>
            <value>
            <c>true</c> if this instance has value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Axle.ReferenceEqualityComparer`1">
            <summary>
            An implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> interface
            that classifies two objects as equal only if they point to the same instance.
            The equality is determined internally by using the 
            <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/> method.
            </summary>
            <typeparam name="T">
            The type of objects to compare.
            </typeparam>
            <seealso cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>
        </member>
        <member name="T:Axle.References.Extensions.WeakReference.WeakReferenceExtensions">
            <summary>
            A <see langword="static"/> class containing common extensions to the 
            <see cref="T:System.WeakReference"/> type.
            </summary>
        </member>
        <member name="M:Axle.References.Extensions.WeakReference.WeakReferenceExtensions.TryGetTarget(System.WeakReference,System.Object@)">
            <summary>
            Tries to retrieve the target object that is referenced by the <paramref name="current"/> <see cref="T:System.WeakReference"/> object.
            </summary>
            <param name="current">
            The <see cref="T:System.WeakReference"/> instance this extension method is called on.
            </param>
            <param name="target">
            When this method returns, contains the target object, if it is available. This parameter is treated as uninitialized.
            </param>
            <returns>
            <c><see langword="true"/></c> if the target was retrieved; 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.References.ILazyReference`1">
            <summary>
            An interface representing a reference to a lazily initialized value.
            </summary>
            <typeparam name="T">
            The type of the value that is lazy-initialized.
            </typeparam>
            <seealso cref="T:System.Lazy`1"/>
        </member>
        <member name="M:Axle.References.ILazyReference`1.TryGetValue(`0@)">
            <summary>
            Tries to retrieve the value that is referenced by the current <see cref="T:Axle.References.ILazyReference`1"/> object.
            <remarks>
            Calling this method will not enforce the lazy value initialization.
            </remarks>
            </summary>
            <param name="value">
            When this method returns, contains the reference value, if it is available.
            This parameter is treated as uninitialized.
            </param>
            <returns>
            <c>true</c> if the target value was retrieved; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Axle.References.ILazyReference`1.HasValue">
            <summary>
            Gets a boolean value that indicates whether the current
            <see cref="T:Axle.References.ILazyReference`1"/> has a <see cref="P:Axle.References.IReference`1.Value"/> created.
            </summary>
        </member>
        <member name="T:Axle.References.IReference">
            <summary>
            An interface representing a reference to an object.
            </summary>
        </member>
        <member name="P:Axle.References.IReference.Value">
            <summary>
            Gets the target object being represented by the current 
            <see cref="T:Axle.References.IReference"/> instance.
            </summary>
        </member>
        <member name="T:Axle.References.IReference`1">
            <summary>
            A generic version of the <see cref="T:Axle.References.IReference" /> interface.
            </summary>
            <typeparam name="T">
            The type of the underlying object being referenced by the current 
            <see cref="T:Axle.References.IReference`1"/> instance.
            </typeparam>
            <seealso cref="T:Axle.References.IReference" />
        </member>
        <member name="M:Axle.References.IReference`1.TryGetValue(`0@)">
            <summary>
            Attempts to retrieve the value that is encapsulated by the current 
            <see cref="T:Axle.References.IReference`1"/> object.
            </summary>
            <param name="value">
            When this method returns, contains the reference value, if it is available. 
            This parameter is treated as uninitialized.
            </param>
            <returns>
            <c>true</c> if the target value was retrieved; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Axle.References.IReference`1.Value">
            <summary>
            Gets the target object being represented by the current <see cref="T:Axle.References.IReference`1"/> instance.
            </summary>
        </member>
        <member name="T:Axle.References.IThreadLocalReference`1">
            <summary>
            An interface representing a reference to a thread-local value.
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <seealso cref="T:System.Threading.ThreadLocal`1"/>
        </member>
        <member name="P:Axle.References.IThreadLocalReference`1.Value">
            <summary>
            Gets or sets the value of this instance on the current thread.
            </summary>
        </member>
        <member name="P:Axle.References.IThreadLocalReference`1.HasValue">
            <summary>
            Gets a value that indicates whether a <see cref="P:Axle.References.IReference`1.Value"/> has been initialized for the current thread.
            </summary>
        </member>
        <member name="T:Axle.References.IWeakReference`1">
            <summary>
            Represents a generic weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.
            </summary>
            <typeparam name="T">
            The type of the object that will be weakly referenced. This must be a reference type.
            </typeparam>
            <seealso cref="T:System.WeakReference"/>
        </member>
        <member name="P:Axle.References.IWeakReference`1.Value">
            <summary>
            Gets or sets the object (the <see cref="P:Axle.References.IWeakReference`1.Value">target</see>) referenced by the current <see cref="T:Axle.References.IWeakReference`1">weak reference</see> instance.
            </summary>
            <returns>
            <c>null</c> if the object referenced by the current <see cref="T:Axle.References.IWeakReference`1">weak reference</see> instance has been
            garbage collected; otherwise, a reference to the object referenced by the current <see cref="T:System.InvalidOperationException">weak reference</see>
            instance.
            </returns>
            <exception cref="N:System">
            The reference to the target object is invalid. <br />
            This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.
            </exception>
            <seealso cref="P:System.WeakReference.Target"/>
        </member>
        <member name="P:Axle.References.IWeakReference`1.IsAlive">
            <summary>
            Gets an indication whether the object referenced by the current <see cref="T:Axle.References.IWeakReference`1">weak reference</see>
            instance has been garbage collected.
            </summary>
            <returns>
            <c>true</c> if the object referenced by the current <see cref="T:Axle.References.IWeakReference`1">weak reference</see> instance has not been
            garbage collected and is still accessible; otherwise, <c>false</c>.
            </returns>
            <seealso cref="P:System.WeakReference.IsAlive"/>
        </member>
        <member name="M:Axle.References.LazyRef`1.TryGetValue(`0@)">
            <summary>
            Tries to retrieve the value that is referenced by the current <see cref="T:Axle.References.ILazyReference`1"/> object.
            <remarks>
            Calling this method will not enforce the lazy value initialization.
            </remarks>
            </summary>
            <param name="value">
            When this method returns, contains the reference value, if it is available.
            This parameter is treated as uninitialized.
            </param>
            <returns>
            <c>true</c> if the target value was retrieved; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Axle.References.LazyRef`1.HasValue">
            <summary>
            Gets a boolean value that indicates whether the current
            <see cref="T:Axle.References.ILazyReference`1"/> has a <see cref="P:Axle.References.LazyRef`1.Value"/> created.
            </summary>
        </member>
        <member name="F:Axle.References.Nullsafe`1.None">
            <summary>
            An empty <see cref="T:Axle.References.Nullsafe`1"/> value representing a <c>null</c> reference.
            </summary>
        </member>
        <member name="P:Axle.References.Nullsafe`1.Value">
            <summary>
            Gets the value of the underlying object represented by the current <see cref="T:Axle.References.Nullsafe`1"/> instance.
            </summary>
            <value>
            A reference to the underlying object represented by the current <see cref="T:Axle.References.Nullsafe`1"/> instance.
            </value>
        </member>
        <member name="P:Axle.References.Nullsafe`1.HasValue">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value indicating whether this <see cref="T:Axle.References.Nullsafe`1"/> instance has any value.
            </summary>
            <value>
            <c>true</c> if this instance has value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Axle.References.Singleton">
            <summary>
            A static class containing utility methods for working with singleton objects.
            </summary>
        </member>
        <member name="T:Axle.References.Stator`2">
            <summary>
            A stator is a special type of a decorator around a <see langword="class"/>, which allows
            for exposing the class functionality without referring to the actual implementation type.
            The actual implementation type could be provided from an external source (such as dependency
            injection container) when available.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentFallbackDriver"></typeparam>
        </member>
        <member name="P:Axle.References.ThreadLocalRef`1.HasValue">
            <summary>
            Gets a value that indicates whether a <see cref="P:Axle.References.ThreadLocalRef`1.Value"/> has been initialized for the current thread.
            </summary>
        </member>
        <member name="T:Axle.References.WeakRef`1">
            <inheritdoc cref="T:Axle.References.IWeakReference`1"/>
        </member>
        <member name="P:Axle.References.WeakRef`1.Axle#References#IReference{T}#Value">
            <inheritdoc cref="P:Axle.References.IWeakReference`1.Value" />
        </member>
        <member name="P:Axle.References.WeakRef`1.Axle#References#IReference#Value">
            <inheritdoc cref="P:Axle.References.IWeakReference`1.Value" />
        </member>
        <member name="P:Axle.References.WeakRef`1.Axle#References#IWeakReference{T}#IsAlive">
            <inheritdoc cref="P:Axle.References.IWeakReference`1.IsAlive" />
        </member>
        <member name="T:Axle.References.WeakReferenceEqualityComparer`1">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation that can compare weak references.
            Two weak references are deemed equal in case both are not alive or in case the targets of both are considered equal by the <see cref="P:Axle.References.WeakReferenceEqualityComparer`1.ValueComparer"/>. 
            </summary>
            <typeparam name="T">
            The underlying type of the weak reference. Must be a reference type.
            </typeparam>
            <seealso cref="T:System.Collections.Generic.IEqualityComparer`1"/>
        </member>
        <member name="M:Axle.References.WeakReferenceEqualityComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.References.WeakReferenceEqualityComparer`1"/> class.
            </summary>
            <param name="valueComparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is used to compare the weak reference values.
            </param>
        </member>
        <member name="M:Axle.References.WeakReferenceEqualityComparer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.References.WeakReferenceEqualityComparer`1"/> class that compares the weak reference targets by reference.
            The <see cref="P:Axle.References.WeakReferenceEqualityComparer`1.ValueComparer"/> implementation will be <see cref="T:Axle.ReferenceEqualityComparer`1"/>.
            </summary>
            <seealso cref="T:Axle.ReferenceEqualityComparer`1"/>
        </member>
        <member name="P:Axle.References.WeakReferenceEqualityComparer`1.ValueComparer">
            <summary>
            Gets a reference to the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is used to compare the weak reference values.
            </summary>
            <value>The value comparer.</value>
        </member>
        <member name="T:Axle.Reflection.AbstractGenericTypeIntrospector">
            <summary>
            An abstract class aiding the implementation of the <see cref="T:Axle.Reflection.IGenericTypeIntrospector"/> interface.
            </summary>
        </member>
        <member name="M:Axle.Reflection.AbstractGenericTypeIntrospector.Introspect">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractGenericTypeIntrospector.MakeGenericType(System.Type[])">
            <inheritdoc />
        </member>
        <member name="P:Axle.Reflection.AbstractGenericTypeIntrospector.GenericDefinitionType">
            <inheritdoc />
        </member>
        <member name="P:Axle.Reflection.AbstractGenericTypeIntrospector.GenericTypeArguments">
            <inheritdoc />
        </member>
        <member name="P:Axle.Reflection.AbstractGenericTypeIntrospector.GenericDefinitionIntrospector">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetConstructor(Axle.Reflection.ScanOptions,System.Type[])">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetConstructor(System.Reflection.ConstructorInfo)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetConstructors(Axle.Reflection.ScanOptions)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetMethod(Axle.Reflection.ScanOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetMethod(System.Reflection.MethodInfo)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetMethods(Axle.Reflection.ScanOptions)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetProperty(Axle.Reflection.ScanOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetProperty(System.Reflection.PropertyInfo)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetProperties(Axle.Reflection.ScanOptions)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetField(Axle.Reflection.ScanOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetField(System.Reflection.FieldInfo)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetFields(Axle.Reflection.ScanOptions)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetEvent(Axle.Reflection.ScanOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetEvent(System.Reflection.EventInfo)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetEvents(Axle.Reflection.ScanOptions)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetMembers(Axle.Reflection.ScanOptions)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.Axle#Reflection#IAttributeTarget#IsDefined(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.IsAttributeDefined(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.GetGenericTypeDefinition">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.AbstractTypeIntrospector.CreateInstance(System.Object[])">
            <inheritdoc />
        </member>
        <member name="P:Axle.Reflection.AbstractTypeIntrospector.TypeCode">
            <inheritdoc />
        </member>
        <member name="P:Axle.Reflection.AbstractTypeIntrospector.IntrospectedType">
            <inheritdoc />
        </member>
        <member name="P:Axle.Reflection.AbstractTypeIntrospector.TypeFlags">
            <inheritdoc />
        </member>
        <member name="P:Axle.Reflection.AbstractTypeIntrospector.IsDelegate">
            <inheritdoc />
        </member>
        <member name="P:Axle.Reflection.AbstractTypeIntrospector.IsGenericType">
            <inheritdoc />
        </member>
        <member name="P:Axle.Reflection.AbstractTypeIntrospector.IsGenericTypeDefinition">
            <inheritdoc />
        </member>
        <member name="P:Axle.Reflection.AbstractTypeIntrospector.IsNullableType">
            <inheritdoc />
        </member>
        <member name="P:Axle.Reflection.AbstractTypeIntrospector.IsAbstract">
            <inheritdoc />
        </member>
        <member name="T:Axle.Reflection.AccessModifier">
            <summary>
            An enumeration representing the possible access modifiers supported in the .NET framework.
            </summary>
        </member>
        <member name="F:Axle.Reflection.AccessModifier.Public">
            <summary>
            An access modifier for reflected members with <see langword="public"/> access.
            </summary>
        </member>
        <member name="F:Axle.Reflection.AccessModifier.Private">
            <summary>
            An access modifier for reflected members with <see langword="private"/> access.
            </summary>
        </member>
        <member name="F:Axle.Reflection.AccessModifier.Protected">
            <summary>
            An access modifier for reflected members with <see langword="protected"/> access.
            </summary>
        </member>
        <member name="F:Axle.Reflection.AccessModifier.Internal">
            <summary>
            An access modifier for reflected members with <see langword="internal"/> access.
            </summary>
        </member>
        <member name="F:Axle.Reflection.AccessModifier.ProtectedInternal">
            <summary>
            An access modifier for reflected members with <see langword="protected internal"/> access.
            </summary>
        </member>
        <member name="F:Axle.Reflection.AccessModifier.PrivateProtected">
            <summary>
            An access modifier for reflected members with <see langword="private protected"/> access.
            </summary>
        </member>
        <member name="T:Axle.Reflection.AccessorType">
            <summary>
            An enumeration representing the various accessor types that are supported by the .NET framework
            and visible trough reflection.
            </summary>
        </member>
        <member name="F:Axle.Reflection.AccessorType.Get">
            <summary>
            Represents the <see langword="get" /> accessor, typically associated with property getters.
            </summary>
        </member>
        <member name="F:Axle.Reflection.AccessorType.Set">
            <summary>
            Represents the <see langword="set" /> accessor, typically associated with property setters.
            </summary>
        </member>
        <member name="F:Axle.Reflection.AccessorType.Add">
            <summary>
            Represents the <see langword="add" /> accessor, typically associated with events and delegates.
            </summary>
        </member>
        <member name="F:Axle.Reflection.AccessorType.Remove">
            <summary>
            Represents the <see langword="remove" /> accessor, typically associated with events and delegates.
            </summary>
        </member>
        <member name="T:Axle.Reflection.AssemblyNameEqualityComparer">
            <summary>
            An equality comparer for assembly name objects, that uses case-insensitive name comparison depending
            on the target OS. 
            </summary>
        </member>
        <member name="M:Axle.Reflection.AssemblyNameEqualityComparer.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Reflection.AssemblyNameEqualityComparer"/> class. 
            </summary>
        </member>
        <member name="T:Axle.Reflection.CastOperator">
            <summary>
            A static class for handling cast operator; that is, an operator defined on a type that allows instances of that
            type to be converted to instances of another type.
            </summary>
            <seealso cref="T:Axle.Reflection.ICastOperator`2"/>
        </member>
        <member name="M:Axle.Reflection.CastOperator.For(System.Type,System.Type)">
            <summary>
            Gets a <see cref="T:Axle.Reflection.ICastOperator"/> instance that can handle the casting from 
            given <paramref name="source"/> type to a specified <paramref name="target"/> type.
            </summary>
            <param name="source">
            The source type to cast from.
            </param>
            <param name="target">
            The destination type of the casting.
            </param>
            <returns>
            A <see cref="T:Axle.Reflection.ICastOperator"/> instance that can handle the casting from 
            the <paramref name="source"/> type to the <paramref name="target"/> type.
            </returns>
            <remarks>
            In case a cast operator is not present for the provided types, this method will
            still return an instance of the <see cref="T:Axle.Reflection.ICastOperator"/>. However, in that case
            its <see cref="P:Axle.Reflection.ICastOperator.IsDefined"/> property will have a value of <c><see langword="false"/></c>.
            </remarks>
        </member>
        <member name="M:Axle.Reflection.CastOperator.For``2">
            <summary>
            Gets a <see cref="T:Axle.Reflection.ICastOperator"/> instance that can handle the casting from 
            <typeparamref name="T"/> to <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="T">
            The source type to cast from.
            </typeparam>
            <typeparam name="TResult">
            The destination type of the casting.
            </typeparam>
            <returns>
            A <see cref="T:Axle.Reflection.ICastOperator"/> instance that can handle the casting from 
            <typeparamref name="T"/> to <typeparamref name="TResult"/>.
            </returns>
            <remarks>
            In case a cast operator is not present for the provided types, this method will
            still return an instance of the <see cref="T:Axle.Reflection.ICastOperator"/>. However, in that case
            its <see cref="P:Axle.Reflection.ICastOperator.IsDefined"/> property will have a value of <c><see langword="false"/></c>.
            </remarks>
        </member>
        <member name="M:Axle.Reflection.ConstructorToken.Invoke(System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:Axle.Reflection.DeclarationType">
            <summary>
            An enumeration representing the possible declaration types of a class member.
            </summary>
            <remarks>
            Multiple values can be combined, as the enumeration has the <see cref="T:System.FlagsAttribute"/> specified.
            </remarks>
        </member>
        <member name="F:Axle.Reflection.DeclarationType.None">
            <summary>
            No valid declaration type is specified.
            </summary>
        </member>
        <member name="F:Axle.Reflection.DeclarationType.Instance">
            <summary>
            Used for instance members of a class.
            </summary>
        </member>
        <member name="F:Axle.Reflection.DeclarationType.Static">
            <summary>
            Used for <see langword="static"/> members of a class.
            </summary>
            <seealso cref="P:System.Reflection.MethodBase.IsStatic"/>
            <seealso cref="P:System.Reflection.FieldInfo.IsStatic"/>
        </member>
        <member name="F:Axle.Reflection.DeclarationType.Abstract">
            <summary>
            The member is <see langword="abstract"/>.
            </summary>
            <seealso cref="P:System.Reflection.MethodBase.IsAbstract"/>
        </member>
        <member name="F:Axle.Reflection.DeclarationType.Virtual">
            <summary>
            The member is <see langword="virtual"/>.
            </summary>
            <seealso cref="P:System.Reflection.MethodBase.IsVirtual"/>
        </member>
        <member name="F:Axle.Reflection.DeclarationType.Override">
            <summary>
            The member is overriding another member defined up in the class hierarchy.
            </summary>
        </member>
        <member name="F:Axle.Reflection.DeclarationType.HideBySig">
            <summary>
            Determines that only a member of the same kind with exactly the same signature is hidden in the derived class.
            </summary>
            <seealso cref="P:System.Reflection.MethodBase.IsHideBySig"/>
        </member>
        <member name="F:Axle.Reflection.DeclarationType.Sealed">
            <summary>
            The member is <see langword="sealed"/>; it cannot be overridden. 
            </summary>
            <seealso cref="P:System.Reflection.MethodBase.IsFinal"/>
        </member>
        <member name="T:Axle.Reflection.Extensions.Assembly.AssemblyExtensions">
            <summary>
            A class containing extension methods tied to the <see cref="T:System.Reflection.Assembly"/> type.
            </summary>
        </member>
        <member name="M:Axle.Reflection.Extensions.Assembly.AssemblyExtensions.LoadSatelliteAssembly(System.Reflection.Assembly,System.Globalization.CultureInfo)">
            <summary>
            Loads a satellite assembly to the specified <paramref name="assembly">target</paramref> assembly and <paramref name="culture"/>.
            </summary>
            <param name="assembly">
            The target <see cref="T:System.Reflection.Assembly"/> to search for related satellite assemblies.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/> object specifying the culture for the requested satellite assembly.
            </param>
            <returns>
            A satellite assembly to the specified <paramref name="assembly">target</paramref> assembly and <paramref name="culture"/>.
            This method can return <c>null</c> in case a satellite assembly was not found for the given culture.
            In case the passed in <paramref name="culture"/> object represents the <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see>
            then this method also returns <c>null</c>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either the <paramref name="assembly"/> or <paramref name="culture"/> parameter is <c>null</c>.
            </exception>
            <seealso cref="M:Axle.Environment.IRuntime.LoadSatelliteAssembly(System.Reflection.Assembly,System.Globalization.CultureInfo)"/>
        </member>
        <member name="T:Axle.Reflection.Extensions.Type.TypeExtensions">
            <summary>
            A <see langword="static"/> class containing extension methods for instances of the 
            <see cref="T:System.Type"/> type.
            </summary>
        </member>
        <member name="M:Axle.Reflection.Extensions.Type.TypeExtensions.GetTypeCode(System.Type)">
            <summary>
            Gets the underlying <see cref="T:System.TypeCode">type code</see> of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type">type</see> whose underlying <see cref="T:System.TypeCode">type code</see> 
            to get.</param>
            <returns>
            The <see cref="T:System.TypeCode"/> value of the underlying type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c><see langword="null"/></c>.
            </exception>
        </member>
        <member name="M:Axle.Reflection.Extensions.Type.TypeExtensions.ExtendsOrImplements(System.Type,System.Type)">
            <summary>
            Determines whether the <paramref name="type"/> type can be assigned to an instance of a specified type.
            </summary>
            <param name="type">
            The current <see cref="T:System.Type">type</see> to check.
            </param>
            <param name="other">
            The suspected base type to check.
            </param>
            <returns>
            <c><see langword="true"/></c> if any of the following conditions is met: 
            <list type="bullet">
            <item>
            <description>
            The <paramref name="type"/> type and the specified one represent the same type. 
            </description>
            </item>
            <item>
            <description>
            The <paramref name="type"/> type is derived either directly or indirectly from the specified type. 
            </description>
            </item>
            <item>
            <description>
            The <paramref name="type"/> type is derived directly from the specified one if it inherits from the 
            specified type; 
            </description>
            </item>
            <item>
            <description>
            The <paramref name="type"/> type is derived indirectly from the specified type if it inherits from a 
            succession of one or more classes that inherit from the specified type. 
            </description>
            </item>
            <item>
            <description>
            The specified type is an interface that the <paramref name="type"/> type implements. 
            </description>
            </item>
            <item>
            <description>
            The <paramref name="type"/> type is a generic type parameter, and the specified type represents one of 
            its constraints. 
            </description>
            </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="type"/> or <paramref name="other"/> is <c><see langword="null"/></c>.
            </exception>
        </member>
        <member name="M:Axle.Reflection.Extensions.Type.TypeExtensions.ExtendsOrImplements``1(System.Type)">
            <summary>
            Determines whether the <paramref name="type"/> type can be assigned to an instance of a specified type.
            </summary>
            <param name="type">
            The current <see cref="T:System.Type">type</see> to check.
            </param>
            <typeparam name="T">
            The suspected base type to check.
            </typeparam>
            <returns>
            <c><see langword="true"/></c> if any of the following conditions is met: 
            <list type="bullet">
            <item>
            <description>
            The <paramref name="type"/> type and the specified one represent the same type. 
            </description>
            </item>
            <item>
            <description>
            The <paramref name="type"/> type is derived either directly or indirectly from the specified type. 
            </description>
            </item>
            <item>
            <description>
            The <paramref name="type"/> type is derived directly from the specified one if it inherits from the 
            specified type; 
            </description>
            </item>
            <item>
            <description>
            The <paramref name="type"/> type is derived indirectly from the specified type if it inherits from a 
            succession of one or more classes that inherit from the specified type. 
            </description>
            </item>
            <item>
            <description>
            The specified type is an interface that the <paramref name="type"/> type implements. 
            </description>
            </item>
            <item>
            <description>
            The <paramref name="type"/> type is a generic type parameter, and the specified type represents one of 
            its constraints. 
            </description>
            </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c><see langword="null"/></c>.
            </exception>
        </member>
        <member name="M:Axle.Reflection.Extensions.Type.TypeExtensions.IsBaseOf(System.Type,System.Type)">
            <summary>
            Determines if a specific <paramref name="type"/> is a superclass of a given <paramref name="other"/> type.
            </summary>
            <param name="type">
            The <see cref="T:System.Type">type</see> to check.
            </param>
            <param name="other">
            The potential subclassing type to check.
            </param>
            <returns>
            <c><see langword="true"/></c> if the current <paramref name="type"/> is higher in the inheritence hierarchy
            of the provided <paramref name="other"/> type;
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Reflection.Extensions.Type.TypeExtensions.IsBaseOf``1(System.Type)">
            <summary>
            Determines if a specific <paramref name="type"/> is a superclass of a given <typeparamref name="T"/> type.
            </summary>
            <param name="type">
            The <see cref="T:System.Type">type</see> to check.
            </param>
            <typeparam name="T">
            The potential subclassing type to check.
            </typeparam>
            <returns>
            <c><see langword="true"/></c> if the current <paramref name="type"/> is higher in the inheritence hierarchy
            of the provided  type <typeparamref name="T"/>;
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Reflection.Extensions.Type.TypeExtensions.IsDelegate(System.Type)">
            <summary>
            Determines if the provided <paramref name="type"/> is a delegate.
            </summary>
            <param name="type">
            The <see cref="T:System.Type">type</see> to check if represents a delegate.
            </param>
            <returns>
            <c><see langword="true"/></c> if the provided <paramref name="type"/> is a delegate;
            <c><see langword="false"/></c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c><see langword="null"/></c>.
            </exception>
            <seealso cref="P:Axle.Reflection.ITypeIntrospector.IsDelegate"/>
        </member>
        <member name="M:Axle.Reflection.Extensions.Type.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            Checks whether the specified <paramref name="type"/> is a nullable type.
            </summary>
            <param name="type">
            The type to check if nullable.
            </param>
            <returns>
            <c><see langword="true"/></c> if the current <paramref name="type"/> is a nullable type; 
            <c><see langword="false"/></c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c><see langword="null"/></c>.
            </exception>
            <seealso cref="P:Axle.Reflection.ITypeIntrospector.IsNullableType"/>
        </member>
        <member name="T:Axle.Reflection.IAccessible">
            <summary>
            Represents a reflected object which has accessors.
            </summary>
            <seealso cref="T:Axle.Reflection.AccessorType"/>
        </member>
        <member name="M:Axle.Reflection.IAccessible.FindAccessor(Axle.Reflection.AccessorType)">
            <summary>
            Locates an accessor of a given <paramref name="type"/> belonging to the current 
            reflected object.
            </summary>
            <param name="type">
            One of the <see cref="T:Axle.Reflection.AccessorType"/> enumeration values, representing the accessor type
            to look for.
            </param>
            <returns>
            An <see cref="T:Axle.Reflection.IAccessor"/> matching the provided accessor <paramref name="type"/>,
            or <c><see langword="null"/></c> if no matching accessor was found.
            </returns>
        </member>
        <member name="P:Axle.Reflection.IAccessible.Accessors">
            <summary>
            A collection of <see cref="T:Axle.Reflection.IAccessor"/> objects associated wit the current reflected object.
            </summary>
        </member>
        <member name="T:Axle.Reflection.IAccessor">
            <summary>
            An interface representing an accessor to a reflected member (e.g. getters, setters, event manipulators, etc.)
            </summary>
        </member>
        <member name="P:Axle.Reflection.IAccessor.Declaration">
            <summary>
            Gets the <see cref="T:Axle.Reflection.DeclarationType">declaration type</see> of the current 
            <see cref="T:Axle.Reflection.IAccessor">accessor</see> instance.
            </summary>
        </member>
        <member name="P:Axle.Reflection.IAccessor.AccessModifier">
            <summary>
            Gets the <see cref="T:Axle.Reflection.AccessModifier">access modifier</see> of the current 
            <see cref="T:Axle.Reflection.IAccessor">accessor</see> instance.
            </summary>
        </member>
        <member name="P:Axle.Reflection.IAccessor.AccessorType">
            <summary>
            Gets the <see cref="T:Axle.Reflection.AccessorType">accessor type</see> of the current 
            <see cref="T:Axle.Reflection.IAccessor">accessor</see> instance.
            </summary>
        </member>
        <member name="P:Axle.Reflection.IAccessor.Member">
            <summary>
            Gets a reference to the reflected <see cref="T:Axle.Reflection.IMember">member</see> the current 
            <see cref="T:Axle.Reflection.IAccessor">accessor</see> instance points to.
            </summary>
        </member>
        <member name="T:Axle.Reflection.IAttributeInfo">
            <summary>
            An interface representing a reflected attribute. Allows querying of reflected metadata.
            </summary>
        </member>
        <member name="P:Axle.Reflection.IAttributeInfo.Attribute">
            <summary>
            Gets a reference to the reflected <see cref="P:Axle.Reflection.IAttributeInfo.Attribute">attribute</see> instance.
            </summary>
        </member>
        <member name="P:Axle.Reflection.IAttributeInfo.AttributeTargets">
            <summary>
            Gets a set of values identifying which program elements the indicated attribute can be applied to.
            </summary>
            <seealso cref="P:System.AttributeUsageAttribute.ValidOn"/>
        </member>
        <member name="P:Axle.Reflection.IAttributeInfo.AllowMultiple">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value indicating whether more than one instance of the indicated attribute can be specified for a single program element.
            </summary>
            <seealso cref="P:System.AttributeUsageAttribute.AllowMultiple"/>
        </member>
        <member name="P:Axle.Reflection.IAttributeInfo.Inherited">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value indicating whether the indicated attribute can be inherited by derived classes and overriding members.
            </summary>
            <seealso cref="P:System.AttributeUsageAttribute.Inherited"/>
        </member>
        <member name="T:Axle.Reflection.IAttributeTarget">
            <summary>
            Represents a reflected object that may be annotated with attributes.
            </summary>
            <seealso cref="T:System.Attribute"/>
            <seealso cref="T:Axle.Reflection.IAttributeInfo"/>
        </member>
        <member name="M:Axle.Reflection.IAttributeTarget.GetAttributes">
            <summary>
            Gets a collection of zero or more <see cref="T:Axle.Reflection.IAttributeInfo">attributes</see> that the reflected object has
            defined.
            </summary>
        </member>
        <member name="M:Axle.Reflection.IAttributeTarget.GetAttributes(System.Type)">
            <summary>
            Gets a collection of zero or more <see cref="T:Axle.Reflection.IAttributeInfo">attributes</see> of the provided
            by the <paramref name="attributeType"/> parameter type, that the reflected object has defined.
            </summary>
        </member>
        <member name="M:Axle.Reflection.IAttributeTarget.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Gets a collection of zero or more <see cref="T:Axle.Reflection.IAttributeInfo">attributes</see> of the provided
            by the <paramref name="attributeType"/> parameter type, that the reflected object has defined,
            and including/excluding attributes from base types depending on the value of the <paramref name="inherit"/>
            parameter.
            </summary>
        </member>
        <member name="M:Axle.Reflection.IAttributeTarget.IsDefined(System.Type,System.Boolean)">
            <summary>
            Indicates whether one or more attributes of the specified <see cref="T:System.Type">type</see> or of its derived
            types is applied to this <see cref="T:Axle.Reflection.IAttributeTarget">attribute target</see> instance.
            </summary>
            <param name="attributeType">
            The <see cref="T:System.Type">type</see> of custom <see cref="T:System.Attribute">attribute</see> to search for. The search 
            includes derived types.
            </param>
            <param name="inherit">
            <c>true</c> to search this member's inheritance chain to find the attributes; otherwise, <c>false</c>.
            <para>
            <remarks>
            The <paramref name="inherit"/> parameter is ignored for <see cref="T:Axle.Reflection.IAttributeTarget">attribute target</see>
            implementations representing properties and events.
            </remarks>
            </para>
            </param>
            <returns>
            <c>true</c> if one or more instances of <paramref name="attributeType"/> or any of its derived types
            is applied to this <see cref="T:Axle.Reflection.IAttributeTarget">attribute target</see> instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Axle.Reflection.ICastOperator">
            <summary>
            An interface representing a cast operator defined by a <see cref="T:System.Type">type</see>.
            </summary>
            <seealso cref="T:Axle.Reflection.ICastOperator`2"/>
        </member>
        <member name="M:Axle.Reflection.ICastOperator.Invoke(System.Object)">
            <summary>
            Invokes the cast operation represented by the current <see cref="T:Axle.Reflection.ICastOperator">cast operator</see> on the
            <paramref name="target"/> object object.
            </summary>
            <param name="target">
            The target object to be cast.
            </param>
            <returns>
            An object that is the result of the cast operation represented by the current 
            <see cref="T:Axle.Reflection.ICastOperator">cast operator</see> instance.
            </returns>
        </member>
        <member name="M:Axle.Reflection.ICastOperator.TryInvoke(System.Object,System.Object@)">
            <summary>
            Attempts to invoke the cast operation represented by the current 
            <see cref="T:Axle.Reflection.ICastOperator">cast operator</see> instance on the <paramref name="target"/> object.
            </summary>
            <param name="target">
            The target object to be cast.
            </param>
            <param name="result">
            An object that is the result of the cast operation represented by the current 
            <see cref="T:Axle.Reflection.ICastOperator">cast operator</see> instance.
            </param>
            <returns>
            <c>true</c> if the cast operation succeeds; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Axle.Reflection.ICastOperator.IsDefined">
            <summary>
            Determines if the current <see cref="T:Axle.Reflection.ICastOperator">cast operator</see> is defined by the target 
            <see cref="T:System.Type">type</see>.
            </summary>
        </member>
        <member name="T:Axle.Reflection.ICastOperator`2">
            <summary>
            A generic interface representing a cast operator defined by a <see cref="T:System.Type">type</see>.
            </summary>
            <typeparam name="T1">
            The source type for the type cast represented by the current 
            <see cref="T:Axle.Reflection.ICastOperator`2">cast operator</see>.</typeparam>
            <typeparam name="T2">
            The target type for the type cast represented by the current 
            <see cref="T:Axle.Reflection.ICastOperator`2">cast operator</see>.</typeparam>
            <seealso cref="T:Axle.Reflection.ICastOperator"/>
        </member>
        <member name="M:Axle.Reflection.ICastOperator`2.Invoke(`0)">
            <summary>
            Invokes the cast operation represented by the current <see cref="T:Axle.Reflection.ICastOperator`2">cast operator</see>
            on the target object.
            </summary>
            <param name="target">
            The target object to be cast.
            </param>
            <returns>
            An instance of <typeparamref name="T2"/> that is the result of the cast operation represented by 
            the current <see cref="T:Axle.Reflection.ICastOperator`2">cast operator</see> instance.
            </returns>
        </member>
        <member name="M:Axle.Reflection.ICastOperator`2.TryInvoke(`0,`1@)">
            <summary>
            Attempts to invoke the cast operation represented by the current 
            <see cref="T:Axle.Reflection.ICastOperator`2">cast operator</see> instance on the <paramref name="target"/> object.
            </summary>
            <param name="target">
            The target object to be cast.
            </param>
            <param name="result">
            An instance of <typeparamref name="T2"/> that is the result of the cast operation represented by 
            the current <see cref="T:Axle.Reflection.ICastOperator">cast operator</see> instance.
            </param>
            <returns>
            <c><see langword="true"/></c> if the cast operation succeeds;
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Reflection.ICombineAccessor.AddDelegate(System.Object,System.Delegate)">
            <summary>
            Combines the target delegate with the one provided by the <paramref name="handler"/>.
            </summary>
            <param name="target">
            
            </param>
            <param name="handler">
            The delegate to combine.
            </param>
        </member>
        <member name="T:Axle.Reflection.IConstructor">
            <summary>
            An interface representing a reflected constructor.
            </summary>
            <seealso cref="T:System.Reflection.ConstructorInfo"/>
        </member>
        <member name="M:Axle.Reflection.IConstructor.Invoke(System.Object[])">
            <summary>
            Invokes the current <see cref="T:Axle.Reflection.IConstructor" /> implementation.
            </summary>
            <param name="args">
            An array of variable length that represents the values of any parameters that the reflected constructor may have. <br />
            The number of values supplied must match exactly the number of parameters of the reflected constructor.
            </param>
            <returns>
            Returns the newly constructed object instance;<br/>
            </returns>
        </member>
        <member name="T:Axle.Reflection.IEvent">
            <summary>
            An interface representing a reflected event member.
            </summary>
            <seealso cref="T:System.Reflection.EventInfo"/>
        </member>
        <member name="T:Axle.Reflection.IField">
            <summary>
            An interface representing a reflected field member.
            </summary>
            <seealso cref="T:System.Reflection.FieldInfo"/>
        </member>
        <member name="P:Axle.Reflection.IField.IsReadOnly">
            <summary>
            Gets a value determining if the field represented by the current <see cref="T:Axle.Reflection.IField"/> instance
            is declared as read-only, i.e. it's value can be set only within the body of a constructor
            or initialization expression.
            <para>
            In C# read-only fields are declared using the <c>readonly</c> keyword.
            </para>
            <para>
            In VisualBasic.NET read-only fields are declared using the <c>ReadOnly</c> keyword.
            </para>
            </summary>
            <seealso cref="P:System.Reflection.FieldInfo.IsInitOnly"/>
        </member>
        <member name="T:Axle.Reflection.IGenericMethod">
            <summary>
            Represents a generic method. A generic method is produced from a 'raw' method containing any generic parameter 
            placeholders, along with the respective placeholder substitution types.
            </summary>
        </member>
        <member name="P:Axle.Reflection.IGenericMethod.GenericArguments">
            <summary>
            Gets an array of types representing the concrete types which substitute the respective generic type slot.
            </summary>
        </member>
        <member name="P:Axle.Reflection.IGenericMethod.RawMethod">
            <summary>
            Gets a reference to the non-generic 'raw' method this instance is produced from.
            </summary>
        </member>
        <member name="T:Axle.Reflection.IGenericTypeIntrospector">
            <summary>
            An interface for introspecting a generic type. The <see cref="T:Axle.Reflection.IGenericTypeIntrospector"/> can represent 
            either a purely generic type definition, or a type with partially or fully substituted generic arguments.
            Refer to its <see cref="P:Axle.Reflection.IGenericTypeIntrospector.GenericDefinitionIntrospector"/> property to access the purely generic type definition,
            or make calls to the <see cref="M:Axle.Reflection.IGenericTypeIntrospector.MakeGenericType(System.Type[])"/> method to incrementally supply generic types.
            </summary>
        </member>
        <member name="M:Axle.Reflection.IGenericTypeIntrospector.Introspect">
            <summary>
            Gets a <see cref="T:Axle.Reflection.ITypeIntrospector"/> instance produced from the current <see cref="T:Axle.Reflection.IGenericTypeIntrospector"/>'s
            <see cref="P:Axle.Reflection.IGenericTypeIntrospector.GenericDefinitionType"/> and <see cref="P:Axle.Reflection.IGenericTypeIntrospector.GenericTypeArguments"/>.
            If the current <see cref="T:Axle.Reflection.IGenericMethod"/> has no or partially applied generic types,
            then <c>null</c> will be returned.
            </summary>
            <returns>
            A <see cref="T:Axle.Reflection.ITypeIntrospector"/> instance produced from the current <see cref="T:Axle.Reflection.IGenericTypeIntrospector"/>'s
            <see cref="P:Axle.Reflection.IGenericTypeIntrospector.GenericDefinitionType"/> and <see cref="P:Axle.Reflection.IGenericTypeIntrospector.GenericTypeArguments"/>
            - OR -
            <c>null</c> if the current <see cref="T:Axle.Reflection.IGenericMethod"/> has no or partially applied generic types.
            </returns>
        </member>
        <member name="M:Axle.Reflection.IGenericTypeIntrospector.MakeGenericType(System.Type[])">
            <summary>
            Incrementally applies the provided <paramref name="typeParameters"/>, appending them to the existing
            <see cref="P:Axle.Reflection.IGenericTypeIntrospector.GenericTypeArguments"> generic type argument list</see> and so produces 
            a new <see cref="T:Axle.Reflection.IGenericTypeIntrospector"/> instance.
            </summary>
            <param name="typeParameters">
            A list of <see cref="T:System.Type">type</see> parameters to append to the <see cref="P:Axle.Reflection.IGenericTypeIntrospector.GenericDefinitionType"/>
            of the current <see cref="T:Axle.Reflection.IGenericTypeIntrospector"/>.
            </param>
            <returns>
            A new <see cref="T:Axle.Reflection.IGenericTypeIntrospector"/> instance with its 
            <see cref="P:Axle.Reflection.IGenericTypeIntrospector.GenericTypeArguments">generic type arguments list</see> completed with the provided
            <paramref name="typeParameters"/>
            </returns>
            <remarks>
            Calls to this method will not modify the state of the current <see cref="T:Axle.Reflection.IGenericTypeIntrospector"/> instance;
            a new object is produced with each call. The only exception is when the <paramref name="typeParameters"/> is
            omitted or passed as empty array -- in such case the current instance is returned.
            </remarks>
        </member>
        <member name="P:Axle.Reflection.IGenericTypeIntrospector.GenericTypeArguments">
            <summary>
            Gets an array of the currently applied generic type arguments.
            </summary>
        </member>
        <member name="P:Axle.Reflection.IGenericTypeIntrospector.GenericDefinitionType">
            <summary>
            Gets a reference to the generic type definition represented by the current
            <see cref="T:Axle.Reflection.IGenericTypeIntrospector"/> instance.
            </summary>
        </member>
        <member name="P:Axle.Reflection.IGenericTypeIntrospector.GenericDefinitionIntrospector">
            <summary>
            Gets the <see cref="T:Axle.Reflection.IGenericTypeIntrospector"/> for the <see cref="P:Axle.Reflection.IGenericTypeIntrospector.GenericDefinitionType"/>.
            </summary>
        </member>
        <member name="T:Axle.Reflection.IGetAccessor">
            <summary>
            An interface that represents a get accessor (or getter) for a class member - a property or a field.
            </summary>
            <seealso cref="F:Axle.Reflection.AccessorType.Get">AccessorType.Get</seealso>
            <seealso cref="T:Axle.Reflection.ISetAccessor" />
            <seealso cref="T:Axle.Reflection.IAccessor" />
        </member>
        <member name="M:Axle.Reflection.IGetAccessor.GetValue(System.Object)">
            <summary>
            Invokes the appropriate mechanism of the reflected getter. For properties, this will invoke the
            property's get method, for fields it will return the field's value.
            </summary>
            <param name="target">
            The target object that owns the member (field or property) whose accessor is represented by the current <see cref="T:Axle.Reflection.IGetAccessor"/>
            instance.
            </param>
            <returns>
            The result of the get method if the current <see cref="T:Axle.Reflection.IGetAccessor"/> represents a property; or the value of the represented field.
            </returns>
        </member>
        <member name="T:Axle.Reflection.IInvokable">
            <summary>
            An interface that represents a reflected member (usually a method or constructor) that can be invoked trough reflection.
            </summary>
        </member>
        <member name="M:Axle.Reflection.IInvokable.GetParameters">
            <summary>
            Returns an array of <see cref="T:Axle.Reflection.IParameter" /> instances, each representing a parameter to the current
            <see cref="T:Axle.Reflection.IInvokable" /> implementation. If the invokable has no parameters, an empty array is returned.
            </summary>
            <returns>
            An array of <see cref="T:Axle.Reflection.IParameter" /> instances, each representing a parameter to the current
            <see cref="T:Axle.Reflection.IInvokable" /> implementation, or an empty array if the method has no parameters.
            </returns>
        </member>
        <member name="M:Axle.Reflection.IInvokable.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the current <see cref="T:Axle.Reflection.IInvokable" /> implementation.
            </summary>
            <param name="target">
            If the reflected member is an instance method, represents the target object upon whose behalf the method is invoked on
            (and would be referenced by the <c>this</c> keyword in the reflected code). <br />
            </param>
            <param name="args">
            An array of variable length that represents the values of any parameters that the reflected invokable may have. <br />
            The number of values supplied must match exactly the number of parameters of the reflected invokable.
            </param>
            <returns>
            If the reflected invokable is a constructor, returns the newly constructed instance;<br/>
            if the reflected invokable is a method, and that method has a specific return value, then the result will
            contain return value of the method, otherwise the value returned will be <c>null</c>.
            </returns>
            <remarks>
            If the reflected member is a static method, always use <c>null</c> for the <paramref name="target"/> parameter.<br/>
            A reflected constructor, on the other hand, will ignore any value passed by the <paramref name="target"/> parameter.
            </remarks>
        </member>
        <member name="T:Axle.Reflection.IMember">
            <summary>
            Represents a reflected member of a <c>struct</c>, <c>class</c>, or <c>interface</c>.
            This interface acts as a high-level abstraction over concrete member types, such as a constructor, method, 
            field, property and etc.
            </summary>
            <seealso cref="T:Axle.Reflection.IConstructor"/>
            <seealso cref="T:Axle.Reflection.IMethod"/>
            <seealso cref="T:Axle.Reflection.IField"/>
            <seealso cref="T:Axle.Reflection.IProperty"/>
            <seealso cref="T:Axle.Reflection.IEvent"/>
            <seealso cref="T:Axle.Reflection.IReadableMember"/>
            <seealso cref="T:Axle.Reflection.IWriteableMember"/>
        </member>
        <member name="P:Axle.Reflection.IMember.DeclaringType">
            <summary>
            The <see cref="T:System.Type">type</see> that declares the reflected <see cref="T:Axle.Reflection.IMember">member</see>.
            </summary>
        </member>
        <member name="P:Axle.Reflection.IMember.MemberType">
            <summary>
            The <see cref="T:System.Type">type</see> of the reflected <see cref="T:Axle.Reflection.IMember">member</see> itself.
            </summary>
        </member>
        <member name="P:Axle.Reflection.IMember.Name">
            <summary>
            The name of the current <see cref="T:Axle.Reflection.IMember">member</see>.
            </summary>
        </member>
        <member name="P:Axle.Reflection.IMember.Declaration">
            <summary>
            Gets the declaration type for the current <see cref="T:Axle.Reflection.IMember">member</see>.
            </summary>
        </member>
        <member name="P:Axle.Reflection.IMember.AccessModifier">
            <summary>
            Gets the access modifier of the current <see cref="T:Axle.Reflection.IMember">member</see>.
            </summary>
        </member>
        <member name="T:Axle.Reflection.IMethod">
            <summary>
            An interface that represents a reflected method. Enables querying the reflected metadata and allows
            the invocation of the reflected member.
            </summary>
            <seealso cref="T:Axle.Reflection.IInvokable"/>
            <seealso cref="T:Axle.Reflection.IMember"/>
            <seealso cref="T:Axle.Reflection.IAttributeTarget"/>
            <seealso cref="T:System.Reflection.MethodInfo"/>
        </member>
        <member name="M:Axle.Reflection.IMethod.MakeGeneric(System.Type[])">
            <summary>
            Substitutes the elements of an array of types for the type parameters of the current generic method 
            definition, and returns a <see cref="T:Axle.Reflection.IGenericMethod"/> object representing the resulting constructed 
            method.
            </summary>
            <param name="types">
            An array of types to be substituted for the type parameters of the generic method definition.
            </param>
            <returns>
            A <see cref="T:Axle.Reflection.IGenericMethod"/> object representing the resulting constructed method.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The current <see cref="T:Axle.Reflection.IMethod">method</see> is already an instance of <see cref="T:Axle.Reflection.IGenericMethod"/>
            <para>-OR-</para>
            The current <see cref="T:Axle.Reflection.IMethod">method</see> does not accept type parameters (<see cref="P:Axle.Reflection.IMethod.IsGeneric"/> is 
            <c>false</c>).
            </exception>
            <seealso cref="T:Axle.Reflection.IGenericMethod"/>
            <seealso cref="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])"/>
        </member>
        <member name="P:Axle.Reflection.IMethod.IsGeneric">
            <summary>
            Gets a value indicating whether the current <see cref="T:Axle.Reflection.IMethod">method</see> is generic.
            </summary>
            <seealso cref="P:System.Reflection.MethodBase.IsGenericMethod"/>
        </member>
        <member name="P:Axle.Reflection.IMethod.HasGenericDefinition">
            <summary>
            Gets a value indicating whether the current <see cref="T:Axle.Reflection.IMethod">method</see> is generic method definition.
            </summary>
            <seealso cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition"/>
        </member>
        <member name="P:Axle.Reflection.IMethod.ReturnType">
            <summary>
            Gets the return type of the current <see cref="T:Axle.Reflection.IMethod">method</see>.
            </summary>
            <seealso cref="P:System.Reflection.MethodInfo.ReturnType"/>
        </member>
        <member name="T:Axle.Reflection.IParameter">
            <summary>
            An interface representing a reflected parameter to a constructor or method and discovers parameter metadata.
            </summary>
            <seealso cref="T:System.Reflection.ParameterInfo"/>
        </member>
        <member name="P:Axle.Reflection.IParameter.Type">
            <summary>
            The type of the current <see cref="T:Axle.Reflection.IParameter">parameter</see>.
            </summary>
            <seealso cref="P:System.Reflection.ParameterInfo.ParameterType"/>
        </member>
        <member name="P:Axle.Reflection.IParameter.Name">
            <summary>
            The name of the current <see cref="T:Axle.Reflection.IParameter">parameter</see>.
            </summary>
            <seealso cref="P:System.Reflection.ParameterInfo.Name"/>
        </member>
        <member name="P:Axle.Reflection.IParameter.IsOptional">
            <summary>
            Gets a value indicating whether the current <see cref="T:Axle.Reflection.IParameter">parameter</see> is optional to the 
            corresponding constructor or method.
            </summary>
            <seealso cref="P:System.Reflection.ParameterInfo.IsOptional"/>
        </member>
        <member name="P:Axle.Reflection.IParameter.DefaultValue">
            <summary>
            Gets the default value of the parameter if it has one.
            </summary>
            <seealso cref="P:System.Reflection.ParameterInfo.DefaultValue"/>
        </member>
        <member name="P:Axle.Reflection.IParameter.Direction">
            <summary>
            Gets a value indicating the direction of the current <see cref="T:Axle.Reflection.IParameter">parameter</see>.
            </summary>
        </member>
        <member name="T:Axle.Reflection.IProperty">
            <summary>
            An interface representing a reflected property member.
            </summary>
            <seealso cref="T:System.Reflection.PropertyInfo"/>
        </member>
        <member name="T:Axle.Reflection.IReadableMember">
            <summary>
            An interface representing a reflected type member that allows reading its value via a 
            <see cref="T:Axle.Reflection.IGetAccessor">get accessor</see>.
            A readable member usually represents a field or property.
            </summary>
            <seealso cref="T:Axle.Reflection.IField"/>
            <seealso cref="T:Axle.Reflection.IProperty"/>
            <seealso cref="T:Axle.Reflection.IGetAccessor"/>
            <seealso cref="T:Axle.Reflection.IAccessible"/>
        </member>
        <member name="P:Axle.Reflection.IReadableMember.GetAccessor">
            <summary>
            The accessor used to read the member's value.
            </summary>
        </member>
        <member name="T:Axle.Reflection.IReadOnlyProperty">
            <summary>
            An interface representing a reflected read-only property member.
            </summary>
            <seealso cref="T:System.Reflection.PropertyInfo"/>
        </member>
        <member name="T:Axle.Reflection.IReadWriteProperty">
            <summary>
            An interface representing a reflected read-write property member.
            </summary>
            <seealso cref="T:System.Reflection.PropertyInfo"/>
        </member>
        <member name="T:Axle.Reflection.IReflected">
            <summary>
            An interface representing a reflected member; that is, a type member obtained via reflection.
            </summary>
            <seealso cref="T:System.Reflection.MemberInfo"/>
        </member>
        <member name="P:Axle.Reflection.IReflected.ReflectedMember">
            <summary>
            A reference to the underlying reflected member.
            </summary>
        </member>
        <member name="T:Axle.Reflection.IReflected`1">
            <summary>
            A generic interface representing a reflected member; that is, a type member obtained via reflection.
            </summary>
            <typeparam name="T">
            The actual type of the reflected member.
            </typeparam>
            <seealso cref="T:Axle.Reflection.IReflected"/>
        </member>
        <member name="P:Axle.Reflection.IReflected`1.ReflectedMember">
            <summary>
            A reference to the underlying reflected member.
            </summary>
        </member>
        <member name="T:Axle.Reflection.ISetAccessor">
            <summary>
            An interface representing a setter method (or setter) for a class member (a field or property).
            </summary>
            <seealso cref="F:Axle.Reflection.AccessorType.Set">AccessorType.Set</seealso>
            <seealso cref="T:Axle.Reflection.IGetAccessor" />
            <seealso cref="T:Axle.Reflection.IAccessor" />
            <seealso cref="T:Axle.Reflection.IWriteableMember" />
        </member>
        <member name="M:Axle.Reflection.ISetAccessor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the represented <see cref="T:Axle.Reflection.IField">field</see> or <see cref="T:Axle.Reflection.IProperty">property</see>
            to the object specified by the <paramref name="value"/> object.
            </summary>
            <param name="target">
            The target object that owns the member whose value is being set.
            </param>
            <param name="value">
            The value to be set.
            </param>
        </member>
        <member name="T:Axle.Reflection.ITypeIntrospector">
            <summary>
            An interface for a type introspector; that is, an utility to provide reflection information on members of a 
            given type.
            </summary>
        </member>
        <member name="M:Axle.Reflection.ITypeIntrospector.GetConstructor(Axle.Reflection.ScanOptions,System.Type[])">
            <summary>
            Looks up a <see cref="T:Axle.Reflection.IConstructor"/> for the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType">introspected type</see>
            that matches the provided <paramref name="scanOptions"/> and a signature conforming to the specified <paramref name="argumentTypes"/>.
            </summary>
            <param name="scanOptions">
            One of the <see cref="T:Axle.Reflection.ScanOptions"/> values, representing the reflection lookup flags.
            </param>
            <param name="argumentTypes">
            An array of types to match the signature of the constructor being looked up.
            </param>
            <returns>
            An instance of <see cref="T:Axle.Reflection.IConstructor"/> representing the reflected constructor, or <c>null</c> if the lookup did not yield any results.
            </returns>
        </member>
        <member name="M:Axle.Reflection.ITypeIntrospector.GetConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a <see cref="T:Axle.Reflection.IConstructor"/> instance from the provided <paramref name="reflectedConstructor"/>.
            </summary>
            <param name="reflectedConstructor">
            An already reflected <see cref="T:System.Reflection.ConstructorInfo"/>.
            </param>
            <returns>
            A <see cref="T:Axle.Reflection.IConstructor"/> instance created from the supplied <paramref name="reflectedConstructor"/>.
            </returns>
        </member>
        <member name="M:Axle.Reflection.ITypeIntrospector.GetConstructors(Axle.Reflection.ScanOptions)">
            <summary>
            Looks up a collection of <see cref="T:Axle.Reflection.IConstructor">constructors</see> for the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType">introspected type</see>
            that match the provided <paramref name="scanOptions"/>.
            </summary>
            <param name="scanOptions">
            One of the <see cref="T:Axle.Reflection.ScanOptions"/> values, representing the reflection lookup flags.
            </param>
            <returns>
            An array of <see cref="T:Axle.Reflection.IConstructor"/> representing the reflected constructors, or an empty array if the lookup did not yield any results.
            </returns>
        </member>
        <member name="M:Axle.Reflection.ITypeIntrospector.GetMethod(System.Reflection.MethodInfo)">
            <summary>
            Creates a <see cref="T:Axle.Reflection.IMethod"/> instance from the provided <paramref name="reflectedMethod"/>.
            </summary>
            <param name="reflectedMethod">
            An already reflected <see cref="T:System.Reflection.MethodInfo"/>.
            </param>
            <returns>
            A <see cref="T:Axle.Reflection.IMethod"/> instance created from the supplied <paramref name="reflectedMethod"/>.
            </returns>
        </member>
        <member name="M:Axle.Reflection.ITypeIntrospector.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Creates a <see cref="T:Axle.Reflection.IProperty"/> instance from the provided <paramref name="reflectedProperty"/>.
            </summary>
            <param name="reflectedProperty">
            An already reflected <see cref="T:System.Reflection.PropertyInfo"/>.
            </param>
            <returns>
            A <see cref="T:Axle.Reflection.IProperty"/> instance created from the supplied <paramref name="reflectedProperty"/>.
            </returns>
        </member>
        <member name="M:Axle.Reflection.ITypeIntrospector.GetProperties(Axle.Reflection.ScanOptions)">
            <summary>
            Gets an array representing the properties that are declared or inherited by the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/>,
            filtered in accordance to the provided <paramref name="scanOptions"/>.
            </summary>
            <param name="scanOptions">
            One, or a combination of the <see cref="T:Axle.Reflection.ScanOptions"/> values representing the reflection search criteria.
            </param>
            <returns>
            An array representing the properties that are declared or inherited by the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/>,
            filtered in accordance to the provided <paramref name="scanOptions"/>.
            </returns>
        </member>
        <member name="M:Axle.Reflection.ITypeIntrospector.GetField(System.Reflection.FieldInfo)">
            <summary>
            Creates a <see cref="T:Axle.Reflection.IField"/> instance from the provided <paramref name="reflectedField"/>.
            </summary>
            <param name="reflectedField">
            An already reflected <see cref="T:System.Reflection.FieldInfo"/>.
            </param>
            <returns>
            A <see cref="T:Axle.Reflection.IField"/> instance created from the supplied <paramref name="reflectedField"/>.
            </returns>
        </member>
        <member name="M:Axle.Reflection.ITypeIntrospector.GetFields(Axle.Reflection.ScanOptions)">
            <summary>
            Gets an array representing the fields that are declared or inherited by the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/>,
            filtered in accordance to the provided <paramref name="scanOptions"/>.
            </summary>
            <param name="scanOptions">
            One, or a combination of the <see cref="T:Axle.Reflection.ScanOptions"/> values representing the reflection search criteria.
            </param>
            <returns>
            An array representing the fields that are declared or inherited by the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/>,
            filtered in accordance to the provided <paramref name="scanOptions"/>.
            </returns>
        </member>
        <member name="M:Axle.Reflection.ITypeIntrospector.GetEvent(System.Reflection.EventInfo)">
            <summary>
            Creates an <see cref="T:Axle.Reflection.IEvent"/> instance from the provided <paramref name="reflectedEvent"/>.
            </summary>
            <param name="reflectedEvent">
            An already reflected <see cref="T:System.Reflection.EventInfo"/>.
            </param>
            <returns>
            A <see cref="T:Axle.Reflection.IEvent"/> instance created from the supplied <paramref name="reflectedEvent"/>.
            </returns>
        </member>
        <member name="M:Axle.Reflection.ITypeIntrospector.GetEvents(Axle.Reflection.ScanOptions)">
            <summary>
            Gets an array representing the events that are declared or inherited by the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/>,
            filtered in accordance to the provided <paramref name="scanOptions"/>.
            </summary>
            <param name="scanOptions">
            One, or a combination of the <see cref="T:Axle.Reflection.ScanOptions"/> values representing the reflection search criteria.
            </param>
            <returns>
            An array representing the events that are declared or inherited by the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/>,
            filtered in accordance to the provided <paramref name="scanOptions"/>.
            </returns>
        </member>
        <member name="M:Axle.Reflection.ITypeIntrospector.GetGenericTypeDefinition">
            <summary>
            Gets a <see cref="T:Axle.Reflection.IGenericTypeIntrospector"/> for accessing the type's generic definition,
            if the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is a generic type, or <c><see langword="null"/></c> otherwise.
            </summary>
            <returns>
            A <see cref="T:Axle.Reflection.IGenericTypeIntrospector"/> if the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is a generic type;
            otherwise <c><see langword="null"/></c>
            </returns>
            <seealso cref="P:Axle.Reflection.ITypeIntrospector.IsGenericType"/>
            <seealso cref="P:Axle.Reflection.ITypeIntrospector.IsGenericTypeDefinition"/>
            <seealso cref="T:Axle.Reflection.IGenericTypeIntrospector"/>
        </member>
        <member name="M:Axle.Reflection.ITypeIntrospector.CreateInstance(System.Object[])">
            <summary>
            Creates an instance of the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> using the constructor
            that best matches the specified parameters via <paramref name="args"/>
            </summary>
            <param name="args">
            An array of arguments that match in count, order and type the parameters
            of the constructor to invoke.
            </param>
            <returns>
            A new instance of the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is <c><see langword="abstract"/></c> or an interface type.
            -OR-
            The <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is a generic definition with unbound type arguments.
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
            The constructor being called throws an exception.
            </exception>
        </member>
        <member name="P:Axle.Reflection.ITypeIntrospector.IntrospectedType">
            <summary>
            The <see cref="T:System.Type"/> which the current <see cref="T:Axle.Reflection.IIntrospector"/> instance provides reflected information for.
            </summary>
        </member>
        <member name="P:Axle.Reflection.ITypeIntrospector.TypeFlags">
            <summary>
            Gets a value representing one or a combination of several <see cref="T:Axle.Reflection.TypeFlags"/> values which describe
            the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> properties;
            </summary>
            <seealso cref="T:Axle.Reflection.TypeFlags"/>
        </member>
        <member name="P:Axle.Reflection.ITypeIntrospector.AccessModifier">
            <summary>
            Gets the <see cref="P:Axle.Reflection.ITypeIntrospector.AccessModifier"/> for the given type.
            </summary>
        </member>
        <member name="P:Axle.Reflection.ITypeIntrospector.TypeCode">
            <summary>
            Gets the underlying <see cref="P:Axle.Reflection.ITypeIntrospector.TypeCode"/> for the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/>.
            </summary>
        </member>
        <member name="P:Axle.Reflection.ITypeIntrospector.IsGenericType">
            <summary>
            Checks whether the specified <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is a generic type.
            </summary>
            <returns>
            <c><see langword="true"/></c> if the current <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is a generic type; 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="P:Axle.Reflection.ITypeIntrospector.IsGenericTypeDefinition">
            <summary>
            Checks whether the specified <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is a generic type definition.
            </summary>
            <returns>
            <c><see langword="true"/></c> if the current <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is a generic type definition; 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="P:Axle.Reflection.ITypeIntrospector.IsDelegate">
            <summary>
            Determines if the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is a delegate.
            </summary>
            <returns>
            <c><see langword="true"/></c> if the provided <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is a delegate;
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="P:Axle.Reflection.ITypeIntrospector.IsNullableType">
            <summary>
            Checks whether the specified <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is a nullable type.
            </summary>
            <returns>
            <c><see langword="true"/></c> if the current <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is a nullable type; 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="P:Axle.Reflection.ITypeIntrospector.IsAbstract">
            <summary>
            Checks whether the specified <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is abstract.
            </summary>
            <returns>
            <c><see langword="true"/></c> if the current <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> is abstract; 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="P:Axle.Reflection.ITypeIntrospector.IsEnum">
            <summary>
            Gets a value indicating whether the <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> represents an enumeration.
            </summary>
            <returns>
            <c><see langword="true"/></c> if the current <see cref="P:Axle.Reflection.ITypeIntrospector.IntrospectedType"/> represents an enumeration; 
            <c><see langword="false"/></c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Reflection.ITypeIntrospector`1">
            <summary>
            A generic version of the <see cref="T:Axle.Reflection.ITypeIntrospector"/> interface.
            </summary>
            <typeparam name="T">
            The introspected by the current <see cref="T:Axle.Reflection.ITypeIntrospector`1"/> instance type.
            </typeparam>
        </member>
        <member name="T:Axle.Reflection.IWriteableMember">
            <summary>
            An interface representing a type member that allows updating its value via a <see cref="T:Axle.Reflection.ISetAccessor">set accessor</see>. 
            A writable member usually represents a field or property.
            </summary>
            <seealso cref="T:Axle.Reflection.IField"/>
            <seealso cref="T:Axle.Reflection.IProperty"/>
            <seealso cref="T:Axle.Reflection.ISetAccessor"/>
        </member>
        <member name="P:Axle.Reflection.IWriteableMember.SetAccessor">
            <summary>
            The accessor used to update the member's value. 
            </summary>
        </member>
        <member name="T:Axle.Reflection.IWriteOnlyProperty">
            <summary>
            An interface representing a reflected write-only property member.
            </summary>
            <seealso cref="T:System.Reflection.PropertyInfo"/>
        </member>
        <member name="T:Axle.Reflection.MemberExtensions">
            <summary>
            A static class containing common extension methods to reflected members.
            </summary>
        </member>
        <member name="M:Axle.Reflection.MemberExtensions.HasAttribute``1(Axle.Reflection.IAttributeTarget)">
            <summary>
            Determines if the given <see cref="T:Axle.Reflection.IAttributeTarget"/> instance has an attribute of the type <typeparamref name="TAttribute"/> defined.
            </summary>
            <typeparam name="TAttribute">
            The type of an attribute to check if defined for the current <see cref="T:Axle.Reflection.IAttributeTarget"/> instance.
            <para>
            Only types inheriting from the <see cref="T:System.Attribute"/> class must be specified.
            </para>
            </typeparam>
            <param name="member">
            The target <see cref="T:Axle.Reflection.IAttributeTarget"/> instance this extension method is executed against.
            </param>
            <returns>
            <c>true</c> if the given <see cref="T:Axle.Reflection.IAttributeTarget"/> instance has an attribute of the type <typeparamref name="TAttribute"/> defined; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Reflection.MemberExtensions.HasAttribute(Axle.Reflection.IAttributeTarget,System.Type)">
            <summary>
            Determines if the given <see cref="T:Axle.Reflection.IAttributeTarget"/> instance has an attribute of the type <paramref name="attributeType"/> defined.
            </summary>
            <param name="member">
            The target <see cref="T:Axle.Reflection.IAttributeTarget"/> instance this extension method is executed against.
            </param>
            <param name="attributeType">
            The type of an attribute to check if defined for the current <see cref="T:Axle.Reflection.IAttributeTarget"/> instance.
            <para>
            Only types inheriting from the <see cref="T:System.Attribute"/> class must be specified.
            </para>
            </param>
            <returns>
            <c>true</c> if the given <see cref="T:Axle.Reflection.IAttributeTarget"/> instance has an attribute of the type <paramref name="attributeType"/> defined; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="member"/> or <paramref name="attributeType"/> is <c>null</c>.
            </exception>
            <exception cref="T:Axle.Verification.ArgumentTypeMismatchException">
            The <paramref name="attributeType"/> does not represent a valid <see cref="T:System.Attribute"/> type.
            </exception>
        </member>
        <member name="T:Axle.Reflection.MethodBaseToken`1">
            <summary>
            An abstract class representing the common reflected data from a class method or constructor.
            </summary>
            <typeparam name="T">
            A suitable implementation of the <see cref="T:System.Reflection.MethodBase"/> class representing the underlying reflected member 
            for the current <see cref="T:Axle.Reflection.MethodBaseToken`1"/> instance.
            </typeparam>
        </member>
        <member name="M:Axle.Reflection.MethodToken.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a new <see cref="T:Axle.Reflection.MethodToken"/> instance using the provided <paramref name="info"/>.
            </summary>
            <param name="info">
            A <see cref="T:System.Reflection.MethodInfo"/> object containing the reflected information for the represented method.
            </param>
        </member>
        <member name="T:Axle.Reflection.ParameterDirection">
            <summary>
            An enumeration representing the possible parameter directions.
            </summary>
        </member>
        <member name="F:Axle.Reflection.ParameterDirection.Unknown">
            <summary>
            The parameter direction could not be determined.
            </summary>
        </member>
        <member name="F:Axle.Reflection.ParameterDirection.Input">
            <summary>
            A flag used to mark an input parameter.
            </summary>
            <seealso cref="P:System.Reflection.ParameterInfo.IsIn"/>
        </member>
        <member name="F:Axle.Reflection.ParameterDirection.Output">
            <summary>
            A flag used to mark an output parameter.
            </summary>
            <seealso cref="P:System.Reflection.ParameterInfo.IsOut"/>
        </member>
        <member name="F:Axle.Reflection.ParameterDirection.ReturnValue">
            <summary>
            A flag used to mark a return value.
            </summary>
            <seealso cref="P:System.Reflection.ParameterInfo.IsRetval"/>
        </member>
        <member name="F:Axle.Reflection.ParameterDirection.InputOutput">
            <summary>
            A flag used to represent a parameter which is both an input and an output one.
            </summary>
        </member>
        <member name="M:Axle.Reflection.PropertySetAccessor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property to the specified by the parameter <paramref name="value"/> parameter object.
            </summary>
            <param name="target">
            The target object owning the property. Use <c>null</c> if the property is static.
            </param>
            <param name="value">
            The value to be set to the target property.
            </param>
            <seealso cref="T:Axle.Reflection.IProperty"/>
            <seealso cref="T:System.Reflection.PropertyInfo"/>
        </member>
        <member name="T:Axle.Reflection.ReflectionExtensions">
            <summary>
            A static class that contains extension methods to aid the .NET's reflection API.
            </summary>
        </member>
        <member name="M:Axle.Reflection.ReflectionExtensions.IsOverride(System.Reflection.MethodInfo)">
            <summary>
            Determines if a specified <paramref name="method"/> overrides a corresponding method from a base class.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> to check for override.</param>
            <returns>
            <c>true</c> if the specified <paramref name="method"/> overrides a corresponding method from a base class; <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <c>null</c></exception>
        </member>
        <member name="M:Axle.Reflection.ReflectionExtensions.IsOverride(System.Reflection.MethodBase)">
            <summary>
            Determines if a specified <paramref name="method"/> overrides a corresponding method from a base class.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> to check for override.</param>
            <returns>
            <c>true</c> if the specified <paramref name="method"/> overrides a corresponding method from a base class; <c>false</c> otherwise.
            This method also returns <c>false</c> if the <paramref name="method"/> parameter is a constructor.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <c>null</c></exception>
        </member>
        <member name="M:Axle.Reflection.ReflectionExtensions.GetDeclarationType(System.Reflection.MethodBase)">
            <summary>
            Determines the <see cref="T:Axle.Reflection.DeclarationType"/> of the specified <paramref name="methodBase"/>.
            </summary>
            <param name="methodBase">
            The <see cref="T:System.Reflection.MethodBase"/> instance whose declaration type is to be determined.
            </param>
            <returns>
            A member of the <see cref="T:Axle.Reflection.DeclarationType"/> enumeration that corresponds to the specified.
            <paramref name="methodBase"/>'s declaration.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="methodBase"/> is <c>null</c></exception>
            <seealso cref="T:Axle.Reflection.DeclarationType"/>
            <seealso cref="T:System.Reflection.MethodBase"/>
        </member>
        <member name="M:Axle.Reflection.ReflectionExtensions.GetDeclarationType(System.Reflection.FieldInfo)">
            <summary>
            Determines the <see cref="T:Axle.Reflection.DeclarationType"/> of the specified <paramref name="field"/>.
            </summary>
            <param name="field">
            The <see cref="T:System.Reflection.FieldInfo"/> instance whose declaration type is to be determined.
            </param>
            <returns>
            A member of the <see cref="T:Axle.Reflection.DeclarationType"/> enumeration that corresponds to the specified.
            <paramref name="field"/>'s declaration.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="field"/> is <c>null</c></exception>
            <seealso cref="T:Axle.Reflection.DeclarationType"/>
            <seealso cref="T:System.Reflection.FieldInfo"/>
        </member>
        <member name="M:Axle.Reflection.ReflectionExtensions.GetDeclarationType(System.Reflection.MemberInfo)">
            <summary>
            Determines the <see cref="T:Axle.Reflection.DeclarationType"/> of the specified <paramref name="member"/>.
            </summary>
            <param name="member">
            The <see cref="T:System.Reflection.MemberInfo"/> instance whose declaration type is to be determined.
            </param>
            <returns>
            A member of the <see cref="T:Axle.Reflection.DeclarationType"/> enumeration that corresponds to the specified.
            <paramref name="member"/>'s declaration.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="member"/> is <c>null</c></exception>
            <seealso cref="T:Axle.Reflection.DeclarationType"/>
            <seealso cref="T:System.Reflection.MemberInfo"/>
        </member>
        <member name="M:Axle.Reflection.ReflectionExtensions.IsInstance(Axle.Reflection.DeclarationType)">
            <summary>
            Determines if a <see cref="T:Axle.Reflection.DeclarationType"/> value contains the <see cref="F:Axle.Reflection.DeclarationType.Instance"/> flag.
            </summary>
            <param name="declaration">The <see cref="T:Axle.Reflection.DeclarationType"/> value to check.</param>
            <returns>
            <c>true</c> if the <paramref name="declaration"/> value contains the <see cref="F:Axle.Reflection.DeclarationType.Instance"/> flag;
            <c>false</c> otherwise
            </returns>
            <seealso cref="F:Axle.Reflection.DeclarationType.Instance"/>
            <seealso cref="T:Axle.Reflection.DeclarationType"/>
        </member>
        <member name="M:Axle.Reflection.ReflectionExtensions.IsStatic(Axle.Reflection.DeclarationType)">
            <summary>
            Determines if a <see cref="T:Axle.Reflection.DeclarationType"/> value contains the <see cref="F:Axle.Reflection.DeclarationType.Static"/> flag.
            </summary>
            <param name="declaration">The <see cref="T:Axle.Reflection.DeclarationType"/> value to check.</param>
            <returns>
            <c>true</c> if the <paramref name="declaration"/> value contains the <see cref="F:Axle.Reflection.DeclarationType.Static"/> flag;
            <c>false</c> otherwise.
            </returns>
            <seealso cref="F:Axle.Reflection.DeclarationType.Static"/>
            <seealso cref="T:Axle.Reflection.DeclarationType"/>
        </member>
        <member name="M:Axle.Reflection.ReflectionExtensions.IsAbstract(Axle.Reflection.DeclarationType)">
            <summary>
            Determines if a <see cref="T:Axle.Reflection.DeclarationType"/> value contains the <see cref="F:Axle.Reflection.DeclarationType.Abstract"/> flag.
            </summary>
            <param name="declaration">The <see cref="T:Axle.Reflection.DeclarationType"/> value to check.</param>
            <returns>
            <c>true</c> if the <paramref name="declaration"/> value contains the <see cref="F:Axle.Reflection.DeclarationType.Abstract"/> flag;
            <c>false</c> otherwise
            </returns>
            <seealso cref="F:Axle.Reflection.DeclarationType.Abstract"/>
            <seealso cref="T:Axle.Reflection.DeclarationType"/>
        </member>
        <member name="M:Axle.Reflection.ReflectionExtensions.IsOverride(Axle.Reflection.DeclarationType)">
            <summary>
            Determines if a <see cref="T:Axle.Reflection.DeclarationType"/> value contains the <see cref="F:Axle.Reflection.DeclarationType.Override"/> flag.
            </summary>
            <param name="declaration">The <see cref="T:Axle.Reflection.DeclarationType"/> value to check.</param>
            <returns>
            <c>true</c> if the <paramref name="declaration"/> value contains the <see cref="F:Axle.Reflection.DeclarationType.Override"/> flag;
            <c>false</c> otherwise
            </returns>
            <seealso cref="F:Axle.Reflection.DeclarationType.Override"/>
            <seealso cref="T:Axle.Reflection.DeclarationType"/>
        </member>
        <member name="M:Axle.Reflection.ReflectionExtensions.IsHideBySig(Axle.Reflection.DeclarationType)">
            <summary>
            Determines if a <see cref="T:Axle.Reflection.DeclarationType"/> value contains the <see cref="F:Axle.Reflection.DeclarationType.HideBySig"/> flag.
            </summary>
            <param name="declaration">The <see cref="T:Axle.Reflection.DeclarationType"/> value to check.</param>
            <returns>
            <c>true</c> if the <paramref name="declaration"/> value contains the <see cref="F:Axle.Reflection.DeclarationType.HideBySig"/> flag;
            <c>false</c> otherwise
            </returns>
            <seealso cref="F:Axle.Reflection.DeclarationType.HideBySig"/>
            <seealso cref="T:Axle.Reflection.DeclarationType"/>
        </member>
        <member name="M:Axle.Reflection.ReflectionExtensions.IsSealed(Axle.Reflection.DeclarationType)">
            <summary>
            Determines if a <see cref="T:Axle.Reflection.DeclarationType"/> value contains the <see cref="F:Axle.Reflection.DeclarationType.Sealed"/> flag.
            </summary>
            <param name="declaration">The <see cref="T:Axle.Reflection.DeclarationType"/> value to check.</param>
            <returns>
            <c>true</c> if the <paramref name="declaration"/> value contains the <see cref="F:Axle.Reflection.DeclarationType.Sealed"/> flag;
            <c>false</c> otherwise.
            </returns>
            <seealso cref="F:Axle.Reflection.DeclarationType.Sealed"/>
            <seealso cref="T:Axle.Reflection.DeclarationType"/>
        </member>
        <member name="M:Axle.Reflection.ReflectionExtensions.GetDeclarationType(System.Reflection.PropertyInfo)">
            <summary>
            Determines the <see cref="T:Axle.Reflection.DeclarationType"/> of the specified <paramref name="property"/>.
            </summary>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> instance whose declaration type is to be determined.</param>
            <returns>
            A member of the <see cref="T:Axle.Reflection.DeclarationType"/> enumeration that corresponds to the specified.
            <paramref name="property"/>'s declaration.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="property"/> is <c>null</c></exception>
            <seealso cref="T:Axle.Reflection.DeclarationType"/>
            <seealso cref="T:System.Reflection.PropertyInfo"/>
        </member>
        <member name="M:Axle.Reflection.ReflectionExtensions.GetDeclarationType(System.Reflection.EventInfo)">
            <summary>
            Determines the <see cref="T:Axle.Reflection.DeclarationType"/> of the specified <paramref name="eventInfo"/>.
            </summary>
            <param name="eventInfo">
            The <see cref="T:System.Reflection.EventInfo"/> instance whose declaration type is to be determined.
            </param>
            <returns>
            A member of the <see cref="T:Axle.Reflection.DeclarationType"/> enumeration that corresponds to the specified.
            <paramref name="eventInfo"/>'s declaration.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventInfo"/> is <c>null</c></exception>
            <seealso cref="T:Axle.Reflection.DeclarationType"/>
            <seealso cref="T:System.Reflection.EventInfo"/>
        </member>
        <member name="T:Axle.Reflection.ScanOptions">
            <summary>
            An enumeration with all the possible flags that can be used when introspecting 
            a type member.
            </summary>
            <seealso cref="T:Axle.Reflection.ITypeIntrospector"/>
        </member>
        <member name="F:Axle.Reflection.ScanOptions.None">
            <summary>
            Scan results will include nothing.
            </summary>
        </member>
        <member name="F:Axle.Reflection.ScanOptions.Public">
            <summary>
            Scan results will include matching public members.
            </summary>
        </member>
        <member name="F:Axle.Reflection.ScanOptions.NonPublic">
            <summary>
            Scan results will include matching non-public members.
            </summary>
        </member>
        <member name="F:Axle.Reflection.ScanOptions.Static">
            <summary>
            Scan results will include matching static members.
            </summary>
        </member>
        <member name="F:Axle.Reflection.ScanOptions.Instance">
            <summary>
            Scan results will include matching instance members.
            </summary>
        </member>
        <member name="F:Axle.Reflection.ScanOptions.PublicInstance">
            <summary>
            Scan results will include matching public instance members.
            <para>
            This is a shortcut for using the <c>ScanOptions.Public | ScanOptions.Instance</c> flags.
            </para>
            </summary>
        </member>
        <member name="F:Axle.Reflection.ScanOptions.PublicStatic">
            <summary>
            Scan results will include matching public static members.
            <para>
            This is a shortcut for using the <c>ScanOptions.Public | ScanOptions.Static</c> flags.
            </para>
            </summary>
        </member>
        <member name="F:Axle.Reflection.ScanOptions.Default">
            <summary>
            Scan results will include matching public static and instance members.
            </summary>
        </member>
        <member name="T:Axle.Reflection.TypeFlags">
            <summary>
            An enumeration describing the possible categories of a <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.Unknown">
            <summary>
            The type flags cannot be determined.
            </summary>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.Disposable">
            <summary>
            Marks disposable types; i.e. types implementing the <see cref="T:System.IDisposable"/> interface.
            </summary>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.ValueType">
            <summary>
            Represents value types. Those include the pre-defined in the .NET framework primitive types, such as <see cref="T:System.Int32"/>,
            as well as any user type defined as a <c>struct</c>. Value types cannot be represented by the 
            <c><see langword="null"/></c> value (with the exception of nullable value types).
            <seealso cref="T:System.ValueType"/>
            <seealso cref="F:Axle.Reflection.TypeFlags.NullableValueType"/>
            </summary>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.ReferenceType">
            <summary>
            Represents reference types. Reference types are stored in the heap and accessed via a reference (pointer). A reference
            type's pointer may have the <c><see langword="null"/></c> value.
            </summary>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.Generic">
            <summary>
            Represents generic types.
            </summary>
            <seealso cref="F:Axle.Reflection.TypeFlags.GenericDefinition"/>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.Enumerable">
            <summary>
            Represents enumerable types.
            </summary>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.Array">
            <summary>
            Represents array types.
            </summary>
            <seealso cref="F:Axle.Reflection.TypeFlags.GenericDefinition"/>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.Enum">
            <summary>
            Represents enumeration types.
            </summary>
            <seealso cref="!:ValueTuple"/>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.NullableValueType">
            <summary>
            Represents nullable value types. Nullable value types are generic type wrapper with
            the type <see cref="!:Nullable&lt;&gt;"/> as its <see cref="F:Axle.Reflection.TypeFlags.GenericDefinition">generic type definition</see>
            and a regular <see cref="F:Axle.Reflection.TypeFlags.ValueType"/> as the generic parameter. While semantically this is no different
            than other value types, the compiler permits assignment of a <c><see langword="null"/></c> value to instances
            of such nullable types.
            </summary>
            <seealso cref="F:Axle.Reflection.TypeFlags.ValueType"/>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.Abstract">
            <summary>
            Represents abstract reference types.
            </summary>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.Sealed">
            <summary>
            Represents non-inheritable reference types.
            </summary>
            <seealso cref="F:Axle.Reflection.TypeFlags.ReferenceType"/>
            <seealso cref="F:Axle.Reflection.TypeFlags.Interface"/>
            <seealso cref="F:Axle.Reflection.TypeFlags.Abstract"/>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.Static">
            <summary>
            Represents <see langword="static"/> types
            </summary>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.Interface">
            <summary>
            Represents interface types.
            </summary>
            <seealso cref="F:Axle.Reflection.TypeFlags.ReferenceType"/>
            <seealso cref="F:Axle.Reflection.TypeFlags.Abstract"/>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.Delegate">
            <summary>
            Represents delegate types.
            </summary>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.Attribute">
            <summary>
            Represents an <seealso cref="F:Axle.Reflection.TypeFlags.Attribute"/> type.
            </summary>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.GenericDefinition">
            <summary>
            Represents a generic type definition. This is a non-instantiateable representation of a generic type with
            placeholder types in place of the type parameters.
            </summary>
            <seealso cref="F:Axle.Reflection.TypeFlags.Generic"/>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.GenericParameter">
            <summary>
            Represents a generic type parameter.
            </summary>
            <seealso cref="F:Axle.Reflection.TypeFlags.Generic"/>
        </member>
        <member name="F:Axle.Reflection.TypeFlags.Nested">
            <summary>
            Represents a nested type.
            </summary>
        </member>
        <member name="T:Axle.Reflection.TypeFlagsExtensions">
            <summary>
            A static class containing extension methods for the <see cref="T:Axle.Reflection.TypeFlags"/> enum.
            </summary>
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.HasFlag(Axle.Reflection.TypeFlags,Axle.Reflection.TypeFlags)">
            Checks if a particular <paramref name="flag"/> is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsAbstract(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.Abstract"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsArray(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.Array"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsAttribute(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.Attribute"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsDelegate(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.Delegate"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsDisposable(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.Disposable"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsEnum(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.Enum"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsEnumerable(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.Enumerable"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsGeneric(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.Generic"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsGenericDefinition(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.GenericDefinition"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsGenericParameter(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.GenericParameter"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsInterface(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.Interface"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsNested(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.Nested"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsNullableValueType(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.NullableValueType"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsReferenceType(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.ReferenceType"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsSealed(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.Sealed"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsStatic(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.Static"/> flag is set.
        </member>
        <member name="M:Axle.Reflection.TypeFlagsExtensions.IsValueType(Axle.Reflection.TypeFlags)">
            Checks if the <see cref="F:Axle.Reflection.TypeFlags.ValueType"/> flag is set.
        </member>
        <member name="T:Axle.Reflection.TypeIntrospector">
            <summary>
            The default implementation of the <see cref="T:Axle.Reflection.ITypeIntrospector"/> interface.
            </summary>
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Reflection.TypeIntrospector" /> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to provide reflected information for by the current <see cref="T:Axle.Reflection.TypeIntrospector"/>
            instance.
            </param>
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetAttributes">
            <inheritdoc cref="M:Axle.Reflection.TypeIntrospector.GetAttributes"/>
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetAttributes(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetAttributes(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetConstructor(Axle.Reflection.ScanOptions,System.Type[])">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetConstructor(System.Reflection.ConstructorInfo)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetConstructors(Axle.Reflection.ScanOptions)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetMethod(Axle.Reflection.ScanOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetMethod(System.Reflection.MethodInfo)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetMethods(Axle.Reflection.ScanOptions)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetProperty(Axle.Reflection.ScanOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetProperties(Axle.Reflection.ScanOptions)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetField(Axle.Reflection.ScanOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetField(System.Reflection.FieldInfo)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetFields(Axle.Reflection.ScanOptions)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetEvent(Axle.Reflection.ScanOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetEvent(System.Reflection.EventInfo)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.GetEvents(Axle.Reflection.ScanOptions)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector.IsAttributeDefined(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Reflection.TypeIntrospector`1">
            <summary>
            The default implementation of the <see cref="T:Axle.Reflection.ITypeIntrospector`1"/> interface.
            </summary>
            <typeparam name="T">
            The <see cref="T:System.Type"/> to provide reflected information for by the current <see cref="T:Axle.Reflection.TypeIntrospector`1"/>
            </typeparam>
        </member>
        <member name="M:Axle.Reflection.TypeIntrospector`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Reflection.TypeIntrospector`1" /> class.
            </summary>
        </member>
        <member name="T:Axle.Signal">
            <summary>
            A class that represents a signal object; that is, a wrapper around a delegate (usually of type <see cref="T:System.Action"/>), 
            which enables special event subscription options around that delegate.
            </summary>
        </member>
        <member name="M:Axle.Signal.op_Addition(Axle.Signal,System.Action)">
            <summary>
            An operator that acts as a shortcut to the <see cref="M:Axle.Signal.Subscribe(System.Action)"/> method.
            </summary>
            <param name="signal">
            The <see cref="T:Axle.Signal"/> instance to subscribe to. 
            </param>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal.op_Subtraction(Axle.Signal,System.Action)">
            <summary>
            An operator that acts as a shortcut to the <see cref="M:Axle.Signal.Unsubscribe(System.Action)"/> method.
            </summary>
            <param name="signal">
            The <see cref="T:Axle.Signal"/> instance to unsubscribe from. 
            </param>
            <param name="action">
            The unsubscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal.op_ExclusiveOr(Axle.Signal,System.Action)">
            <summary>
            An operator that acts as a shortcut to the <see cref="M:Axle.Signal.SubscribeOnce(System.Action)"/> method.
            </summary>
            <param name="signal">
            The <see cref="T:Axle.Signal"/> instance to subscribe to. 
            </param>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal.Subscribe(System.Action)">
            <summary>
            Adds the provided by the <paramref name="action"/> delegate as a subscriber to the current <see cref="T:Axle.Signal"/> instance.
            </summary>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal.SubscribeOnce(System.Action)">
            <summary>
            Adds the provided by the <paramref name="action"/> delegate as a subscriber to the current <see cref="T:Axle.Signal"/> instance.
            The delegate will be executed only once when the signal is triggered. 
            </summary>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal.SubscribeWhile(System.Action,System.Func{System.Boolean})">
            <summary>
            Adds the provided by the <paramref name="action"/> delegate as a subscriber to the current <see cref="T:Axle.Signal"/> instance.
            The delegate will be executed on each signal trigger as long as the provided by the <paramref name="predicate"/> evaluates to <c>true</c>. 
            </summary>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing <c>null</c> will have no effect on the existing subscriptions. 
            </param>
            <param name="predicate">
            A predicate that determines whether the subscription delegate provided by the <paramref name="action"/> will be invoked upon triggering the signal. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is <c>null</c>. 
            </exception>
        </member>
        <member name="M:Axle.Signal.Unsubscribe(System.Action)">
            <summary>
            Removes the provided delegate from any subscriptions to the current <see cref="T:Axle.Signal"/> instance
            </summary>
            <param name="action">
            The unsubscribing delegate. Can be <c>null</c>. Passing <c>null</c> value will cause no effect. 
            </param>
        </member>
        <member name="M:Axle.Signal.Create(System.Func{System.Action},System.Func{System.Action,System.Action})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Signal"/> class using the specified action object.
            </summary>
            <param name="dereference">
            A function that dereferences the signal's underlying delegate for the signal's internal processing. 
            </param>
            <param name="update">
            A function that updates the underlying signal reference. Used for the signal's internal processing. 
            </param>
        </member>
        <member name="M:Axle.Signal.Create``1(System.Func{System.Action{``0}},System.Func{System.Action{``0},System.Action{``0}})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Signal"/> class using the specified action object.
            </summary>
            <param name="dereference">
            A function that dereferences the signal's underlying delegate for the signal's internal processing. 
            </param>
            <param name="update">
            A function that updates the underlying signal reference. Used for the signal's internal processing. 
            </param>
        </member>
        <member name="M:Axle.Signal.Create``2(System.Func{System.Action{``0,``1}},System.Func{System.Action{``0,``1},System.Action{``0,``1}})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Signal"/> class using the specified action object.
            </summary>
            <param name="dereference">
            A function that dereferences the signal's underlying delegate for the signal's internal processing. 
            </param>
            <param name="update">
            A function that updates the underlying signal reference. Used for the signal's internal processing. 
            </param>
        </member>
        <member name="T:Axle.Signal`1">
            <summary>
            A class that represents a signal object; that is, a wrapper around a delegate (usually of type <see cref="T:System.Action`1"/>), 
            which enables special event subscription options around that delegate.
            </summary>
        </member>
        <member name="M:Axle.Signal`1.op_Addition(Axle.Signal{`0},System.Action{`0})">
            <summary>
            An operator that acts as a shortcut to the <see cref="M:Axle.Signal`1.Subscribe(System.Action{`0})"/> method.
            </summary>
            <param name="signal">
            The <see cref="T:Axle.Signal`1"/> instance to subscribe to. 
            </param>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal`1.op_Subtraction(Axle.Signal{`0},System.Action{`0})">
            <summary>
            An operator that acts as a shortcut to the <see cref="M:Axle.Signal`1.Unsubscribe(System.Action{`0})"/> method.
            </summary>
            <param name="signal">
            The <see cref="T:Axle.Signal`1"/> instance to unsubscribe from. 
            </param>
            <param name="action">
            The unsubscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal`1.op_ExclusiveOr(Axle.Signal{`0},System.Action{`0})">
            <summary>
            An operator that acts as a shortcut to the <see cref="M:Axle.Signal`1.SubscribeOnce(System.Action{`0})"/> method.
            </summary>
            <param name="signal">
            The <see cref="T:Axle.Signal`1"/> instance to subscribe to. 
            </param>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal`1.Subscribe(System.Action{`0})">
            <summary>
            Adds the provided by the <paramref name="action"/> delegate as a subscriber to the current <see cref="T:Axle.Signal`1"/> instance.
            </summary>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal`1.SubscribeOnce(System.Action{`0})">
            <summary>
            Adds the provided by the <paramref name="action"/> delegate as a subscriber to the current <see cref="T:Axle.Signal`1"/> instance.
            The delegate will be executed only once when the signal is triggered. 
            </summary>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal`1.SubscribeWhile(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Adds the provided by the <paramref name="action"/> delegate as a subscriber to the current <see cref="T:Axle.Signal`1"/> instance.
            The delegate will be executed on each signal trigger as long as the provided by the <paramref name="predicate"/> evaluates to <c>true</c>. 
            </summary>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
            <param name="predicate">
            A predicate that determines whether the subscription delegate provided by the <paramref name="action"/> will be invoked upon triggering the signal. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is <c>null</c>. 
            </exception>
        </member>
        <member name="M:Axle.Signal`1.Unsubscribe(System.Action{`0})">
            <summary>
            Removes the provided delegate from any subscriptions to the current <see cref="T:Axle.Signal`1"/> instance
            </summary>
            <param name="action">
            The unsubscribing delegate. Can be <c>null</c>. Passing <c>null</c> value will cause no effect. 
            </param>
        </member>
        <member name="T:Axle.Signal`2">
            <summary>
            A class that represents a signal object; that is, a wrapper around a delegate (usually of type <see cref="T:System.Action`2"/>), 
            which enables special event subscription options around that delegate.
            </summary>
        </member>
        <member name="M:Axle.Signal`2.op_Addition(Axle.Signal{`0,`1},System.Action{`0,`1})">
            <summary>
            An operator that acts as a shortcut to the <see cref="M:Axle.Signal`2.Subscribe(System.Action{`0,`1})"/> method.
            </summary>
            <param name="signal">
            The <see cref="T:Axle.Signal`2"/> instance to subscribe to. 
            </param>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal`2.op_Subtraction(Axle.Signal{`0,`1},System.Action{`0,`1})">
            <summary>
            An operator that acts as a shortcut to the <see cref="M:Axle.Signal`2.Unsubscribe(System.Action{`0,`1})"/> method.
            </summary>
            <param name="signal">
            The <see cref="T:Axle.Signal`2"/> instance to subscribe from. 
            </param>
            <param name="action">
            The unsubscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal`2.op_ExclusiveOr(Axle.Signal{`0,`1},System.Action{`0,`1})">
            <summary>
            An operator that acts as a shortcut to the <see cref="M:Axle.Signal`2.SubscribeOnce(System.Action{`0,`1})"/> method.
            </summary>
            <param name="signal">
            The <see cref="T:Axle.Signal`2"/> instance to subscribe to. 
            </param>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal`2.Subscribe(System.Action{`0,`1})">
            <summary>
            Adds the provided by the <paramref name="action"/> delegate as a subscriber to the current <see cref="T:Axle.Signal`2"/> instance.
            </summary>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal`2.SubscribeOnce(System.Action{`0,`1})">
            <summary>
            Adds the provided by the <paramref name="action"/> delegate as a subscriber to the current <see cref="T:Axle.Signal`2"/> instance.
            The delegate will be executed only once when the signal is triggered. 
            </summary>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
        </member>
        <member name="M:Axle.Signal`2.SubscribeWhile(System.Action{`0,`1},System.Func{`0,`1,System.Boolean})">
            <summary>
            Adds the provided by the <paramref name="action"/> delegate as a subscriber to the current <see cref="T:Axle.Signal`2"/> instance.
            The delegate will be executed on each signal trigger as long as the provided by the <paramref name="predicate"/> evaluates to <c>true</c>. 
            </summary>
            <param name="action">
            The subscribing delegate. Can be <c>null</c>. Passing null will have no effect on the existing subscriptions. 
            </param>
            <param name="predicate">
            A predicate that determines whether the subscription delegate provided by the <paramref name="action"/> will be invoked upon triggering the signal. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="predicate"/> is <c>null</c>. </para>
            </exception>
        </member>
        <member name="M:Axle.Signal`2.Unsubscribe(System.Action{`0,`1})">
            <summary>
            Removes the provided delegate from any subscriptions to the current <see cref="T:Axle.Signal`2"/> instance.
            </summary>
            <param name="action">
            The unsubscribing delegate. Can be <c>null</c>. Passing <c>null</c> value will cause no effect. 
            </param>
        </member>
        <member name="T:Axle.Text.Expressions.Path.AbstractPathExpression">
            <summary>
            An abstract class aiding the implementation of the <see cref="T:Axle.Text.Expressions.Path.IPathExpression"/> interface.
            </summary>
        </member>
        <member name="M:Axle.Text.Expressions.Path.AbstractPathExpression.EscapeRegex(System.String)">
            <summary>
            A helper function that is used to escape a given <see cref="T:System.String"/> <paramref name="value"/> in order for it to 
            become a valid regex expression.
            </summary>
            <param name="value">
            The <see cref="T:System.String"/> value to escape.
            </param>
            <returns>
            A <see cref="T:System.String"/> instance produced from the <paramref name="value"/> parameter by escaping 
            all special regex symbols that were present in the original value. The resulting string is therefore
            suitable to be used as a pattern when creating a <see cref="T:System.Text.RegularExpressions.Regex"/> object.
            </returns>
            <seealso cref="T:System.Text.RegularExpressions.Regex"/>
        </member>
        <member name="M:Axle.Text.Expressions.Path.AbstractPathExpression.#ctor(System.String,System.Func{System.String,System.Text.RegularExpressions.RegexOptions,System.Text.RegularExpressions.Regex})">
            <summary>
            The base constructor of the <see cref="T:Axle.Text.Expressions.Path.AbstractPathExpression"/> that is required by the implementing classes. 
            </summary>
            <param name="pattern">
            A valid regular expression pattern string.
            </param>
            <param name="regexFactory">
            A function that is responsible for creating the underlying regular expression which will be used by the 
            current <see cref="T:Axle.Text.Expressions.Path.AbstractPathExpression"/> implementation.
            </param>
        </member>
        <member name="M:Axle.Text.Expressions.Path.AbstractPathExpression.IsMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Path.AbstractPathExpression.IsMatch(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Path.AbstractPathExpression.Match(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Path.AbstractPathExpression.Match(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Path.AbstractPathExpression.Split(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Path.AbstractPathExpression.Split(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Path.AbstractPathExpression.Split(System.String,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Path.AbstractPathExpression.ToString">
            <summary>
            Returns the <see cref="P:Axle.Text.Expressions.Path.AbstractPathExpression.Pattern"/> property's value.
            </summary>
            <returns>
            The <see cref="P:Axle.Text.Expressions.Path.AbstractPathExpression.Pattern"/> property's value.
            </returns>
        </member>
        <member name="P:Axle.Text.Expressions.Path.AbstractPathExpression.Pattern">
            <summary>
            Gets the globbing pattern used by the current <see cref="T:Axle.Text.Expressions.Path.IPathExpression"/> implementation.
            </summary>
        </member>
        <member name="T:Axle.Text.Expressions.Path.AssemblyPathExpression">
            <summary>
            An implementation of the <see cref="T:Axle.Text.Expressions.Path.IPathExpression" /> interface that is used to match paths for
            assemblies or embedded resources inside assemblies.
            </summary>
        </member>
        <member name="M:Axle.Text.Expressions.Path.AssemblyPathExpression.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Text.Expressions.Path.AssemblyPathExpression"/> class using the provided <paramref name="pattern"/>.
            </summary>
            <param name="pattern">
            The pattern that to match.
            </param>
        </member>
        <member name="M:Axle.Text.Expressions.Path.AssemblyPathExpression.IsMatch(System.Reflection.Assembly)">
            <summary>
            Indicates whether the provided <paramref name="value"/> matches against the current <see cref="T:Axle.Text.Expressions.Path.AssemblyPathExpression"/>'s pattern.
            </summary>
            <param name="value">
            The value to match against the current <see cref="T:Axle.Text.Expressions.Path.AssemblyPathExpression"/> instance.
            </param>
            <returns>
            <c>true</c> if the provided <see cref="T:System.Reflection.Assembly"/> <paramref name="value"/> matches against the current <see cref="T:Axle.Text.Expressions.Path.AssemblyPathExpression"/>'s pattern;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Text.Expressions.Path.AssemblyPathExpression.IsMatch(System.Reflection.AssemblyName)">
            <summary>
            Indicates whether the provided <see cref="T:System.Reflection.AssemblyName"/> <paramref name="value"/> matches against the current <see cref="T:Axle.Text.Expressions.Path.AssemblyPathExpression"/>'s pattern.
            </summary>
            <param name="value">
            The value to match against the current <see cref="T:Axle.Text.Expressions.Path.AssemblyPathExpression"/> instance.
            </param>
            <returns>
            <c>true</c> if the provided <paramref name="value"/> matches against the current <see cref="T:Axle.Text.Expressions.Path.AssemblyPathExpression"/>'s pattern;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Axle.Text.Expressions.Path.AssemblyPathExpression.Pattern">
            <inheritdoc />
        </member>
        <member name="T:Axle.Text.Expressions.Path.IPathExpression">
            <summary>
            A regular expressions designed for matching paths.
            </summary>
            <seealso cref="T:Axle.Text.Expressions.Regular.IRegularExpression"/>
        </member>
        <member name="P:Axle.Text.Expressions.Path.IPathExpression.Pattern">
            <summary>
            The expression pattern used to match paths against, when any of the <c>Split</c> or <c>IsMatch</c>
            method overloads is called.
            </summary>
        </member>
        <member name="T:Axle.Text.Expressions.Path.PathExpression">
            <summary>
            A class representing a filesystem globbing expression.
            </summary>
        </member>
        <member name="M:Axle.Text.Expressions.Path.PathExpression.#ctor(System.String)">
            <summary>
            Creates a new path expression using the specified <paramref name="pattern"/>.
            </summary>
            <param name="pattern">
            The globbing pattern to match.
            </param>
        </member>
        <member name="P:Axle.Text.Expressions.Path.PathExpression.Pattern">
            <summary>
            Gets the pattern used by the current <see cref="T:Axle.Text.Expressions.Path.PathExpression"/>.
            </summary>
        </member>
        <member name="T:Axle.Text.Expressions.Regular.IRegularExpression">
            <summary>
            An interface representing a regular expression.
            </summary>
        </member>
        <member name="M:Axle.Text.Expressions.Regular.IRegularExpression.IsMatch(System.String)">
            <summary>
            Indicates whether the current <see cref="T:Axle.Text.Expressions.Regular.IRegularExpression"/> finds a match in a specified <paramref name="input"/> string.
            </summary>
            <param name="input">
            The string to search for a match.
            </param>
            <returns>
            <c>true</c> if the regular expression finds a match; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Text.Expressions.Regular.IRegularExpression.IsMatch(System.String,System.Int32)">
            <summary>
            Indicates whether the current <see cref="T:Axle.Text.Expressions.Regular.IRegularExpression"/> finds a match in a specified input string.
            </summary>
            <param name="input">
            The string to search for a match.
            </param>
            <param name="startIndex">
            The character position at which to start the search.
            </param>
            <returns>
            <c>true</c> if the regular expression finds a match; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of the <paramref name="input"/>.
            </exception>
        </member>
        <member name="M:Axle.Text.Expressions.Regular.IRegularExpression.Match(System.String)">
            <summary>
            Searches the specified <paramref name="input"/> string for all occurrences of a regular expression.
            </summary>
            <param name="input">
            The string to search for a match.
            </param>
            <returns>
            An array of the <see cref="T:System.Text.RegularExpressions.Match"/> objects found by the search.
            If no matches are found, the method returns an empty array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Text.Expressions.Regular.IRegularExpression.Match(System.String,System.Int32)">
            <summary>
            Searches the specified <paramref name="input"/> string for all occurrences of a regular expression.
            </summary>
            <param name="input">
            The string to search for a match.
            </param>
            <param name="startIndex">
            The character position in the <paramref name="input"/> string at which to start the search.
            </param>
            <returns>
            An array of the <see cref="T:System.Text.RegularExpressions.Match"/> objects found by the search.
            If no matches are found, the method returns an empty array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of the <paramref name="input"/>.
            </exception>
        </member>
        <member name="M:Axle.Text.Expressions.Regular.IRegularExpression.Split(System.String)">
            <summary>
            Splits an <paramref name="input"/> string into an array of substrings,
            at the positions defined by the current <see cref="T:Axle.Text.Expressions.Regular.IRegularExpression"/> instance.
            </summary>
            <param name="input">
            The string to be split.
            </param>
            <returns>
            An array of strings.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Text.Expressions.Regular.IRegularExpression.Split(System.String,System.Int32)">
            <summary>
            Splits an <paramref name="input"/> string a specified maximum number of times into an array of substrings,
            at the positions defined by the current <see cref="T:Axle.Text.Expressions.Regular.IRegularExpression"/> instance.
            </summary>
            <param name="input">
            The string to be split.
            </param>
            <param name="count">
            The maximum number of times the split can occur.
            </param>
            <returns>
            An array of strings.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> is less than zero.
            </exception>
        </member>
        <member name="M:Axle.Text.Expressions.Regular.IRegularExpression.Split(System.String,System.Int32,System.Int32)">
            <summary>
            Splits an <paramref name="input"/> string a specified maximum number of times into an array of substrings,
            at the positions defined by the current <see cref="T:Axle.Text.Expressions.Regular.IRegularExpression"/> instance.
            The search for the regular expression pattern starts at a specified character position in the <paramref name="input"/> string.
            </summary>
            <param name="input">
            The string to be split.
            </param>
            <param name="count">
            The maximum number of times the split can occur.
            </param>
            <param name="startIndex">
            The character position in the <paramref name="input"/> string where the search will begin.
            </param>
            <returns>
            An array of strings.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Either <paramref name="count"/> is less than zero, or <paramref name="startIndex"/> is less than zero or greater than the length of the <paramref name="input"/>.
            </exception>
        </member>
        <member name="T:Axle.Text.Expressions.Regular.RegularExpression">
            <summary>
            Represents a regular expression. Acts as a wrapper around the <see cref="T:System.Text.RegularExpressions.Regex" /> class.
            </summary>
        </member>
        <member name="M:Axle.Text.Expressions.Regular.RegularExpression.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Text.Expressions.Regular.RegularExpression"/> class using the provided <see cref="T:System.Text.RegularExpressions.Regex"/> object.
            </summary>
            <param name="regex">
            Teh underlying <see cref="T:System.Text.RegularExpressions.Regex"/> object.
            </param>
        </member>
        <member name="M:Axle.Text.Expressions.Regular.RegularExpression.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Text.Expressions.Regular.RegularExpression"/> for the specified <paramref name="pattern"/>
            with <paramref name="options"/> that modify the pattern.
            </summary>
            <param name="pattern">
            The regular expression pattern to match.
            </param>
            <param name="options">
            </param>
        </member>
        <member name="M:Axle.Text.Expressions.Regular.RegularExpression.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Text.Expressions.Regular.RegularExpression"/> for the specified <paramref name="pattern"/>.
            </summary>
            <param name="pattern">
            The regular expression pattern to match.
            </param>
        </member>
        <member name="M:Axle.Text.Expressions.Regular.RegularExpression.IsMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Regular.RegularExpression.IsMatch(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Regular.RegularExpression.Match(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Regular.RegularExpression.Match(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Regular.RegularExpression.Split(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Regular.RegularExpression.Split(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Regular.RegularExpression.Split(System.String,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Expressions.Regular.RegularExpression.op_Implicit(Axle.Text.Expressions.Regular.RegularExpression)~System.Text.RegularExpressions.Regex">
            <summary>
            Converts an instance of <see cref="T:Axle.Text.Expressions.Regular.RegularExpression"/> to the corresponding <see cref="T:System.Text.RegularExpressions.Regex" /> equivalent
            </summary>
            <param name="expr">The <see cref="T:Axle.Text.Expressions.Regular.RegularExpression"/> instance to convert.</param>
            <returns>An instance of <see cref="T:System.Text.RegularExpressions.Regex" /> equivalent the current <see cref="T:Axle.Text.Expressions.Regular.RegularExpression"/> instance</returns>
            <seealso cref="T:Axle.Text.Expressions.Regular.RegularExpression"/>
            <seealso cref="T:System.Text.RegularExpressions.Regex"/>
        </member>
        <member name="M:Axle.Text.Expressions.Regular.RegularExpression.op_Explicit(System.Text.RegularExpressions.Regex)~Axle.Text.Expressions.Regular.RegularExpression">
            <summary>
            Converts an instance of <see cref="T:System.Text.RegularExpressions.Regex" /> to the corresponding <see cref="T:Axle.Text.Expressions.Regular.RegularExpression"/> equivalent.
            </summary>
            <param name="expr">The <see cref="T:System.Text.RegularExpressions.Regex"/> instance to convert.</param>
            <returns>An instance of <see cref="T:Axle.Text.Expressions.Regular.RegularExpression" /> equivalent the current <see cref="T:System.Text.RegularExpressions.Regex"/> instance</returns>
            <seealso cref="T:Axle.Text.Expressions.Regular.RegularExpression"/>
            <seealso cref="T:System.Text.RegularExpressions.Regex"/>
        </member>
        <member name="T:Axle.Text.Expressions.Substitution.AbstractSubstitutionExpression">
            <summary>
            An abstract class to aid the implementation of the <see cref="T:Axle.Text.Expressions.Substitution.ISubstitutionExpression"/> interface.
            </summary>
        </member>
        <member name="M:Axle.Text.Expressions.Substitution.AbstractSubstitutionExpression.Replace(System.String,Axle.Text.Expressions.Substitution.ISubstitutionProvider)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Text.Expressions.Substitution.DictionarySubstitutionProvider">
            <summary>
            An implementation of the <see cref="T:Axle.Text.Expressions.Substitution.ISubstitutionProvider"/> interface that uses <see cref="T:System.Collections.Generic.IDictionary`2"/>
            to represent the values to replace and the respective replacement text.
            </summary>
        </member>
        <member name="M:Axle.Text.Expressions.Substitution.DictionarySubstitutionProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Text.Expressions.Substitution.DictionarySubstitutionProvider"/> class using the provided <paramref name="dictionary"/>.
            </summary>
            <param name="dictionary">
            The dictionary to supply the text replacement data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="dictionary"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Axle.Text.Expressions.Substitution.DictionarySubstitutionProvider.TrySubstitute(System.String,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Text.Expressions.Substitution.ISubstitutionExpression">
            <summary>
            An interface representing a substitution expression,
            which can be used to replace values a given text input
            that match specific rules.
            </summary>
        </member>
        <member name="M:Axle.Text.Expressions.Substitution.ISubstitutionExpression.Replace(System.String,Axle.Text.Expressions.Substitution.ISubstitutionProvider)">
            <summary>
            Replaces values from the provided <paramref name="input"/> text using the rules specified by the given <see cref="T:Axle.Text.Expressions.Substitution.ISubstitutionProvider"/>. 
            </summary>
            <param name="input">
            The input text to be replaced.
            </param>
            <param name="sp">
            A <see cref="T:Axle.Text.Expressions.Substitution.ISubstitutionProvider"/> instance that provides the substitution values for the elements of the given text that are to be substituted.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the result from the replacement operation.
            </returns>
        </member>
        <member name="T:Axle.Text.Expressions.Substitution.ISubstitutionProvider">
            <summary>
            An interface representing a text substitution provider.
            Text substitution providers are usually used in conjunction with a <see cref="T:Axle.Text.Expressions.Substitution.ISubstitutionExpression"/> object,
            where the former provide text replacement information used by the <see cref="M:Axle.Text.Expressions.Substitution.ISubstitutionExpression.Replace(System.String,Axle.Text.Expressions.Substitution.ISubstitutionProvider)"/> method.
            </summary>
        </member>
        <member name="M:Axle.Text.Expressions.Substitution.ISubstitutionProvider.TrySubstitute(System.String,System.String@)">
            <summary>
            Attempts to fetch a substitution <paramref name="value"/> for the provided text <paramref name="token"/>.
            </summary>
            <param name="token">
            The text token to be substituted.
            </param>
            <param name="value">
            Contains the replacement value if the current <see cref="T:Axle.Text.Expressions.Substitution.ISubstitutionProvider"/> instance finds a suitable
            replacement for the provided <paramref name="token"/>. 
            <para>This parameter is passed uninitialized.</para>
            </param>
            <returns>
            <c>true</c> if the current <see cref="T:Axle.Text.Expressions.Substitution.ISubstitutionProvider"/> instance successfully finds a substitution value for the
            passed in <paramref name="token"/>;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Axle.Text.Expressions.Substitution.LookupSubstitutionProvider">
            <summary>
            A <see cref="T:Axle.Text.Expressions.Substitution.ISubstitutionProvider"/> implementation using a <see cref="T:System.Linq.ILookup`2"/> as a source.
            Because a <see cref="T:System.Linq.ILookup`2"/> may contain a collection of values under a certain key,
            the <see cref="T:Axle.Text.Expressions.Substitution.LookupSubstitutionProvider"/> will only use the last value in that collection.
            </summary>
        </member>
        <member name="M:Axle.Text.Expressions.Substitution.LookupSubstitutionProvider.#ctor(System.Linq.ILookup{System.String,System.String})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Text.Expressions.Substitution.LookupSubstitutionProvider"/> class using the provided
            <paramref name="lookup"/>.
            </summary>
            <param name="lookup">
            A <see cref="T:System.Linq.ILookup`2"/> containing the data to be used when resolving substitution tokens.
            </param>
        </member>
        <member name="M:Axle.Text.Expressions.Substitution.LookupSubstitutionProvider.TrySubstitute(System.String,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Text.Expressions.Substitution.MSBuildSubstitutionExpression">
            <summary>
            An implementation of the <see cref="T:Axle.Text.Expressions.Substitution.ISubstitutionExpression"/> interface which
            uses MSBuild-style delimiters (<c>'$'(</c> and <c>')'</c>) to identify text replacement tokens.
            </summary>
        </member>
        <member name="M:Axle.Text.Expressions.Substitution.MSBuildSubstitutionExpression.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Text.Expressions.Substitution.MSBuildSubstitutionExpression"/> class.
            </summary>
        </member>
        <member name="T:Axle.Text.Expressions.Substitution.StandardSubstitutionExpression">
            <summary>
            An implementation of the <see cref="T:Axle.Text.Expressions.Substitution.ISubstitutionExpression"/> interface that uses
            the standard token delimiters (<c>'${'</c> and <c>'}'</c>) to identify replacement tokens.
            </summary>
        </member>
        <member name="M:Axle.Text.Expressions.Substitution.StandardSubstitutionExpression.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Text.Expressions.Substitution.StandardSubstitutionExpression"/> class.
            </summary>
        </member>
        <member name="T:Axle.Text.Extensions.Encoding.EncodingExtensions">
            <summary>
            A static class to contain extension methods for the <see cref="T:System.Text.Encoding"/> type.
            </summary>
        </member>
        <member name="M:Axle.Text.Extensions.Encoding.EncodingExtensions.GetString(System.Text.Encoding,System.Byte[])">
            <summary>
            Decodes a sequence of bytes from the specified byte array into a string.
            </summary>
            <param name="encoding">
            The <see cref="T:System.Text.Encoding"/> instance this extension method is invoked upon.
            </param>
            <param name="bytes">
            The byte array containing the sequence of bytes to decode. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that contains the results of decoding the specified sequence of bytes.
            </returns>
        </member>
        <member name="M:Axle.Text.Formatting.AbstractCustomFormatter`1.Format(System.String,System.Object,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Formatting.AbstractCustomFormatter`1.Format(System.String,`0,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Formatting.AbstractCustomFormatter`2.Format(System.String,`0,`1)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Text.Formatting.Extensions.FormatProviderExtensions">
            <summary>
            A static class containing extension methods for the <see cref="T:System.IFormatProvider"/> interface.
            </summary>
        </member>
        <member name="M:Axle.Text.Formatting.Extensions.FormatProviderExtensions.Format(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Replaces the format items in a specified <paramref name="format"/> string
            with the string representations of corresponding objects in a specified <paramref name="args"/> array.
            The <paramref name="formatProvider"/> parameter supplies culture-specific formatting information.
            </summary>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> implementation that supplies culture-specific formatting information.
            </param>
            <param name="format">
            A composite format string.
            </param>
            <param name="args">
            An array that contains zero or more objects to format.
            </param>
            <returns>
            A copy of the <paramref name="format"/> string in which the format items have been replaced
            by the string representation of the corresponding objects in the <paramref name="args"/> parameter.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formatProvider"/>, <paramref name="format"/> or <paramref name="args"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <para>
            <paramref name="format"/>is invalid.
            </para>
            -or-
            <para>
            The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args"/> array.
            </para>
            </exception>
            <seealso cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>
        </member>
        <member name="M:Axle.Text.Formatting.Extensions.FormatProviderExtensions.Parse``1(System.IFormatProvider,Axle.Conversion.Parsing.IParser{``0},System.String)">
            <summary>
            Parses a <see cref="T:System.String">string</see> <paramref name="value"/> to the specified by the <typeparamref name="T"/> type. 
            </summary>
            <typeparam name="T">
            The type of the parsing result.
            </typeparam>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide culture-specific
            format recognition.
            </param>
            <param name="parser">
            A <see cref="T:Axle.Conversion.Parsing.IParser`1"/> instance to perform the parsing.
            </param>
            <param name="value">
            The <see cref="T:System.String">string</see> value to parse.
            </param>
            <returns>
            An instance of <typeparamref name="T"/> which is the result of parsing the provided <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Axle.Text.Formatting.Extensions.FormatProviderExtensions.ParseExact``1(System.IFormatProvider,Axle.Conversion.Parsing.IStrictParser{``0},System.String,System.String)">
            <summary>
            Parses a <see cref="T:System.String">string</see> <paramref name="value"/> to the specified by the <typeparamref name="T"/> type. 
            </summary>
            <typeparam name="T">
            The type of the parsing result.
            </typeparam>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider">format provider</see> used to assist parsing and/or provide
            culture-specific format recognition.
            </param>
            <param name="parser">
            A <see cref="T:Axle.Conversion.Parsing.IStrictParser`1"/> instance to perform the parsing.
            </param>
            <param name="format">
            A format string specifying the format of the <paramref name="value"/> to parse.
            </param>
            <param name="value">
            The <see cref="T:System.String">string</see> value to parse.
            </param>
            <returns>
            An instance of <typeparamref name="T"/> which is the result of parsing the provided <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Axle.Text.Formatting.FormatProvider.GetFormat(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Text.Formatting.FormatProvider.System#ICustomFormatter#Format(System.String,System.Object,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Text.Formatting.ICustomFormatter`1">
            <summary>
            A generic interface derived from the <see cref="T:System.IFormatProvider"/> that is specific about the formatted object 
            type.
            </summary>
            <typeparam name="T">
            The type of the formatted object.
            </typeparam>
            <seealso cref="T:System.ICustomFormatter"/>
            <seealso cref="T:System.IFormatProvider"/>
        </member>
        <member name="M:Axle.Text.Formatting.ICustomFormatter`1.Format(System.String,`0,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation 
            using specified format and culture-specific formatting information.
            </summary>
            <param name="format">
            A format string containing formatting specifications. 
            </param>
            <param name="arg">
            The <typeparamref name="T"/> instance to format. 
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> instance that supplies format information about the current instance. 
            </param>
            <returns>
            The string representation of the value of <paramref name="arg"/>, formatted as specified by 
            <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
        </member>
        <member name="T:Axle.Text.Formatting.ICustomFormatter`2">
            <summary>
            A generic interface derived from the <see cref="T:System.IFormatProvider"/> that is specific about the formatted object 
            type and the <seealso cref="T:System.IFormatProvider"/> type that is used for formatting.
            </summary>
            <typeparam name="T">
            The type of the formatted object.
            </typeparam>
            <typeparam name="TFP">
            A type that implements the <see cref="T:System.IFormatProvider"/> interface.
            </typeparam>
            <seealso cref="T:Axle.Text.Formatting.ICustomFormatter`1"/>
            <seealso cref="T:System.ICustomFormatter"/>
            <seealso cref="T:System.IFormatProvider"/>
        </member>
        <member name="M:Axle.Text.Formatting.ICustomFormatter`2.Format(System.String,`0,`1)">
            <summary>
            Converts the value of a specified object to an equivalent string representation 
            using specified format and culture-specific formatting information.
            </summary>
            <param name="format">
            A format string containing formatting specifications. 
            </param>
            <param name="arg">
            The <typeparamref name="T"/> instance to format. 
            </param>
            <param name="formatProvider">
            An <typeparamref name="TFP"/> instance that supplies format information about the current instance. 
            </param>
            <returns>
            The string representation of the value of <paramref name="arg"/>, formatted as specified by 
            <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
        </member>
        <member name="T:Axle.Threading.AsyncProducer`1">
            <summary>
            A producer-consumer queue implementation that allows externalization
            of the consumer logic.
            </summary>
            <typeparam name="T">
            The type of object representing the data being consumed.
            </typeparam>
        </member>
        <member name="M:Axle.Threading.AsyncProducer`1.#ctor(Axle.Threading.IAsyncConsumer{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Threading.AsyncProducer`1"/> class
            using the specified <paramref name="consumer"/>.
            </summary>
            <param name="consumer">
            A <see cref="T:Axle.Threading.IAsyncConsumer`1"/> object to process
            the data provided by the current <see cref="T:Axle.Threading.AsyncProducer`1"/> instance.
            </param>
        </member>
        <member name="M:Axle.Threading.AsyncProducer`1.Finalize">
            <summary>
            Finalizes the current <see cref="T:Axle.Threading.AsyncProducer`1"/> instance.
            </summary>
        </member>
        <member name="M:Axle.Threading.AsyncProducer`1.Push(`0)">
            <summary>
            Adds an <paramref name="item"/> to the queue to be processed
            by the consumer.
            </summary>
            <param name="item">
            The item to be added for processing.
            </param>
        </member>
        <member name="M:Axle.Threading.AsyncProducer`1.Dispose(System.Boolean)">
            <summary>
            Disposes of the current <see cref="T:Axle.Threading.AsyncProducer`1"/> instance.
            </summary>
            <param name="disposing">
            A <see cref="T:System.Boolean"/> value indicating whether the dispose call is
            being sent by a finalizer, or a manual dispose call.
            </param>
        </member>
        <member name="T:Axle.Threading.Extensions.AggregateException.AggregateExceptionExtensions">
            <summary>
            A static class containing extension methods for the <see cref="T:System.AggregateException"/> class.
            </summary>
        </member>
        <member name="M:Axle.Threading.Extensions.Tasks.TaskExtensions.Parallelize(System.Collections.Generic.IEnumerable{System.Action})">
            <summary>
            Creates a collection of <see cref="T:System.Threading.Tasks.Task">tasks</see> from the supplied collection of delegates.
            <remarks>
            The created tasks are not yet started. Use the <see cref="M:Axle.Threading.Extensions.Tasks.TaskExtensions.Start(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">Start</see>
            or the <see cref="M:Axle.Threading.Extensions.Tasks.TaskExtensions.RunSynchronously(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">RunSynchronously</see> methods upon the 
            resulting collection to execute them.
            </remarks>
            </summary>
            <param name="tasks">
            A collection of delegates to be executed in parallel.
            </param>
            <returns>
            A collection of <see cref="T:System.Threading.Tasks.Task">tasks</see> created from each delegate supplied by the <paramref name="tasks"/> collection.
            </returns>
        </member>
        <member name="M:Axle.Threading.Extensions.Tasks.TaskExtensions.Parallelize(System.Collections.Generic.IEnumerable{System.Action},System.Threading.CancellationToken)">
            <summary>
            Creates a collection of <see cref="T:System.Threading.Tasks.Task">tasks</see> from the supplied collection of delegates
            and <see cref="T:System.Threading.CancellationToken"/>.
            <remarks>
            The created tasks are not yet started. Use the <see cref="M:Axle.Threading.Extensions.Tasks.TaskExtensions.Start(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">Start</see>
            or the <see cref="M:Axle.Threading.Extensions.Tasks.TaskExtensions.RunSynchronously(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">RunSynchronously</see> methods upon the 
            resulting collection to execute them.
            </remarks>
            </summary>
            <param name="tasks">
            A collection of delegates to be executed in parallel.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> the retutned tasks will observe.
            </param>
            <returns>
            A collection of <see cref="T:System.Threading.Tasks.Task">tasks</see> created from each delegate supplied by the <paramref name="tasks"/> collection.
            </returns>
        </member>
        <member name="T:Axle.Threading.IAsyncConsumer`1">
            <summary>
            An interface representing an async consumer. An async consumer is 
            used in conjunction with an instance of <see cref="T:Axle.Threading.AsyncProducer`1"/>
            where the consumer's role is to process the data which is pushed to the
            <see cref="T:Axle.Threading.AsyncProducer`1"/> asynchronously.
            <remarks>
            The consumer itself works in synchronous context.
            </remarks>
            </summary>
            <typeparam name="T">
            The type of the consumed data.
            </typeparam>
        </member>
        <member name="M:Axle.Threading.IAsyncConsumer`1.Consume(`0)">
            <summary>
            A method invoked when data supplied by an <see cref="T:Axle.Threading.AsyncProducer`1"/> is available.
            </summary>
            <param name="data">
            An instance of <typeparamref name="T"/> provided by an <see cref="T:Axle.Threading.AsyncProducer`1"/>
            </param>
        </member>
        <member name="M:Axle.Threading.IAsyncConsumer`1.HandleError(System.Exception,`0)">
            <summary>
            A method invoked when an exception is being thrown while consuming.
            </summary>
            <param name="e">
            The exception which occurred while processing data.
            </param>
            <param name="data">
            The data item that was being processed while the exception was thrown.
            </param>
            <seealso cref="M:Axle.Threading.IAsyncConsumer`1.Consume(`0)"/>
        </member>
        <member name="M:Axle.Threading.IAsyncConsumer`1.Complete">
            <summary>
            A method invoked when the <see cref="T:Axle.Threading.AsyncProducer`1"/> is no longer
            receiving data.
            </summary>
        </member>
        <member name="T:Axle.Threading.ILock">
            <summary>
            An interface representing a synchronization lock construct.
            </summary>
        </member>
        <member name="M:Axle.Threading.ILock.Enter">
            <summary>
            Acquires an exclusive lock.
            </summary>
        </member>
        <member name="M:Axle.Threading.ILock.Exit">
            <summary>
            Releases a previously obtained exclusive lock.
            </summary>
        </member>
        <member name="M:Axle.Threading.ILock.TryEnter(System.Int32)">
            <summary>
            Attempts to acquire an exclusive lock.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait for the lock.
            A value of <c>-1</c> represents an infinite wait.
            </param>
            <seealso cref="F:System.Threading.Timeout.Infinite"/>
        </member>
        <member name="M:Axle.Threading.ILock.TryEnter(System.TimeSpan)">
            <summary>
            Attempts to acquire an exclusive lock.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> representing the amount of time to wait for the lock.
            </param>
        </member>
        <member name="T:Axle.Threading.ILockHandle">
            <summary>
            A <see cref="T:System.IDisposable">disposable</see> handle for a <see cref="T:Axle.Threading.ILock">synchronization lock</see> that is currently taking place.
            </summary>
            <remarks>
            Disposal of this instance will release the held lock.
            </remarks>
        </member>
        <member name="P:Axle.Threading.ILockHandle.Lock">
            <summary>
            Gets a reference to the <see cref="T:Axle.Threading.ILock">lock object</see> representing the active synchronization lock.
            </summary>
        </member>
        <member name="T:Axle.Threading.IReadWriteLock">
            <summary>
            An interface that provides the basis of a reader-writer lock; that is
            an object which utilizes synchronization mechanisms for read and write access to another object or resource.
            Multiple threads can read from the resource at a time, but only one can modify it.
            All reader threads will be blocked if a writer thread is currently engaging the resource.
            </summary>
            <seealso cref="T:System.Threading.ReaderWriterLockSlim" />
            <seealso cref="T:System.Threading.ReaderWriterLock" />
            <seealso cref="T:Axle.Threading.ReadWriteLock" />
            <seealso cref="T:Axle.Threading.ILock" />
        </member>
        <member name="M:Axle.Threading.IReadWriteLock.EnterReadLock">
            <summary>
            Tries to enter the lock in read mode.
            </summary>
        </member>
        <member name="M:Axle.Threading.IReadWriteLock.EnterUpgradeableReadLock">
            <summary>
            Tries to enter the lock in upgradeable mode.
            </summary>
        </member>
        <member name="M:Axle.Threading.IReadWriteLock.EnterWriteLock">
            <summary>
            Tries to enter the lock in write mode.
            </summary>
        </member>
        <member name="M:Axle.Threading.IReadWriteLock.ExitReadLock">
            <summary>
            Reduces the recursion count for read mode, and exits read mode if the resulting count is <c>0</c> (zero).
            </summary>
            <exception cref="T:System.Threading.SynchronizationLockException">
            The current thread has not entered the lock in read mode.
            </exception>
        </member>
        <member name="M:Axle.Threading.IReadWriteLock.ExitUpgradeableReadLock">
            <summary>
            Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is <c>0</c> (zero).
            </summary>
            <exception cref="T:System.Threading.SynchronizationLockException">
            The current thread has not entered the lock in upgradeable mode.
            </exception>
        </member>
        <member name="M:Axle.Threading.IReadWriteLock.ExitWriteLock">
            <summary>
            Reduces the recursion count for write mode, and exits write mode if the resulting count is <c>0</c> (zero).
            </summary>
            <exception cref="T:System.Threading.SynchronizationLockException">
            The current thread has not entered the lock in write mode.
            </exception>
        </member>
        <member name="M:Axle.Threading.IReadWriteLock.TryEnterReadLock(System.Int32)">
            <summary>
            Tries to enter the lock in read mode, with an optional integer time-out.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <c>-1</c> (<see cref="F:System.Threading.Timeout.Infinite"/>) to wait indefinitely.
            </param>
            <returns>
            <c>true</c> if the calling thread entered read mode, otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value of <paramref name="millisecondsTimeout"/> is negative, but it is not equal to
            <see cref="F:System.Threading.Timeout.Infinite"/> (<c>-1</c>), which is the only negative value allowed.
            </exception>
        </member>
        <member name="M:Axle.Threading.IReadWriteLock.TryEnterReadLock(System.TimeSpan)">
            <summary>
            Tries to enter the lock in read mode, with an optional time-out.
            </summary>
            <param name="timeout">
            The interval to wait, or <c>-1</c> milliseconds (<see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>) to wait indefinitely.
            </param>
            <returns>
            <c>true</c> if the calling thread entered read mode, otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value of <paramref name="timeout"/> is negative, but it is not equal to <c>-1</c> milliseconds,
            which is the only negative value allowed.
            -or-
            The value of <paramref name="timeout"/> is greater than <see cref="F:System.Int32.MaxValue"/> milliseconds.
            </exception>
        </member>
        <member name="M:Axle.Threading.IReadWriteLock.TryEnterUpgradeableReadLock(System.Int32)">
            <summary>
            Tries to enter the lock in upgradeable mode, with an optional integer time-out.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <c>-1</c> (<see cref="F:System.Threading.Timeout.Infinite"/>) to wait indefinitely.
            </param>
            <returns>
            <c>true</c> if the calling thread entered read mode, otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value of <paramref name="millisecondsTimeout"/> is negative, but it is not equal to
            <see cref="F:System.Threading.Timeout.Infinite"/> (<c>-1</c>), which is the only negative value allowed.
            </exception>
        </member>
        <member name="M:Axle.Threading.IReadWriteLock.TryEnterUpgradeableReadLock(System.TimeSpan)">
            <summary>
            Tries to enter the lock in upgradeable mode, with an optional time-out.
            </summary>
            <param name="timeout">
            The interval to wait, or <c>-1</c> milliseconds (<see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>) to wait indefinitely.
            </param>
            <returns>
            <c>true</c> if the calling thread entered read mode, otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value of <paramref name="timeout"/> is negative, but it is not equal to <c>-1</c> milliseconds,
            which is the only negative value allowed.
            -or-
            The value of <paramref name="timeout"/> is greater than <see cref="F:System.Int32.MaxValue"/> milliseconds.
            </exception>
        </member>
        <member name="M:Axle.Threading.IReadWriteLock.TryEnterWriteLock(System.Int32)">
            <summary>
            Tries to enter the lock in write mode, with an optional integer time-out.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <c>-1</c> (<see cref="F:System.Threading.Timeout.Infinite"/>) to wait indefinitely.
            </param>
            <returns>
            <c>true</c> if the calling thread entered read mode, otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value of <paramref name="millisecondsTimeout"/> is negative, but it is not equal to
            <see cref="F:System.Threading.Timeout.Infinite"/> (<c>-1</c>), which is the only negative value allowed.
            </exception>
        </member>
        <member name="M:Axle.Threading.IReadWriteLock.TryEnterWriteLock(System.TimeSpan)">
            <summary>
            Tries to enter the lock in write mode, with an optional time-out.
            </summary>
            <param name="timeout">
            The interval to wait, or <c>-1</c> milliseconds (<see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>) to wait indefinitely.
            </param>
            <returns>
            <c>true</c> if the calling thread entered read mode, otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value of <paramref name="timeout"/> is negative, but it is not equal to <c>-1</c> milliseconds,
            which is the only negative value allowed.
            -or-
            The value of <paramref name="timeout"/> is greater than <see cref="F:System.Int32.MaxValue"/> milliseconds.
            </exception>
        </member>
        <member name="T:Axle.Threading.IReentrantReadWriteLock">
            <summary>
            An interface that provides the basis of a re-entrant reader-writer lock.
            </summary>
            <seealso cref="T:System.Threading.ReaderWriterLockSlim" />
            <seealso cref="T:System.Threading.ReaderWriterLock" />
            <seealso cref="T:Axle.Threading.ReentrantReadWriteLock" />
            <seealso cref="T:Axle.Threading.IReadWriteLock" />
            <seealso cref="T:Axle.Threading.ILock" />
        </member>
        <member name="T:Axle.Threading.ReaderWriterLock.LockExtensions">
            <summary>
            A class containing extension methods for instances of the <see cref="T:Axle.Threading.ILock"/> type.
            </summary>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.LockExtensions.Invoke(Axle.Threading.ILock,System.Func{System.Boolean},System.Action)">
            <summary>
            Invokes an operation withing the confines of a <see cref="T:Axle.Threading.ILock"/> only if a lock is needed.
            The need for a lock is determined by first executing <paramref name="isLockNeeded"/> function.
            </summary>
            <param name="lock">
            The current <see cref="T:Axle.Threading.ILock"/> object to provide the locking behavior.
            </param>
            <param name="isLockNeeded">
            A <see cref="T:System.Func`1"/> returning <see cref="T:System.Boolean"/> that is used to determine if a lock is needed.
            </param>
            <param name="workAction">
            An <see cref="T:System.Action"/> delegate that will perform an operation within the confines of a lock.
            This action is not invoked in case <paramref name="isLockNeeded"/> returns <c>true</c>.
            </param>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.LockExtensions.Invoke``1(Axle.Threading.ILock,System.Func{``0},System.Func{``0,System.Boolean},System.Func{``0})">
            <summary>
            Invokes an operation withing the confines of a <see cref="T:Axle.Threading.ILock"/> only if a lock is needed.
            The need for a lock is determined by first executing <paramref name="isLockNeeded"/> function.
            </summary>
            <typeparam name="T">
            The type of result to eventually be produced within the confines of a lock.
            </typeparam>
            <param name="lock">
            The current <see cref="T:Axle.Threading.ILock"/> object to provide the locking behavior.
            </param>
            <param name="readFunc">
            A <see cref="T:System.Func`1"/> that is used to return the result without entering a lock.
            </param>
            <param name="isLockNeeded">
            A <see cref="T:System.Func`2"/> returning <see cref="T:System.Boolean"/> that is used to determine if a lock is needed.
            </param>
            <param name="workFunc">
            A <see cref="T:System.Func`1"/> delegate that will produce the result while a lock is being held.
            This function is not called in case <paramref name="isLockNeeded"/> returns <c>true</c>.
            </param>
            <returns>
            Either the output of the <paramref name="readFunc"/> or the <paramref name="workFunc"/>'s result, depending on whether a lock was required.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.LockExtensions.Invoke``1(Axle.Threading.IReadWriteLock,Axle.Attempt{``0},System.Func{``0})">
            <summary>
            Invokes an operation withing the confines of a <see cref="T:Axle.Threading.ILock"/> only if a lock is needed.
            The need for a lock is determined by executing <paramref name="readFunc"/> operation within the confines
            of a lock.
            </summary>
            <typeparam name="T">
            The type of result to eventually be produced within the confines of a lock.
            </typeparam>
            <param name="lock">
            The current <see cref="T:Axle.Threading.ILock"/> object to provide the locking behavior.
            </param>
            <param name="readFunc">
            A <see cref="T:Axle.Attempt`1"/> that is used to determine whether the result can be obtained without issuing a lock.
            </param>
            <param name="workFunc">
            A <see cref="T:System.Func`1"/> delegate that will produce the result while a lock is being held.
            This function is not called in case <paramref name="readFunc"/> returns <c>true</c>.
            </param>
            <returns>
            Either the output of the <paramref name="readFunc"/> or the <paramref name="workFunc"/>'s result, depending on whether a lock was required.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.LockExtensions.Invoke``2(Axle.Threading.ILock,``0,Axle.Attempt{``0,``1},System.Func{``0,``1})">
            <summary>
            Invokes an operation withing the confines of a <see cref="T:Axle.Threading.ILock"/> only if a lock is needed.
            The need for a lock is determined by executing <paramref name="readFunc"/> operation within the confines
            of a lock.
            </summary>
            <typeparam name="T">
            The type of argument to pass to the read and work functions.
            </typeparam>
            <typeparam name="TResult">
            The type of result to eventually be produced within the confines of a lock.
            </typeparam>
            <param name="lock">
            The current <see cref="T:Axle.Threading.ILock"/> object to provide the locking behavior.
            </param>
            <param name="arg">
            The argument for the <paramref name="readFunc"/> operation and the <paramref name="workFunc"/> operation.
            </param>
            <param name="readFunc">
            A <see cref="T:Axle.Attempt`2"/> that is used to determine whether the result can be obtained without issuing a lock.
            </param>
            <param name="workFunc">
            A <see cref="T:System.Func`2"/> delegate that will produce the result while a lock is being held.
            This function is not called in case <paramref name="readFunc"/> returns <c>true</c>.
            </param>
            <returns>
            Either the output of the <paramref name="readFunc"/> or the <paramref name="workFunc"/>'s result, depending on whether a lock was required.
            </returns>
        </member>
        <member name="T:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions">
            <summary>
            A class containing extension methods for instances of the <see cref="T:Axle.Threading.IReadWriteLock"/> type.
            </summary>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Read``1(Axle.Threading.IReadWriteLock,System.Func{``0})">
            <summary>
            Executes the code provided by the <paramref name="func"/> parameter within the confines of a read lock.
            </summary>
            <typeparam name="T">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="func">
            The function to be executed inside a read lock.
            </param>
            <returns>
            The result (of type <typeparamref name="T"/>) from the execution of the provided by the <paramref name="func"/> parameter delegate.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Read``2(Axle.Threading.IReadWriteLock,System.Func{``0,``1},``0)">
            <summary>
            Executes the code provided by the <paramref name="func"/> parameter within the confines of a read lock.
            </summary>
            <typeparam name="T">
            The type of the parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="func">
            The function to be executed inside a read lock.
            </param>
            <param name="arg">
            The parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <returns>
            The result (of type <typeparamref name="TResult"/>) from the execution of the provided by the <paramref name="func"/> parameter delegate.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Read``3(Axle.Threading.IReadWriteLock,System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Executes the code provided by the <paramref name="func"/> parameter within the confines of a read lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="func">
            The function to be executed inside a read lock.
            </param>
            <param name="arg1">
            The first parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg2">
            The second parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <returns>
            The result (of type <typeparamref name="TResult"/>) from the execution of the provided by the <paramref name="func"/> parameter delegate.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Read``4(Axle.Threading.IReadWriteLock,System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Executes the code provided by the <paramref name="func"/> parameter within the confines of a read lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="func">
            The function to be executed inside a read lock.
            </param>
            <param name="arg1">
            The first parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg2">
            The second parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg3">
            The third parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <returns>
            The result (of type <typeparamref name="TResult"/>) from the execution of the provided by the <paramref name="func"/> parameter delegate.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Read``5(Axle.Threading.IReadWriteLock,System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Executes the code provided by the <paramref name="func"/> parameter within the confines of a read lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="func">
            The function to be executed inside a read lock.
            </param>
            <param name="arg1">
            The first parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg2">
            The second parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg3">
            The third parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg4">
            The fourth parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <returns>
            The result (of type <typeparamref name="TResult"/>) from the execution of the provided by the <paramref name="func"/> parameter delegate.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Write(Axle.Threading.IReadWriteLock,System.Action)">
            <summary>
            Executes the code provided by the <paramref name="action"/> parameter within the confines of a write lock.
            </summary>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="action">
            The action delegate to be executed inside a write lock.
            </param>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Write``1(Axle.Threading.IReadWriteLock,System.Action{``0},``0)">
            <summary>
            Executes the code provided by the <paramref name="action"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T">
            The type of the sole parameter to the <paramref name="action"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="action">
            The action delegate to be executed inside a write lock.
            </param>
            <param name="arg">
            The argument to pass to the <paramref name="action"/> delegate upon execution.
            </param>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Write``2(Axle.Threading.IReadWriteLock,System.Action{``0,``1},``0,``1)">
            <summary>
            Executes the code provided by the <paramref name="action"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="action"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="action"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="action">
            The action delegate to be executed inside a write lock.
            </param>
            <param name="arg1">
            The first argument to pass to the <paramref name="action"/> delegate upon execution.
            </param>
            <param name="arg2">
            The second argument to pass to the <paramref name="action"/> delegate upon execution.
            </param>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Write``3(Axle.Threading.IReadWriteLock,System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Executes the code provided by the <paramref name="action"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="action"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="action"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third parameter to the <paramref name="action"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="action">
            The action delegate to be executed inside a write lock.
            </param>
            <param name="arg1">
            The first argument to pass to the <paramref name="action"/> delegate upon execution.
            </param>
            <param name="arg2">
            The second argument to pass to the <paramref name="action"/> delegate upon execution.
            </param>
            <param name="arg3">
            The third argument to pass to the <paramref name="action"/> delegate upon execution.
            </param>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Write``4(Axle.Threading.IReadWriteLock,System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Executes the code provided by the <paramref name="action"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="action"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="action"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third parameter to the <paramref name="action"/> delegate.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth parameter to the <paramref name="action"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="action">
            The action delegate to be executed inside a write lock.
            </param>
            <param name="arg1">
            The first argument to pass to the <paramref name="action"/> delegate upon execution.
            </param>
            <param name="arg2">
            The second argument to pass to the <paramref name="action"/> delegate upon execution.
            </param>
            <param name="arg3">
            The third argument to pass to the <paramref name="action"/> delegate upon execution.
            </param>
            <param name="arg4">
            The fourth argument to pass to the <paramref name="action"/> delegate upon execution.
            </param>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Write``1(Axle.Threading.IReadWriteLock,System.Func{``0})">
            <summary>
            Executes the code provided by the <paramref name="func"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="func">
            The function to be executed inside a write lock.
            </param>
            <returns>
            The result (of type <typeparamref name="T"/>) from the execution of the provided by the <paramref name="func"/> parameter delegate.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Write``2(Axle.Threading.IReadWriteLock,System.Func{``0,``1},``0)">
            <summary>
            Executes the code provided by the <paramref name="func"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T">
            The type of the parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="func">
            The function to be executed inside a write lock.
            </param>
            <param name="arg">
            The parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <returns>
            The result (of type <typeparamref name="TResult"/>) from the execution of the provided by the <paramref name="func"/> parameter delegate.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Write``3(Axle.Threading.IReadWriteLock,System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Executes the code provided by the <paramref name="func"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="func">
            The function to be executed inside a write lock.
            </param>
            <param name="arg1">
            The first parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg2">
            The second parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <returns>
            The result (of type <typeparamref name="TResult"/>) from the execution of the provided by the <paramref name="func"/> parameter delegate.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Write``4(Axle.Threading.IReadWriteLock,System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Executes the code provided by the <paramref name="func"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="func">
            The function to be executed inside a write lock.
            </param>
            <param name="arg1">
            The first parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg2">
            The second parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg3">
            The third parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <returns>
            The result (of type <typeparamref name="TResult"/>) from the execution of the provided by the <paramref name="func"/> parameter delegate.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Write``5(Axle.Threading.IReadWriteLock,System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Executes the code provided by the <paramref name="func"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="func">
            The function to be executed inside a write lock.
            </param>
            <param name="arg1">
            The first parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg2">
            The second parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg3">
            The third parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg4">
            The fourth parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <returns>
            The result (of type <typeparamref name="TResult"/>) from the execution of the provided by the <paramref name="func"/> parameter delegate.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.TryRead``1(Axle.Threading.IReadWriteLock,System.Int32,System.Func{``0},``0@)">
            <summary>
            Attempts to execute the code provided by the <paramref name="func"/> parameter within the confines of a read lock.
            </summary>
            <typeparam name="T">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait until acquiring the lock, or <c>-1</c> (<see cref="F:System.Threading.Timeout.Infinite"/>) to wait indefinitely.
            </param>
            <param name="func">
            The function to be executed inside a read lock.
            </param>
            <param name="result">
            The resulting object from the invocation of the <paramref name="func"/> delegate upon.
            </param>
            <returns>
            <c>true</c> if the lock was successfully acquired within the specified timeout; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.TryRead``2(Axle.Threading.IReadWriteLock,System.Int32,System.Func{``0,``1},``0,``1@)">
            <summary>
            Attempts to execute the code provided by the <paramref name="func"/> parameter within the confines of a read lock.
            </summary>
            <typeparam name="T">
            The type of the sole parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait until acquiring the lock, or <c>-1</c> (<see cref="F:System.Threading.Timeout.Infinite"/>) to wait indefinitely.
            </param>
            <param name="func">
            The function to be executed inside a read lock.
            </param>
            <param name="arg">
            The sole parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="result">
            The resulting object from the invocation of the <paramref name="func"/> delegate upon.
            </param>
            <returns>
            <c>true</c> if the lock was successfully acquired within the specified timeout; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.TryRead``3(Axle.Threading.IReadWriteLock,System.Int32,System.Func{``0,``1,``2},``0,``1,``2@)">
            <summary>
            Attempts to execute the code provided by the <paramref name="func"/> parameter within the confines of a read lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait until acquiring the lock, or <c>-1</c> (<see cref="F:System.Threading.Timeout.Infinite"/>) to wait indefinitely.
            </param>
            <param name="func">
            The function to be executed inside a read lock.
            </param>
            <param name="arg1">
            The first parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg2">
            The second parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="result">
            The resulting object from the invocation of the <paramref name="func"/> delegate upon.
            </param>
            <returns>
            <c>true</c> if the lock was successfully acquired within the specified timeout; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.TryRead``4(Axle.Threading.IReadWriteLock,System.Int32,System.Func{``0,``1,``2,``3},``0,``1,``2,``3@)">
            <summary>
            Attempts to execute the code provided by the <paramref name="func"/> parameter within the confines of a read lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait until acquiring the lock, or <c>-1</c> (<see cref="F:System.Threading.Timeout.Infinite"/>) to wait indefinitely.
            </param>
            <param name="func">
            The function to be executed inside a read lock.
            </param>
            <param name="arg1">
            The first parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg2">
            The second parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg3">
            The third parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="result">
            The resulting object from the invocation of the <paramref name="func"/> delegate upon.
            </param>
            <returns>
            <c>true</c> if the lock was successfully acquired within the specified timeout; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.TryRead``5(Axle.Threading.IReadWriteLock,System.Int32,System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4@)">
            <summary>
            Attempts to execute the code provided by the <paramref name="func"/> parameter within the confines of a read lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait until acquiring the lock, or <c>-1</c> (<see cref="F:System.Threading.Timeout.Infinite"/>) to wait indefinitely.
            </param>
            <param name="func">
            The function to be executed inside a read lock.
            </param>
            <param name="arg1">
            The first parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg2">
            The second parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg3">
            The third parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg4">
            The fourth parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="result">
            The resulting object from the invocation of the <paramref name="func"/> delegate upon.
            </param>
            <returns>
            <c>true</c> if the lock was successfully acquired within the specified timeout; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.TryWrite``1(Axle.Threading.IReadWriteLock,System.Int32,System.Func{``0},``0@)">
            <summary>
            Attempts to execute the code provided by the <paramref name="func"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait until acquiring the lock, or <c>-1</c> (<see cref="F:System.Threading.Timeout.Infinite"/>) to wait indefinitely.
            </param>
            <param name="func">
            The function to be executed inside a write lock.
            </param>
            <param name="result">
            The resulting object from the invocation of the <paramref name="func"/> delegate upon.
            </param>
            <returns>
            <c>true</c> if the lock was successfully acquired within the specified timeout; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.TryWrite``2(Axle.Threading.IReadWriteLock,System.Int32,System.Func{``0,``1},``0,``1@)">
            <summary>
            Attempts to execute the code provided by the <paramref name="func"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T">
            The type of the sole parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait until acquiring the lock, or <c>-1</c> (<see cref="F:System.Threading.Timeout.Infinite"/>) to wait indefinitely.
            </param>
            <param name="func">
            The function to be executed inside a write lock.
            </param>
            <param name="arg">
            The sole parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="result">
            The resulting object from the invocation of the <paramref name="func"/> delegate upon.
            </param>
            <returns>
            <c>true</c> if the lock was successfully acquired within the specified timeout; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.TryWrite``3(Axle.Threading.IReadWriteLock,System.Int32,System.Func{``0,``1,``2},``0,``1,``2@)">
            <summary>
            Attempts to execute the code provided by the <paramref name="func"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait until acquiring the lock, or <c>-1</c> (<see cref="F:System.Threading.Timeout.Infinite"/>) to wait indefinitely.
            </param>
            <param name="func">
            The function to be executed inside a write lock.
            </param>
            <param name="arg1">
            The first parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg2">
            The second parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="result">
            The resulting object from the invocation of the <paramref name="func"/> delegate upon.
            </param>
            <returns>
            <c>true</c> if the lock was successfully acquired within the specified timeout; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.TryWrite``4(Axle.Threading.IReadWriteLock,System.Int32,System.Func{``0,``1,``2,``3},``0,``1,``2,``3@)">
            <summary>
            Attempts to execute the code provided by the <paramref name="func"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait until acquiring the lock, or <c>-1</c> (<see cref="F:System.Threading.Timeout.Infinite"/>) to wait indefinitely.
            </param>
            <param name="func">
            The function to be executed inside a write lock.
            </param>
            <param name="arg1">
            The first parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg2">
            The second parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg3">
            The third parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="result">
            The resulting object from the invocation of the <paramref name="func"/> delegate upon.
            </param>
            <returns>
            <c>true</c> if the lock was successfully acquired within the specified timeout; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.TryWrite``5(Axle.Threading.IReadWriteLock,System.Int32,System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4@)">
            <summary>
            Attempts to execute the code provided by the <paramref name="func"/> parameter within the confines of a write lock.
            </summary>
            <typeparam name="T1">
            The type of the first parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T2">
            The type of the second parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T3">
            The type of the third parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth parameter to the <paramref name="func"/> delegate.
            </typeparam>
            <typeparam name="TResult">
            The return type of the <paramref name="func"/> delegate.
            </typeparam>
            <param name="lock">
            The <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the synchronization mechanics.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait until acquiring the lock, or <c>-1</c> (<see cref="F:System.Threading.Timeout.Infinite"/>) to wait indefinitely.
            </param>
            <param name="func">
            The function to be executed inside a write lock.
            </param>
            <param name="arg1">
            The first parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg2">
            The second parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg3">
            The third parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="arg4">
            The fourth parameter to pass to the <paramref name="func"/> delegate upon invocation.
            </param>
            <param name="result">
            The resulting object from the invocation of the <paramref name="func"/> delegate upon.
            </param>
            <returns>
            <c>true</c> if the lock was successfully acquired within the specified timeout; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Invoke(Axle.Threading.IReadWriteLock,System.Func{System.Boolean},System.Action)">
            <summary>
            Invokes an operation withing the confines of a <see cref="T:Axle.Threading.IReadWriteLock"/> only if a write lock is needed.
            The need for a lock is determined by first executing <paramref name="isLockNeeded"/> function.
            </summary>
            <param name="lock">
            The current <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the locking behavior.
            </param>
            <param name="isLockNeeded">
            A <see cref="T:System.Func`1"/> returning <see cref="T:System.Boolean"/> that is used to determine if a write lock is needed.
            </param>
            <param name="workAction">
            An <see cref="T:System.Action"/> delegate that will perform an operation within the confines of a write lock.
            This action is not invoked in case <paramref name="isLockNeeded"/> returns <c>true</c>.
            </param>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Invoke``1(Axle.Threading.IReadWriteLock,System.Func{``0},System.Func{``0,System.Boolean},System.Func{``0})">
            <summary>
            Invokes an operation withing the confines of a <see cref="T:Axle.Threading.IReadWriteLock"/> only if a write lock is needed.
            The need for a lock is determined by first executing <paramref name="readFunc"/> function within the confines
            of a read lock in an attempt to obtain a result, and then validating that result against a
            <paramref name="isLockNeeded"/> function outside of a lock.
            </summary>
            <typeparam name="T">
            The type of result to eventually be produced within the confines of a write lock.
            </typeparam>
            <param name="lock">
            The current <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the locking behavior.
            </param>
            <param name="readFunc">
            A <see cref="T:System.Func`1"/> that is used to return the result without entering a write lock.
            </param>
            <param name="isLockNeeded">
            A <see cref="T:System.Func`2"/> returning <see cref="T:System.Boolean"/> that is used to determine if a write lock is needed.
            </param>
            <param name="workFunc">
            A <see cref="T:System.Func`1"/> delegate that will produce the result while a write lock is being held.
            This function is not called in case <paramref name="isLockNeeded"/> returns <c>true</c>.
            </param>
            <returns>
            Either the output of the <paramref name="readFunc"/> or the <paramref name="workFunc"/>'s result, depending on whether a lock was required.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Invoke``1(Axle.Threading.IReadWriteLock,Axle.Attempt{``0},System.Func{``0})">
            <summary>
            Invokes an operation withing the confines of a <see cref="T:Axle.Threading.IReadWriteLock"/> only if a write lock is needed.
            The need for a lock is determined by executing <paramref name="readFunc"/> operation within the confines
            of a read lock.
            </summary>
            <typeparam name="T">
            The type of result to eventually be produced within the confines of a write lock.
            </typeparam>
            <param name="lock">
            The current <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the locking behavior.
            </param>
            <param name="readFunc">
            A <see cref="T:Axle.Attempt`1"/> that is used to determine whether the result can be obtained without issuing a write lock.
            </param>
            <param name="workFunc">
            A <see cref="T:System.Func`1"/> delegate that will produce the result while a write lock is being held.
            This function is not called in case <paramref name="readFunc"/> returns <c>true</c>.
            </param>
            <returns>
            Either the output of the <paramref name="readFunc"/> or the <paramref name="workFunc"/>'s result, depending on whether a lock was required.
            </returns>
        </member>
        <member name="M:Axle.Threading.ReaderWriterLock.ReaderWriterLockExtensions.Invoke``2(Axle.Threading.IReadWriteLock,``0,Axle.Attempt{``0,``1},System.Func{``0,``1})">
            <summary>
            Invokes an operation withing the confines of a <see cref="T:Axle.Threading.IReadWriteLock"/> only if a write lock is needed.
            The need for a lock is determined by executing <paramref name="readFunc"/> operation within the confines
            of a read lock.
            </summary>
            <typeparam name="T">
            The type of argument to pass to the read and work functions.
            </typeparam>
            <typeparam name="TResult">
            The type of result to eventually be produced within the confines of a write lock.
            </typeparam>
            <param name="lock">
            The current <see cref="T:Axle.Threading.IReadWriteLock"/> object to provide the locking behavior.
            </param>
            <param name="arg">
            The argument for the <paramref name="readFunc"/> operation and the <paramref name="workFunc"/> operation.
            </param>
            <param name="readFunc">
            A <see cref="T:Axle.Attempt`2"/> that is used to determine whether the result can be obtained without issuing a write lock.
            </param>
            <param name="workFunc">
            A <see cref="T:System.Func`2"/> delegate that will produce the result while a write lock is being held.
            This function is not called in case <paramref name="readFunc"/> returns <c>true</c>.
            </param>
            <returns>
            Either the output of the <paramref name="readFunc"/> or the <paramref name="workFunc"/>'s result, depending on whether a lock was required.
            </returns>
        </member>
        <member name="T:Axle.Threading.MonitorLock">
            <summary>
            A monitor lock class. Uses the regular <see cref="T:System.Threading.Monitor"/> API for issuing locks on a provided 
            <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:Axle.Threading.MonitorLock.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Threading.MonitorLock"/> class.
            </summary>
            <param name="obj">
            A <see cref="T:System.Object"/> instance to issue the locks upon.
            </param>
        </member>
        <member name="M:Axle.Threading.MonitorLock.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Threading.MonitorLock"/> class.
            </summary>
        </member>
        <member name="M:Axle.Threading.MonitorLock.Enter">
            <inheritdoc />
        </member>
        <member name="M:Axle.Threading.MonitorLock.Exit">
            <inheritdoc />
        </member>
        <member name="M:Axle.Threading.MonitorLock.TryEnter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Axle.Threading.MonitorLock.TryEnter(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:Axle.Threading.ReadWriteLock">
            <summary>
            An implementation of the <see cref="T:Axle.Threading.IReadWriteLock"/> interface which acts as a
            wrapper to the <see cref="T:System.Threading.ReaderWriterLockSlim"/> class.
            </summary>
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Threading.ReadWriteLock"/> class without specifying lock recursion.
            </summary>
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.EnterReadLock">
            <inheritdoc />
            <exception cref="T:System.Threading.LockRecursionException">
            <para>
            The <see cref="P:Axle.Threading.ReadWriteLock.SupportsRecursion"/> property is set to <c>false</c>
            and the current thread has already entered read mode.
            </para>
            -or-
            <para>
            The recursion number would exceed the capacity of the counter.
            This limit is large enough so that an applications should never encounter it.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The current <see cref="T:Axle.Threading.ReadWriteLock"/> instance has been disposed.
            </exception>
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.EnterUpgradeableReadLock">
            <inheritdoc />
            <exception cref="T:System.Threading.LockRecursionException">
            <para>
            The <see cref="P:Axle.Threading.ReadWriteLock.SupportsRecursion"/> property is set to <c>false</c>
            and the current thread has already entered a lock in any mode.
            </para>
            -or-
            <para>
            The current thread has entered read mode, so trying to enter upgradeable
            mode would create the possibility of a deadlock.
            </para>
            -or-
            <para>
            The recursion number would exceed the capacity of the counter.
            This limit is large enough so that an applications should never encounter it.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The current <see cref="T:Axle.Threading.ReadWriteLock"/> instance has been disposed.
            </exception>
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.EnterWriteLock">
            <inheritdoc />
            <exception cref="T:System.Threading.LockRecursionException">
            <para>
            The <see cref="P:Axle.Threading.ReadWriteLock.SupportsRecursion"/> property is set to <c>false</c>
            and the current thread has already entered the lock in any mode.
            </para>
            -or-
            <para>
            The current thread has entered read mode, so trying to enter the
            lock in write mode would create the possibility of a deadlock.
            </para>
            -or-
            <para>
            The recursion number would exceed the capacity of the counter.
            The limit is so large that applications should never encounter it.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The current <see cref="T:Axle.Threading.ReadWriteLock"/> instance has been disposed.
            </exception>
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.ExitReadLock">
            <inheritdoc />
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.ExitUpgradeableReadLock">
            <inheritdoc />
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.ExitWriteLock">
            <inheritdoc />
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.TryEnterReadLock(System.Int32)">
            <inheritdoc />
            <exception cref="T:System.Threading.LockRecursionException">
            <para>
            The <see cref="P:Axle.Threading.ReadWriteLock.SupportsRecursion"/> property is set to <c>false</c>
            and the current thread has already entered the lock.
            </para>
            -or-
            <para>
            The recursion number would exceed the capacity of the counter.
            This limit is large enough so that an applications should never encounter it.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The current <see cref="T:Axle.Threading.ReadWriteLock"/> instance has been disposed.
            </exception>
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.TryEnterReadLock(System.TimeSpan)">
            <inheritdoc />
            <exception cref="T:System.Threading.LockRecursionException">
            <para>
            The <see cref="P:Axle.Threading.ReadWriteLock.SupportsRecursion"/> property is set to <c>false</c>
            and the current thread has already entered the lock.
            </para>
            -or-
            <para>
            The recursion number would exceed the capacity of the counter.
            This limit is large enough so that an applications should never encounter it.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The current <see cref="T:Axle.Threading.ReadWriteLock"/> instance has been disposed.
            </exception>
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.TryEnterWriteLock(System.Int32)">
            <inheritdoc />
            <exception cref="T:System.Threading.LockRecursionException">
            <para>
            The <see cref="P:Axle.Threading.ReadWriteLock.SupportsRecursion"/> property is set to <c>false</c>
            and the current thread has already entered the lock in any mode.
            </para>
            -or-
            <para>
            The current thread has entered read mode, so trying to enter the
            lock in write mode would create the possibility of a deadlock.
            </para>
            -or-
            <para>
            The recursion number would exceed the capacity of the counter.
            The limit is so large that applications should never encounter it.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The current <see cref="T:Axle.Threading.ReadWriteLock"/> instance has been disposed.
            </exception>
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.TryEnterWriteLock(System.TimeSpan)">
            <inheritdoc />
            <exception cref="T:System.Threading.LockRecursionException">
            <para>
            The <see cref="P:Axle.Threading.ReadWriteLock.SupportsRecursion"/> property is set to <c>false</c>
            and the current thread has already entered the lock in any mode.
            </para>
            -or-
            <para>
            The current thread has entered read mode, so trying to enter the
            lock in write mode would create the possibility of a deadlock.
            </para>
            -or-
            <para>
            The recursion number would exceed the capacity of the counter.
            The limit is so large that applications should never encounter it.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The current <see cref="T:Axle.Threading.ReadWriteLock"/> instance has been disposed.
            </exception>
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.TryEnterUpgradeableReadLock(System.Int32)">
            <inheritdoc />
            <exception cref="T:System.Threading.LockRecursionException">
            <para>
            The <see cref="P:Axle.Threading.ReadWriteLock.SupportsRecursion"/> property is set to <c>false</c>
            and the current thread has already entered a lock in any mode.
            </para>
            -or-
            <para>
            The current thread has entered read mode, so trying to enter upgradeable
            mode would create the possibility of a deadlock.
            </para>
            -or-
            <para>
            The recursion number would exceed the capacity of the counter.
            This limit is large enough so that an applications should never encounter it.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The current <see cref="T:Axle.Threading.ReadWriteLock"/> instance has been disposed.
            </exception>
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.TryEnterUpgradeableReadLock(System.TimeSpan)">
            <inheritdoc />
            <exception cref="T:System.Threading.LockRecursionException">
            <para>
            The <see cref="P:Axle.Threading.ReadWriteLock.SupportsRecursion"/> property is set to <c>false</c>
            and the current thread has already entered a lock in any mode.
            </para>
            -or-
            <para>
            The current thread has entered read mode, so trying to enter upgradeable
            mode would create the possibility of a deadlock.
            </para>
            -or-
            <para>
            The recursion number would exceed the capacity of the counter.
            This limit is large enough so that an applications should never encounter it.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The current <see cref="T:Axle.Threading.ReadWriteLock"/> instance has been disposed.
            </exception>
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.Enter">
            <inheritdoc />
            <exception cref="T:System.ObjectDisposedException">
            The current <see cref="T:Axle.Threading.ReadWriteLock"/> instance has been disposed.
            </exception>
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.Exit">
            <inheritdoc />
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.TryEnter(System.Int32)">
            <inheritdoc />
            <exception cref="T:System.ObjectDisposedException">
            The current <see cref="T:Axle.Threading.ReadWriteLock"/> instance has been disposed.
            </exception>
        </member>
        <member name="M:Axle.Threading.ReadWriteLock.TryEnter(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:Axle.Threading.ReadWriteLock.SupportsRecursion">
            <summary>
            Gets a value that indicates if the current <see cref="T:System.Threading.ReaderWriterLockSlim"/> instance
            can enter a specific lock mode more than once.
            If this value is set to false, every attempt to obtain a lock when another lock of the
            same mode is already held will result in a <see cref="T:System.Threading.LockRecursionException"/>.
            </summary>
        </member>
        <member name="T:Axle.Threading.ReentrantReadWriteLock">
            <inheritdoc cref="T:Axle.Threading.ReadWriteLock" />
        </member>
        <member name="M:Axle.Threading.ReentrantReadWriteLock.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Axle.Threading.ReentrantReadWriteLock"/> class.
            </summary>
        </member>
        <member name="T:Axle.Verification.ArgumentReference`1">
            <summary>
            A <see langword="struct"/> that represents a reference to an argument for a method or constructor.
            The argument reference is usually represented by its name (as defined in the respective method/constructor)
            and the value passed to it.
            </summary>
        </member>
        <member name="M:Axle.Verification.ArgumentReference`1.op_Implicit(Axle.Verification.ArgumentReference{`0})~`0">
            <param name="reference">
            The argument reference instance to be unwrapped by this operator.
            </param>
        </member>
        <member name="M:Axle.Verification.ArgumentReference`1.IsOfType(System.Type)">
            <summary>
            Determines whether the argument represented by this <see cref="T:Axle.Verification.ArgumentReference`1"/> instance is of the type specified by
            the <paramref name="expectedType"/> parameter.
            </summary>
            <param name="expectedType">
            The expected type for the argument represented by the current <see cref="T:Axle.Verification.ArgumentReference`1"/> instance.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
        </member>
        <member name="M:Axle.Verification.ArgumentReference`1.IsOfType``1">
            <summary>
            Determines whether the argument represented by this <see cref="T:Axle.Verification.ArgumentReference`1"/> instance is of the type specified by
            the <typeparamref name="TExpected"/> generic parameter.
            </summary>
            <typeparam name="TExpected">
            The expected type for the argument represented by the current <see cref="T:Axle.Verification.ArgumentReference`1"/> instance.
            </typeparam>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
        </member>
        <member name="P:Axle.Verification.ArgumentReference`1.Value">
            <summary>
            Gets the value passed in the argument the current <see cref="T:Axle.Verification.ArgumentReference`1"/> instance represents.
            </summary>
        </member>
        <member name="M:Axle.Verification.ArgumentReference`1.Axle#References#IReference{T}#TryGetValue(`0@)">
            <inheritdoc cref="M:Axle.References.IReference`1.TryGetValue(`0@)"/>
        </member>
        <member name="P:Axle.Verification.ArgumentReference`1.Axle#References#IReference{T}#Value">
            <inheritdoc cref="P:Axle.References.IReference`1.Value"/>
        </member>
        <member name="P:Axle.Verification.ArgumentReference`1.Axle#References#IReference#Value">
            <inheritdoc cref="P:Axle.References.IReference.Value"/>
        </member>
        <member name="T:Axle.Verification.ArgumentTypeMismatchException">
            <summary>
            The exception that is thrown if one of the arguments to a method is not of the expected type.
            </summary>
            <seealso cref="T:System.ArgumentException" />
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Axle.Verification.ArgumentTypeMismatchException" /> class.
            </summary>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Axle.Verification.ArgumentTypeMismatchException" /> class with a specified error message
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Axle.Verification.ArgumentTypeMismatchException" /> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="inner">
            The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference, the current exception is raised in a catch block
            that handles the inner exception.
            </param>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Verification.ArgumentTypeMismatchException" /> class with a specified error
            message and the name of the parameter that causes this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="paramName">
            The name of the parameter that caused the current exception.
            </param>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Verification.ArgumentTypeMismatchException" /> class with a specified error
            message and the name of the parameter that causes this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="paramName">
            The name of the parameter that caused the current exception.
            </param>
            <param name="inner">
            The exception that is the cause of the current exception. If the innerException parameter is not a null reference,
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Verification.ArgumentTypeMismatchException"/> class with the expected and actual
            type parameters and the name of the parameter that causes this exception.
            </summary>
            <param name="expectedType">
            The expected type of the argument.
            </param>
            <param name="actualType">
            The actual type of the argument that caused the current exception.
            </param>
            <param name="paramName">
            The name of the parameter that caused the current exception.
            </param>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException.#ctor(System.Type,System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Verification.ArgumentTypeMismatchException"/> class with the expected and actual
            type parameters, the name of the parameter that causes this exception and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="expectedType">
            The expected type of the argument.
            </param>
            <param name="actualType">
            The actual type of the argument that caused the current exception.
            </param>
            <param name="paramName">
            The name of the parameter that caused the current exception.
            </param>
            <param name="inner">
            The exception that is the cause of the current exception. If the innerException parameter is not a null reference,
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Verification.ArgumentTypeMismatchException" /> class with serialized data.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Axle.Verification.ArgumentTypeMismatchException`1">
            <summary>
            The exception that is thrown if one of the arguments of a method is not of the expected type.
            </summary>
            <typeparam name="TExpected">
            The expected type of the argument.
            </typeparam>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Axle.Verification.ArgumentTypeMismatchException`1" /> class.
            </summary>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException`1.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Verification.ArgumentTypeMismatchException" /> class with a specified error
            message and the name of the parameter that causes this exception.
            </summary>
            <param name="paramName">
            The name of the parameter that caused the current exception.
            </param>
            <param name="actualType">
            The actual type of the argument that caused the current exception.
            </param>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException`1.#ctor(System.String,System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Verification.ArgumentTypeMismatchException" /> class with a specified error
            message and the name of the parameter that causes this exception.
            </summary>
            <param name="paramName">
            The name of the parameter that caused the current exception.
            </param>
            <param name="actualType">
            The actual type of the argument that caused the current exception.
            </param>
            <param name="inner">
            The exception that is the cause of the current exception. If the innerException parameter is not a null reference,
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Verification.ArgumentTypeMismatchException`1" /> class with serialized data.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Axle.Verification.ArgumentTypeMismatchException`2">
            <summary>
            The exception that is thrown if one of the arguments of a method is not of the expected type.
            </summary>
            <typeparam name="TExpected">
            The expected type of the argument.
            </typeparam>
            <typeparam name="T">
            The actual type of the argument.
            </typeparam>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException`2.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Axle.Verification.ArgumentTypeMismatchException`2" /> class.
            </summary>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Verification.ArgumentTypeMismatchException`2" /> class with a specified error
            message and the name of the parameter that causes this exception.
            </summary>
            <param name="paramName">
            The name of the parameter that caused the current exception.
            </param>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException`2.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Verification.ArgumentTypeMismatchException`2" /> class with a specified error
            message and the name of the parameter that causes this exception.
            </summary>
            <param name="paramName">
            The name of the parameter that caused the current exception.
            </param>
            <param name="inner">
            The exception that is the cause of the current exception. If the innerException parameter is not a null reference,
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:Axle.Verification.ArgumentTypeMismatchException`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Axle.Verification.ArgumentTypeMismatchException`2" /> class with serialized data.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Axle.Verification.ArrayVerifier">
            <summary>
            Extension methods to the <see cref="T:Axle.Verification.ArgumentReference`1"/> class that enable verification for arguments
            of array types.
            </summary>
        </member>
        <member name="M:Axle.Verification.ArrayVerifier.IsNotEmpty``1(Axle.Verification.ArgumentReference{``0[]},System.String)">
            <summary>
            Ensures the specified array argument is not an empty array.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <typeparamref name="T"/>
            which is being verified.
            </param>
            <param name="message">
            An optional error message to be passed to the exception in case the given argument is an empty array.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the argument being verified.
            </returns>
        </member>
        <member name="M:Axle.Verification.ArrayVerifier.IsNotEmpty``1(Axle.Verification.ArgumentReference{``0[]})">
            <summary>
            Ensures the specified array argument is not an empty array.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <typeparamref name="T"/>
            which is being verified.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the argument being verified.
            </returns>
        </member>
        <member name="T:Axle.Verification.CollectionVerifier">
            <summary>
            Extension methods to the <see cref="T:Axle.Verification.ArgumentReference`1"/> class that enable verification for arguments
            of type <see cref="T:System.Collections.ICollection" />.
            </summary>
            <seealso cref="T:System.Collections.ICollection"/>
        </member>
        <member name="M:Axle.Verification.CollectionVerifier.IsNotEmpty``1(Axle.Verification.ArgumentReference{``0},System.String)">
            <summary>
            Ensures the specified argument is not an empty collection.
            </summary>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <typeparamref name="T"/>
            which is being verified.
            </param>
            <param name="message">
            An optional error message to be passed to the exception in case the given argument is an empty collection.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the argument being verified.
            </returns>
        </member>
        <member name="M:Axle.Verification.CollectionVerifier.IsNotEmpty``1(Axle.Verification.ArgumentReference{``0})">
            <summary>
            Ensures the specified argument is not an empty collection.
            </summary>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <typeparamref name="T"/>
            which is being verified.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the argument being verified.
            </returns>
        </member>
        <member name="T:Axle.Verification.ComparableVerifier">
            <summary>
            Extension methods to the <see cref="T:Axle.Verification.ArgumentReference`1"/> class that enable verification for arguments
            implementing the <see cref="T:System.IComparable`1"/> interface.
            </summary>
            <seealso cref="T:System.IComparable`1"/>
        </member>
        <member name="M:Axle.Verification.ComparableVerifier.IsGreaterThan``1(Axle.Verification.ArgumentReference{``0},``0,System.String)">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is greater than a given value.
            </summary>
            <typeparam name="T">The type of the argument represented by the <paramref name="argument"/> parameter</typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <typeparamref name="T"/>
            which is being verified.
            </param>
            <param name="minValue">
            The comparison value above which the argument will be accepted as valid.
            </param>
            <param name="message">
            An error message passed to the exception in case the verification fails.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="minValue"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The argument value does not conform to the boundary provided by the <paramref name="minValue"/> argument.
            </exception>
        </member>
        <member name="M:Axle.Verification.ComparableVerifier.IsGreaterThan``1(Axle.Verification.ArgumentReference{``0},``0)">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is greater than a given value.
            </summary>
            <typeparam name="T">The type of the argument represented by the <paramref name="argument"/> parameter</typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <typeparamref name="T"/>
            which is being verified.
            </param>
            <param name="minValue">
            The comparison value above which the argument will be accepted as valid.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="minValue"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The argument value does not conform to the boundary provided by the <paramref name="minValue"/> argument.
            </exception>
        </member>
        <member name="M:Axle.Verification.ComparableVerifier.IsGreaterThanOrEqualTo``1(Axle.Verification.ArgumentReference{``0},``0,System.String)">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is greater than or equal to a given value.
            </summary>
            <typeparam name="T">The type of the argument represented by the <paramref name="argument"/> parameter</typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <typeparamref name="T"/>
            which is being verified.
            </param>
            <param name="minValue">
            The comparison value above which the argument will be accepted as valid.
            </param>
            <param name="message">
            An error message passed to the exception in case the verification fails.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="minValue"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The argument value does not conform to the boundary provided by the <paramref name="minValue"/> argument.
            </exception>
        </member>
        <member name="M:Axle.Verification.ComparableVerifier.IsGreaterThanOrEqualTo``1(Axle.Verification.ArgumentReference{``0},``0)">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is greater than or equal to a given value.
            </summary>
            <typeparam name="T">The type of the argument represented by the <paramref name="argument"/> parameter</typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <typeparamref name="T"/>
            which is being verified.
            </param>
            <param name="minValue">
            The comparison value above which the argument will be accepted as valid.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="minValue"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The argument value does not conform to the boundary provided by the <paramref name="minValue"/> argument.
            </exception>
        </member>
        <member name="M:Axle.Verification.ComparableVerifier.IsLessThan``1(Axle.Verification.ArgumentReference{``0},``0,System.String)">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is less than a given value.
            </summary>
            <typeparam name="T">The type of the argument represented by the <paramref name="argument"/> parameter</typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <typeparamref name="T"/>
            which is being verified.
            </param>
            <param name="maxValue">
            The comparison value below which the argument will be accepted as valid.
            </param>
            <param name="message">
            An error message passed to the exception in case the verification fails.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="maxValue"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The argument value does not conform to the boundary provided by the <paramref name="maxValue"/> argument.
            </exception>
        </member>
        <member name="M:Axle.Verification.ComparableVerifier.IsLessThan``1(Axle.Verification.ArgumentReference{``0},``0)">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is less than a given value.
            </summary>
            <typeparam name="T">The type of the argument represented by the <paramref name="argument"/> parameter</typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <typeparamref name="T"/>
            which is being verified.
            </param>
            <param name="maxValue">The comparison value below which the argument will be accepted as valid.</param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="maxValue"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The argument value does not conform to the boundary provided by the <paramref name="maxValue"/> argument.
            </exception>
        </member>
        <member name="M:Axle.Verification.ComparableVerifier.IsLessThanOrEqualTo``1(Axle.Verification.ArgumentReference{``0},``0,System.String)">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is less than or equal to a given value.
            </summary>
            <typeparam name="T">The type of the argument represented by the <paramref name="argument"/> parameter</typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <typeparamref name="T"/>
            which is being verified.
            </param>
            <param name="maxValue">
            The comparison value below which the argument will be accepted as valid.
            </param>
            <param name="message">
            An error message passed to the exception in case the verification fails.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="maxValue"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The argument value does not conform to the boundary provided by the <paramref name="maxValue"/> argument.
            </exception>
        </member>
        <member name="M:Axle.Verification.ComparableVerifier.IsLessThanOrEqualTo``1(Axle.Verification.ArgumentReference{``0},``0)">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is less than or equal to a given value.
            </summary>
            <typeparam name="T">The type of the argument represented by the <paramref name="argument"/> parameter</typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <typeparamref name="T"/>
            which is being verified.
            </param>
            <param name="maxValue">
            The comparison value below which the argument will be accepted as valid.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="maxValue"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The argument value does not conform to the boundary provided by the <paramref name="maxValue"/> argument.
            </exception>
        </member>
        <member name="T:Axle.Verification.EnumerableVerifier">
            <summary>
            Extension methods to the <see cref="T:Axle.Verification.ArgumentReference`1"/> class that enable verification for arguments
            of type <see cref="T:System.Collections.IEnumerable" />.
            </summary>
            <seealso cref="T:System.Collections.IEnumerable"/>
        </member>
        <member name="M:Axle.Verification.EnumerableVerifier.IsNotNullOrEmpty``1(Axle.Verification.ArgumentReference{``0},System.String)">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is not null or an empty collection.
            </summary>
            <typeparam name="T">The type of the collection to be verified.</typeparam>
            <param name="argument">
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </param>
            <param name="message">
            An optional error message to use for the thrown exception in case the validation fails.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument, same as <paramref name="argument"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the verified <paramref name="argument"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the verified <paramref name="argument"/> represents an empty collection.
            </exception>
        </member>
        <member name="M:Axle.Verification.EnumerableVerifier.IsNotNullOrEmpty``1(Axle.Verification.ArgumentReference{``0})">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is not null or an empty collection.
            </summary>
            <typeparam name="T">The type of the collection to be verified.</typeparam>
            <param name="argument">
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument, same as <paramref name="argument"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the verified <paramref name="argument"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the verified <paramref name="argument"/> represents an empty collection.
            </exception>
        </member>
        <member name="T:Axle.Verification.StringVerifier">
            <summary>
            Extension methods to the <see cref="T:Axle.Verification.ArgumentReference`1"/> class that enable verification for arguments
            of type <see cref="T:System.String" />.
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:Axle.Verification.StringVerifier.IsNotEmpty(Axle.Verification.ArgumentReference{System.String},System.String)">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is a non-empty string.
            </summary>
            <param name="argument">
            The argument that is being verified.
            </param>
            <param name="message">
            An optional exception message to be used for the generated exception in case the argument is an empty string.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
        </member>
        <member name="M:Axle.Verification.StringVerifier.IsNotEmpty(Axle.Verification.ArgumentReference{System.String})">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is a non-empty string.
            </summary>
            <param name="argument">
            The argument that is being verified.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
        </member>
        <member name="M:Axle.Verification.StringVerifier.IsNotNullOrEmpty(Axle.Verification.ArgumentReference{System.String})">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is not <c>null</c> or an empty string.
            </summary>
            <param name="argument">
            The argument that is being verified.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
        </member>
        <member name="M:Axle.Verification.StringVerifier.IsNotNullOrEmpty(Axle.Verification.ArgumentReference{System.String},System.String,System.String)">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            is not <c>null</c> or an empty string.
            </summary>
            <param name="argument">
            The argument that is being verified.
            </param>
            <param name="nullMessage">
            An optional exception message to be used for the generated exception in case the argument is <c>null</c>.
            </param>
            <param name="emptyMessage">
            An optional exception message to be used for the generated exception in case the argument is an empty string.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
        </member>
        <member name="T:Axle.Verification.TypeVerifier">
            <summary>
            Extension methods to the <see cref="T:Axle.Verification.ArgumentReference`1"/> class that enable verification for arguments
            of type <see cref="T:System.Type" />.
            </summary>
            <seealso cref="T:System.Type"/>
        </member>
        <member name="M:Axle.Verification.TypeVerifier.Is(Axle.Verification.ArgumentReference{System.Type},System.Type)">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            can be assigned to the type specified by the <paramref name="expectedType"/> parameter.
            </summary>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <see cref="T:System.Type"/>.
            </param>
            <param name="expectedType">
            The type that must be compliant with type of the validated argument.
            The compliance check is performed using the <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> method.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument"/> OR <paramref name="expectedType"/> is <c>null</c>.
            </exception>
            <exception cref="T:Axle.Verification.ArgumentTypeMismatchException">
            The argument cannot be assigned to the type specified by the <paramref name="expectedType"/> parameter.
            </exception>
            <seealso cref="M:System.Type.IsAssignableFrom(System.Type)" />
        </member>
        <member name="M:Axle.Verification.TypeVerifier.Is``1(Axle.Verification.ArgumentReference{System.Type})">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the <paramref name="argument"/>
            can be assigned to the type specified by the <typeparamref name="TExpected"/> parameter.
            </summary>
            <typeparam name="TExpected">
            The type that must be compliant with type of the validated argument.
            The compliance check is performed using the <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> method.
            </typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <see cref="T:System.Type"/>.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument"/> is <c>null</c>.
            </exception>
            <exception cref="T:Axle.Verification.ArgumentTypeMismatchException">
            The argument cannot be assigned to the type specified by the <typeparamref name="TExpected"/> parameter.
            </exception>
            <seealso cref="M:System.Type.IsAssignableFrom(System.Type)" />
        </member>
        <member name="M:Axle.Verification.TypeVerifier.IsNotAbstract(Axle.Verification.ArgumentReference{System.Type})">
            <summary>
            Verifies if an argument of type <see cref="T:System.Type"/> represents an <see cref="P:System.Type.IsAbstract">abstract</see> class.
            </summary>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type <see cref="T:System.Type"/>.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <seealso cref="P:System.Type.IsAbstract"/>
        </member>
        <member name="T:Axle.Verification.UriVerifier">
            <summary>
            A static class to contain validation methods for arguments of type <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:Axle.Verification.UriVerifier.IsAbsoluteUri(Axle.Verification.ArgumentReference{System.Uri})">
            <summary>
            Checks if the provided <paramref name="argument"/> represents an absolute URI.
            </summary>
            <param name="argument">
            The argument to verify.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the provided <paramref name="argument"/> does not represent an absolute uri.
            </exception>
            <seealso cref="P:System.Uri.IsAbsoluteUri"/>
        </member>
        <member name="M:Axle.Verification.UriVerifier.IsRelativeUri(Axle.Verification.ArgumentReference{System.Uri})">
            <summary>
            Checks if the provided <paramref name="argument"/> represents a relative URI.
            </summary>
            <param name="argument">
            The argument to verify.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the provided <paramref name="argument"/> does not represent an relative uri.
            </exception>
            <seealso cref="P:System.Uri.IsAbsoluteUri"/>
        </member>
        <member name="M:Axle.Verification.UriVerifier.IsFile(Axle.Verification.ArgumentReference{System.Uri})">
            <summary>
            Checks if the provided <paramref name="argument"/> represents a filesystem location.
            </summary>
            <param name="argument">
            The argument to verify.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the provided <paramref name="argument"/> does not represent a filesystem location.
            </exception>
            <seealso cref="P:System.Uri.IsFile"/>
        </member>
        <member name="T:Axle.Verification.Verifier">
            <summary>
            A class containing general purpose extension methods to the <see cref="T:Axle.Verification.ArgumentReference`1"/> type.
            </summary>
        </member>
        <member name="M:Axle.Verification.Verifier.VerifyArgument``1(``0,System.String)">
            <summary>
            Creates an instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> representing the passed object as an argument
            to a method or constructor.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="argument">
            The argument value.
            </param>
            <param name="argumentName">
            The name of the argument to be represented by the produced <see cref="T:Axle.Verification.ArgumentReference`1"/> instance.
            </param>
            <returns>
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> representing the passed object as an argument
            to a method or constructor.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argumentName"/> is <c>null</c>.
            </exception>
            <seealso cref="T:Axle.Verification.ArgumentReference`1"/>
        </member>
        <member name="M:Axle.Verification.Verifier.VerifyRefArg``1(Axle.References.IReference{``0},System.String)">
            <summary>
            Same as <see cref="M:Axle.Verification.Verifier.VerifyArgument``1(``0,System.String)"/>, but the passed object is an implementation of <see cref="T:Axle.References.IReference`1"/>.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="argument">
            The argument reference object.
            </param>
            <param name="argumentName">
            The name of the argument to be represented by the produced <see cref="T:Axle.Verification.ArgumentReference`1"/> instance.
            </param>
            <returns>
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> representing the passed object as an argument
            to a method or constructor.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argumentName"/> is <c>null</c>.
            </exception>
            <seealso cref="T:Axle.Verification.ArgumentReference`1"/>
        </member>
        <member name="M:Axle.Verification.Verifier.IsNotNull``1(Axle.Verification.ArgumentReference{``0},System.String)">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the 
            <paramref name="argument"/> is not <c><see langword="null"/></c>. In case the verification fails, an 
            <see cref="T:System.ArgumentNullException"/> is thrown.
            </summary>
            <typeparam name="T">
            The type of the argument represented by the <paramref name="argument"/> parameter. 
            </typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type 
            <typeparamref name="T"/>. 
            </param>
            <param name="message">
            Custom exception message to be used in case the argument validation fails.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The represented by the <paramref name="argument"/> parameter object is <c><see langword="null"/></c>. 
            </exception>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
        </member>
        <member name="M:Axle.Verification.Verifier.IsNotNull``1(Axle.Verification.ArgumentReference{``0})">
            <summary>
            Ensures the <see cref="T:Axle.Verification.ArgumentReference`1">argument reference</see> represented by the 
            <paramref name="argument"/> is not <c><see langword="null"/></c>. In case the verification fails, 
            an <see cref="T:System.ArgumentNullException"/> is thrown.
            </summary>
            <typeparam name="T">
            The type of the argument represented by the <paramref name="argument"/> parameter. 
            </typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type 
            <typeparamref name="T"/>. 
            </param>
            <exception cref="T:System.ArgumentNullException">The represented by the <paramref name="argument"/> parameter object
            is <c><see langword="null"/></c>. 
            </exception>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the verified argument.
            </returns>
        </member>
        <member name="M:Axle.Verification.Verifier.IsNot``1(Axle.Verification.ArgumentReference{``0},``0,System.String)">
            <summary>
            Ensures the specified argument is equal to a given <paramref name="value"/>.
            </summary>
            <typeparam name="T">Type of the verified argument.</typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type 
            <typeparamref name="T"/>. 
            which is being verified.
            </param>
            <param name="value">
            A value the current argument is expected to be equal to.
            </param>
            <param name="message">
            An error message to be passed to the exception in case the verification fails.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the argument being verified.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="message"/> is <c><see langword="null"/></c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the verified argument is not equal to the given <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Axle.Verification.Verifier.IsNot``1(Axle.Verification.ArgumentReference{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Ensures the specified argument is equal to a given <paramref name="value"/>.
            </summary>
            <typeparam name="T">Type of the verified argument.</typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type 
            <typeparamref name="T"/> which is being verified.
            </param>
            <param name="value">
            A value the current argument is expected to be equal to.
            </param>
            <param name="comparer">
            An reference to the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instance that will be used to determine the 
            equality.
            </param>
            <param name="message">
            An error message to be passed to the exception in case the verification fails.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the argument being verified.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when either <paramref name="comparer"/> or <paramref name="message"/> is 
            <c><see langword="null"/></c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the verified argument is not equal to the given <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Axle.Verification.Verifier.IsTrue``1(Axle.Verification.ArgumentReference{``0},System.Predicate{``0},System.String)">
            <summary>
            Ensures the specified argument conforms to a custom condition, provided by the <paramref name="condition"/>
            parameter.
            </summary>
            <typeparam name="T">Type of the verified argument.</typeparam>
            <param name="argument">
            An instance of <see cref="T:Axle.Verification.ArgumentReference`1"/> that represents a method/constructor argument of type 
            <typeparamref name="T"/> which is being verified.
            </param>
            <param name="condition">
            A delegate representing the verification condition to pass.
            </param>
            <param name="message">
            An error message to be passed to the exception in case the verification fails.
            </param>
            <returns>
            The <see cref="T:Axle.Verification.ArgumentReference`1"/> instance that represents the argument being verified.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either <paramref name="condition"/> or <paramref name="message"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified verification <paramref name="condition"/> returns <c>false</c> for the verified 
            argument.
            </exception>
        </member>
    </members>
</doc>
